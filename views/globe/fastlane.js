(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.fastlane = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

class CFGNode {
    constructor() {
        this.next = [];
        this.prev = [];
    }
}
class EntryNode extends CFGNode {}
class ExitNode extends CFGNode {}

function wrap(node) {
    const existingExitNode = findExitNode(node);
    const exitingEntryNode = findEntryNode(node);
    if (existingExitNode) {
        if (!exitingEntryNode)
            throw new Error("Found exit node but no entry node!");
        return {
            entryNode: exitingEntryNode,
            exitNode: existingExitNode,
            wasAlreadyWrapped: true
        };
    }
    const exitNode = new ExitNode();
    node.next.push(exitNode);
    exitNode.prev.push(node);

    return {
        entryNode: addEntryNode(exitNode),
        exitNode
    };
}

function unwrap({entryNode, exitNode, wasAlreadyWrapped}) {
    if (wasAlreadyWrapped)
        return;
    entryNode.next.forEach(next => next.prev.pop());
    exitNode.prev.forEach(prev => prev.next.pop());
}

exports.wrap = wrap;
exports.unwrap = unwrap;
exports.EntryNode = EntryNode;
exports.ExitNode = ExitNode;

function addEntryNode(node, entryNode = new EntryNode,
                      alreadyVisited = new Set()) {
    if (alreadyVisited.has(node))
        return;

    alreadyVisited.add(node);
    const prev = node.prev.filter(prev => !alreadyVisited.has(prev));

    if (prev.length === 0) {
        entryNode.next.push(node);
        node.prev.push(entryNode);
    }

    prev.forEach(prev => addEntryNode(prev, entryNode, alreadyVisited));
    return entryNode;
}

function findEntryNode(node) {
    const alreadyVisited = new Set();

    const queue = [node];

    while (queue.length !== 0) {
        const node = queue.pop();
        if (node instanceof EntryNode)
            return node;
        alreadyVisited.add(node);
        queue.push(...node.prev.filter(prev => !alreadyVisited.has(prev)));
    }
}


function findExitNode(node) {
    const alreadyVisited = new Set();

    const queue = [node];

    while (queue.length !== 0) {
        const node = queue.pop();
        if (node instanceof ExitNode)
            return node;
        alreadyVisited.add(node);
        queue.push(...node.next.filter(next => !alreadyVisited.has(next)));
    }
}

},{}],2:[function(require,module,exports){
"use strict";

const EventEmitter = require("events").EventEmitter;

const ComputeNode = require("./compute_node");

class ComputeGraph extends EventEmitter {
    constructor(entryNode, exitNode, nodeMap) {
        super();

        this._entryNode = entryNode;
        this._exitNode = exitNode;
        this._computeNodeMap = nodeMap;

        this._bufferNodeDependencies = new Map();
        this._bufferFeedbackInitialInputDependencies = new Map();
        this._allocationDependencies = new Set();
        this._updateTimer = null;
        this._updateTimers = new Map();
        var changedBuffers = [];
        this._onValueChange = buffer => {
            if (this._updateTimers.has(buffer))
                return;
            this._updateTimers.set(buffer, setTimeout(() => {
                this._handleBufferValueChange(buffer);
                this._updateTimers.delete(buffer);
            }, 0));
        };

        this._determineBufferNodeDependencies();
        this._determineBufferInitialFeedbackInputDependencies();
        this._attachValueChangedListeners();
        this._determineAllocationRelevantBuffers();
    }

    dispose() {
        this._detachValueChangedListeners();
        this.allNodes.forEach(node => node.platform.disposeNode ? node.platform.disposeNode(node) : undefined);
    }

    get entryNode() {
        return this._entryNode;
    }

    get exitNode() {
        return this._exitNode;
    }

    get allNodes() {
        return new Set([...this._computeNodeMap.values()]);
    }

    getComputeNodeForNode(node) {
        return this._computeNodeMap.get(node);
    }

    _determineBufferNodeDependencies(node = this._entryNode, parentDependencies = new Set()) {
        const dependencies = new Set();
        node.inputs.forEach(inputQueue => {
            if (inputQueue.initial.computed)
                return;

            this._addBufferNodeDependency(node, inputQueue.initial);
            dependencies.add(inputQueue.initial);
        });
        parentDependencies.forEach(inputDefinition => this._addBufferNodeDependency(node, inputDefinition));
        node.next.forEach(next => this._determineBufferNodeDependencies(next, new Set([...dependencies, ...parentDependencies])));
    }

    _addBufferNodeDependency(node, inputDefinition) {
        const buffer = inputDefinition.buffer;
        if (!this._bufferNodeDependencies.has(buffer))
            this._bufferNodeDependencies.set(buffer, new Set());
        this._bufferNodeDependencies.get(buffer).add(node);
    }

    _determineBufferInitialFeedbackInputDependencies(node = this._entryNode) {
        node.inputs.forEach(inputQueue => {
            if (!inputQueue.hasFeedback)
                return;

            const initialInput = inputQueue.initial;
            const dependencies =  initialInput.computed ? this._determineBufferDependencies(initialInput.source) : new Set([initialInput.buffer]);

            dependencies.forEach(buffer  => this._addBufferInitialFeedbackInputDependencies(inputQueue, buffer));
        });
        node.next.forEach(next => this._determineBufferInitialFeedbackInputDependencies(next));
    }

    _determineBufferDependencies(computeNode) {
        const buffers = new Set();
        this._bufferNodeDependencies.forEach((nodes, buffer) => {
            if (nodes.has(computeNode))
                buffers.add(buffer);
        });
        return buffers;
    }

    _addBufferInitialFeedbackInputDependencies(inputQueue, buffer) {
        if (!this._bufferFeedbackInitialInputDependencies.has(buffer))
            this._bufferFeedbackInitialInputDependencies.set(buffer, new Set());
        this._bufferFeedbackInitialInputDependencies.get(buffer).add(inputQueue);
    }

    _determineAllocationRelevantBuffers(node = this._entryNode) {
        node.allocationDependencies.forEach(allocationDependency => {
            this._allocationDependencies.add(allocationDependency);
        });
        node.next.forEach(next => this._determineAllocationRelevantBuffers(next));
    }

    _attachValueChangedListeners() {
        this._bufferNodeDependencies.forEach((_, buffer) => {
            buffer.on("change", this._onValueChange);
        });
    }

    _handleBufferValueChange(buffer) {
        if (this._allocationDependencies.has(buffer)) {
            this.emit("type-change");
            return;
        }

        const nodes = this._bufferNodeDependencies.get(buffer);
        if (nodes)
            nodes.forEach(node => node.dirty = true);

        const inputQueues = this._bufferFeedbackInitialInputDependencies.get(buffer);
        if (inputQueues)
            inputQueues.forEach(queue => queue.reset());

        const changedOutputs = new Set();
        this._exitNode.inputs.forEach((output, name) => {
            if (!output.computed)
                if (output.current.buffer === buffer)
                    changedOutputs.add(name);
            if (nodes.has(output.current.source))
                changedOutputs.add(name);

        });

        this.emit("value-change", changedOutputs);
    }

    _detachValueChangedListeners() {
        this._bufferNodeDependencies.forEach((_, buffer) => {
            buffer.removeListener("change", this._onValueChange);
        });
    }
}

exports = module.exports = ComputeGraph;

},{"./compute_node":3,"events":32}],3:[function(require,module,exports){
"use strict";

class ComputeNode {
    constructor(operator) {
        this.prev = [];
        this.next = [];

        this.inputs = new Map();
        this.outputs = new Map();

        this.allocations = new Set();
        this.allocationDependencies = new Map();

        this.result = null;
        this.memory = {};
        this.env = new Map();

        this.evaluate = null;

        this.operator = operator;
        this.dirty = true;
    }
}

exports = module.exports = ComputeNode;

},{}],4:[function(require,module,exports){
"use strict";

const assert = require("assert");

const deepEqual = require("deep-equal");

const worklist = require("./worklist");
const cfgUtils = require("./cfg_utils");
const ComputeGraph = require("./compute_graph");
const ComputeNode = require("./compute_node");
const toShadeValue = require("../util/to_shade_value");
const toFieldDescriptor = require("../util/to_field_descriptor");

class EntryNode extends ComputeNode {}
class ExitNode extends ComputeNode {}

class InputQueue {
	constructor(definition) {
		this._initial = definition;
		this._current = this._initial;
	}

	get hasFeedback() {
		return !!this._initial.feedback;
	}

	get initial() {
		return this._initial;
	}

	get current() {
		return this._current;
	}

	next() {
		const next = this._current;
		if (this._current.feedback)
			this._current = this._current.feedback;

		return next;
	}

	reset() {
		this._current = this._initial;
	}
}

function determineComputeGraph(requestedFieldNames, node) {
	const nodeOutputs = node.determineOutputs();
	const existingRequestedFields = requestedFieldNames[0] !== "*" ? new Map(requestedFieldNames.filter(name => nodeOutputs.has(name)).map(name => [name, nodeOutputs.get(name)])) : nodeOutputs;
	return buildComputeGraph(existingRequestedFields);
}

exports = module.exports = determineComputeGraph;


function buildComputeGraph(requestedFields) {
	const entryNode = new EntryNode();
	const exitNode = new ExitNode();

	const computeNodeMap = new Map();
	function buildComputeNode(node) {
		if (computeNodeMap.has(node))
			return computeNodeMap.get(node);

		const computeNode = new ComputeNode(node.operator);
		computeNode.name = node.operator.name;
		computeNodeMap.set(node, computeNode);

		node.prev.forEach(prev => {
			buildComputeNode(prev);
		});

		const usedInputs = node.determineUsedInputs();
		usedInputs.forEach((field, name)=> {
			if (field.computed) {
				const dependency = computeNodeMap.get(field.source);
				dependency.next = Array.from(new Set([...dependency.next, computeNode]));
				computeNode.prev = Array.from(new Set([...computeNode.prev, dependency]));
			}
			else {
				if (field.feedback && field.feedback.computed && field.feedback.source !== node) {
					const feedbackProvider = computeNodeMap.get(field.feedback.source);
					feedbackProvider.prev = [...new Set([...feedbackProvider.prev, computeNode])];
					computeNode.next = [...new Set([...computeNode.next, feedbackProvider])];
				}
			}
			const queue = createInputQueue(field, computeNodeMap);
			computeNode.inputs.set(name, queue);
			computeNode.env.set(name, field);
		});

		const allocations = node.operator.determineAllocations(usedInputs);
		allocations.forEach(allocation => {
			const sizeInput = {};
			allocation.dependencies.forEach(dependency => {
				const input = usedInputs.get(dependency);
				if (input.computed || input.feedback)
					throw new Error("Computed or feedback input for allocation relevant inputs is not yet supported! Input name: ", dependency);
				computeNode.allocationDependencies.set(input.name, computeNode.inputs.get(dependency).initial.buffer);
				sizeInput[dependency] = toShadeValue(computeNode.inputs.get(dependency).initial.buffer)
			});

			if (allocation.isTexture) {
				const size = allocation.size(sizeInput);
				allocation.width = size[0];
				allocation.height = size[1];
			} else {
				const elementType = toFieldDescriptor(allocation.elements.extra);
				if (elementType.type === undefined) {
					throw new Error("undefined element type for buffer " + allocation.propertyName);
				}
				allocation.elements.staticSize = allocation.size(sizeInput);
			}
		});
		computeNode.allocations = allocations;
		computeNode.outputs = node.determineOutputs();
		return computeNode;
	}

	function handleField(field) {
		if (field.computed)
			buildComputeNode(field.source);
		if (field.feedback)
			handleField(field.feedback);
	}

	requestedFields.forEach(handleField);

	computeNodeMap.forEach((computeNode, node) => {
		if (!node.operator.evaluate)
			computeNodeMap.delete(node);

		if (computeNode.prev.length === 0) {
			computeNode.prev.push(entryNode);
			entryNode.next.push(computeNode);
		}

		if (computeNode.next.length === 0) {
			computeNode.next.push(exitNode);
			exitNode.prev.push(computeNode);
		}
	});

	if (exitNode.prev.length === 0) {
		exitNode.prev.push(entryNode);
		entryNode.next.push(exitNode);
	}

	requestedFields.forEach((output, name) => {
		exitNode.inputs.set(name, createInputQueue(output, computeNodeMap));
	});

	if (!isAcyclic(exitNode))
		throw new Error("Cyclic dependency detected!");

	return new ComputeGraph(entryNode, exitNode, computeNodeMap);
}

function isAcyclic(node, current = new Set(), visited = new Set()) {
	if (current.has(node))
		return false;

	if (visited.has(node))
		return true;

	current.add(node);
	const acyclic = node.prev.every(prev => isAcyclic(prev, current, visited));
	current.delete(node);
	visited.add(node);
	return acyclic;
}

function createInputQueue(inputDefinition, computeNodeMap) {
	return new InputQueue(rewriteInputDefinition(inputDefinition, computeNodeMap));
}

function rewriteInputDefinition(inputDefinition, computeNodeMap, visited = new Map()) {
	if (visited.has(inputDefinition))
		return visited.get(inputDefinition);

	const newInputDefinition = Object.assign({}, inputDefinition);
	if (inputDefinition.computed) {
		newInputDefinition.source = computeNodeMap.get(inputDefinition.source);
	} else {
		newInputDefinition.buffer = inputDefinition.source.fields.get(inputDefinition.name);
	}
	visited.set(inputDefinition, newInputDefinition);
	if (inputDefinition.feedback)
		newInputDefinition.feedback = rewriteInputDefinition(inputDefinition.feedback, computeNodeMap);
	return newInputDefinition;
}

},{"../util/to_field_descriptor":22,"../util/to_shade_value":24,"./cfg_utils":1,"./compute_graph":2,"./compute_node":3,"./worklist":6,"assert":25,"deep-equal":29}],5:[function(require,module,exports){
"use strict";

const deepEqual = require("deep-equal");

const worklist = require("./worklist");
const cfgUtils = require("./cfg_utils");

function determineNodeInput(node) {
	const cfg = cfgUtils.wrap(node);

	try {
		const {inputs} = worklist(
			cfg, determineNodeOutput,
			{start: new Map(), equals: equalInputs, merge: mergeNodeInputs});
		inputs.forEach((inputs, node) => {
			node._cachedInputs = inputs;
		});
		return inputs.get(node);
	} catch (e) {
		throw e;
	} finally {
		cfgUtils.unwrap(cfg);
	}
}

exports = module.exports = determineNodeInput;

function determineNodeOutput(node, input) {
	if (node instanceof cfgUtils.EntryNode
		|| node instanceof cfgUtils.ExitNode)
		return {output: input, enqueue: true};

	try {
		const output = node.operator.determineFinalOutput(
			new Map([...input]), node);
		return {
			output: output, enqueue: true
		};
	} catch (_) {
		return {
			output: input, enqueue: true
		}
	}
}

function mergeNodeInputs(node, inputTables) {
	const fieldInputTable = new Map();
	if (node.fields) {
		node.fields.forEach((buffer, name) => {
			fieldInputTable.set(name, {
				name: name,
				type: buffer.type,
				shape: buffer.shape,
				isTexture: buffer.isTexture,
				computed: false
			});
		});
	}

	inputTables = inputTables.map(input => !input ? new Map() : input);

	const isFeedback = inputTables.map((possibleFeedbackInputTable, idx) => {
		if (isForwardReachable(node.prev[idx], node)) {
			const precedingInputTable
				= mergeMaps(...inputTables.slice(0, idx), fieldInputTable);
			return containsFeedbackForInputTable(possibleFeedbackInputTable, precedingInputTable);
		}
		return false;
	});

	const mergedInputTable = mergeMaps(...inputTables.filter((_, idx) => !isFeedback[idx]), fieldInputTable);
	const mergedFeedbackInputTable = mergeMaps(...inputTables.filter((_, idx) => isFeedback[idx]));
	mergedFeedbackInputTable.forEach(possibleFeedbackInput => {
		if (isValidFeedbackForInput(possibleFeedbackInput, mergedInputTable.get(possibleFeedbackInput.name))) {
			handleCyclicFeedback(possibleFeedbackInput);
			mergedInputTable.get(possibleFeedbackInput.name).feedback = possibleFeedbackInput;
		}
	});

	fieldInputTable.forEach(input => input.source = node);

	return mergedInputTable;
}

function isForwardReachable(nodeToReach, startNode, removedEdges = [],
							visited = new Set()) {
	visited.add(startNode);
	return startNode.next.some(nextNode => {
		if (removedEdges.find(edge => edge[0] === startNode
			&& edge[1] === nextNode))
			return false;
		if (nextNode === nodeToReach)
			return true;
		if (visited.has(nextNode))
			return false;

		visited.add(nextNode);
		return isForwardReachable(nodeToReach, nextNode, removedEdges, visited);
	});
}

function mergeMaps(...maps) {
	return new Map([].concat(...maps.map(m => Array.from(m))));
}

function containsFeedbackForInputTable(potentialFeedbackTable, inputTable) {
	return [...potentialFeedbackTable.values()].some(potentialFeedback => {
		return isValidFeedbackForInput(potentialFeedback,
			inputTable.get(potentialFeedback.name));
	});
}

function isValidFeedbackForInput(possibleFeedbackInput, input) {
	return input && input.source !== possibleFeedbackInput.source && input.type === possibleFeedbackInput.type;
}

function equalInputs(a, b) {
	if (a.size !== b.size)
		return;

	return [...a.values()].every(v => b.has(v.name) && equalProperties(v, b.get(v.name)));
}

function equalProperties(a, b) {
	for (let name in a) {
		if (!a[name] === b[name])
			return false;
	}

	return true;
}

function handleCyclicFeedback(input) {
	if (!input.feedback)
		return;

	const precedingFeedback = [];

	while (input.feedback) {
		const cyclicFeedback = precedingFeedback.find(feedback => {
			const oldFeedback = feedback.feedback;
			delete feedback.feedback;
			const isEqual = deepEqual(feedback, input.feedback);
			feedback.feedback = oldFeedback;
			return isEqual;
		});
		if (cyclicFeedback) {
			input.feedback = cyclicFeedback;
			return;
		}
		precedingFeedback.push(input.feedback);

		input = input.feedback;
	}
}

},{"./cfg_utils":1,"./worklist":6,"deep-equal":29}],6:[function(require,module,exports){
"use strict";

function worklist(
	{entryNode, exitNode}, transferFunction,
	{direction = "forward", start = new Set(), merge = union, equals = equalKeys}
	= {}) {
	var list = new Queue();

	let predecessors = getPredecessors;
	let successors = getSuccessors;

	if (direction === "forward") {
		list.push(entryNode);
	} else {
		list.push(exitNode);
		predecessors = getSuccessors;
		successors = getPredecessors;
	}

	const outputs = new Map();
	const inputs = new Map();

	while (list.length) {
		const node = list.shift();
		const pre = predecessors(node).map(n => outputs.get(n));
		const input = pre.length ? merge(node, pre) : start;
		inputs.set(node, input);
		const oldOutput = outputs.get(node);
		let newOutput = transferFunction(node, input, list, oldOutput);
		if (!newOutput || newOutput instanceof Set)
			newOutput = {output: newOutput, enqueue: true};
		outputs.set(node, newOutput.output);
		if (newOutput.enqueue
			&& (!oldOutput || !equals(newOutput.output, oldOutput)))
			successors(node).forEach(aSuccessor => list.push(aSuccessor));
	}

	return {outputs, inputs};
}

exports = module.exports = worklist;

class Queue extends Array {
	push(element) {
		const index = this.indexOf(element);
		if (index !== -1)
			this.splice(index, 1);
		super.push(element);
	}
}

function getPredecessors(node) {
	return node.prev;
}

function getSuccessors(node) {
	return node.next;
}

function union(_, pre) {
	return new Set([].concat(...pre.map(v => !v ? [] : Array.from(v))))
}

function equalKeys(a, b) {
	return a.size === b.size && [...a].every(v => b.has(v));
}

},{}],7:[function(require,module,exports){
"use strict";

const EventEmitter = require("events").EventEmitter;

const determineComputeGraph = require("../analysis/determine_compute_graph");

const cpuPlatform = require("../platform/cpu");
const debugPlatform = require("../platform/debug");
const Program = require("../execution/program");
const now = require("performance-now");

class InvalidProgram extends EventEmitter {
    constructor(node, error) {
        super("type-change");
        this.invalid = true;
        this.error = error;
        this._node = node;
        this._onTypeChange = () => {
            this.emit("invalid", this);
        };
        this._node.on("type-change", this._onTypeChange);
    }

    dispose() {
        this._node.removeListener("type-change", this._onTypeChange);
    }

    run() {
        return Promise.resolve();
    }
}

const platforms = {
    "cpu": cpuPlatform,
    "debug": debugPlatform
};

function createProgram(node, outputs, options = {forcePlatform: "cpu", benchmark: false}) {
    const start = now();
    const platform = platforms[options.forcePlatform];
    try {
        const graph = determineComputeGraph(outputs, node);
        const schedule = [new Set([graph.entryNode])];
        const allNodes = graph.allNodes;
        let layerIdx = 0;
        while (allNodes.size > 0) {
            if (!schedule[layerIdx])
                schedule[layerIdx] = new Set();
            allNodes.forEach(node => {
                if (node.prev.every(prev => {
                        return schedule.slice(0, layerIdx).some(layer => {
                            return layer.has(prev);
                        });
                    })) {

                    platform.compile(node, options);
                    node.platform = platform;
                    schedule[layerIdx].add(node);
                    allNodes.delete(node);
                }
            });
            ++layerIdx;
        }

        return new Program(node, graph, schedule, now() - start, options.benchmark);
    } catch (error) {
        return new InvalidProgram(node, error);
    }
}

exports.createProgram = createProgram;

},{"../analysis/determine_compute_graph":4,"../execution/program":9,"../platform/cpu":18,"../platform/debug":19,"events":32,"performance-now":39}],8:[function(require,module,exports){
"use strict";

const EventEmitter = require("events").EventEmitter;
const DisposeIfNoListener = require("../util/dispose_if_no_listener");

class ComputeRequest extends DisposeIfNoListener(EventEmitter) {
    constructor(program) {
        super("value");
        this.setMaxListeners(0);

        this._program = program;

        this._program.on("needs-update", this._onProgramNeedsUpdate.bind(this));
        this._program.on("invalid", this._invalidate.bind(this));

        setTimeout(() => {
            if (this._program.error)
                this.emit("error", this._program.error);
            else
                this._onProgramNeedsUpdate();
        }, 0);
    }

    dispose() {
        this._program.dispose();
    }

    _onProgramNeedsUpdate() {
        const pendingResult = new Promise((resolve, reject) => {
            this._program.run().then(resolve).catch(error => {
                this.emit("error", error);
                this._invalidate();
                reject(error);
            });
        });
        this.emit("value", pendingResult);
    }

    _invalidate() {
        this.emit("invalid");
    }
}

exports = module.exports = ComputeRequest;

},{"../util/dispose_if_no_listener":21,"events":32}],9:[function(require,module,exports){
"use strict";

const EventEmitter = require("events").EventEmitter;

const DisposeIfNoListeners = require("../util/dispose_if_no_listener");

const runner = require("./runner");
const Buffer = require("../field/buffer_accessor");

class Program extends DisposeIfNoListeners(EventEmitter) {
    constructor(node, computeGraph, schedule, compileTime, benchmark = true) {
        super("needs-update");
        this.setMaxListeners(0);

        this.time = compileTime;
        this._computeGraph = computeGraph;
        this._executionSchedule = schedule;
        this._node = node;
        this._needsUpdate = true;
        this._benchmark = benchmark;
        this._running = Promise.resolve();

        this._onValueChange = (changedOutputs) => {
            this._changedOutputs = changedOutputs;
            this._needsUpdate = true;
            this.emit("needs-update", this);
        };

        this._onTypeChange = () => {
            this.emit("invalid", this);
        };

        this._node.on("type-change", this._onTypeChange);
        this._computeGraph.on("value-change", this._onValueChange);
        this._computeGraph.on("type-change", this._onTypeChange);
    }

    dispose() {
        this._node.removeListener("type-change", this._onTypeChange);
        this._computeGraph.removeListener("value-change", this._onValueChange);
        this._computeGraph.removeListener("type-change", this._onTypeChange);
        this._computeGraph.dispose();
    }

    run(force = false) {
        if (!this._needsUpdate && !force)
            return Promise.resolve(this._buildResult());

        const changedOutputs = this._changedOutputs;
        this._changedOutputs = null;
        this._running = this._running.then(() => {
            return runner.run(this._executionSchedule, force).then(() => {
                const result = this._buildResult(changedOutputs);
                this._needsUpdate = false;

                if (this._benchmark) {
                    let overallTime = 0;
                    let times = [];
                    this._computeGraph.allNodes.forEach(node => {
                        times.push({name: node.name, time: node.time});
                        overallTime += node.time
                    });
                    result.__time = times;
                    result.__overallTime = overallTime;
                }
                return result;
            });
        });
        return this._running;
    }

    _buildResult(outputNames) {
        const result = {};
        this._computeGraph.exitNode.inputs.forEach((input, name) => {
            input = input.current;
            if (outputNames && !outputNames.has(name))
                return;

            if (input.computed)
                result[name] = Program.fromShadeValue(input.type, input.source.result[input.name]);
            else
                result[name] = Program.fromShadeValue(input.type, input.buffer);
        });
        return result;
    }

    static fromShadeValue(type, value) {
        if (value instanceof Buffer)
            return value;

        if (value.buffer)
            return new Buffer(type, value, value.shape.slice(0, value.shape.length -1));

        if (!Array.isArray(value))
            value = [value];

        const shape = [value.length];
        let elements = value[0];
        while (Array.isArray(elements)) {
            shape.push(elements.length);
            elements = value[0];
        }

        const buffer = type.allocate(shape);
        Program.toBuffer(buffer, value);

        return buffer;
    }

    static toBuffer(buffer, value) {
        for (let i = 0; i < value.length; ++i) {
            if (Array.isArray(value[i]))
                Program.toBuffer(buffer.pick(i), value[i]);
            else
                buffer.set(i, value[i]);
        }
    }
}

exports = module.exports = Program;


},{"../field/buffer_accessor":11,"../util/dispose_if_no_listener":21,"./runner":10,"events":32}],10:[function(require,module,exports){
"use strict";

function run(schedule, force) {
    schedule = [...schedule];
    if (schedule.length === 0)
        return Promise.resolve();
    return runNodes(schedule.shift(), force).then(() => {
        return run(schedule, force)
    });
}

exports.run = run;

function runNodes(nodes, force) {
    let dirtyNodes = [...nodes].filter(node => node.operator && node.operator.evaluate);
    dirtyNodes.forEach(node => node.time = 0);
    if (!force)
        dirtyNodes = dirtyNodes.filter(node => node.dirty);

    if (dirtyNodes.length === 1) {
        const node = dirtyNodes[0];
        return runDirect(node, prepareInputs(node));
    }

    return runWorker(dirtyNodes);
}

function runDirect(node, input) {
    return Promise.resolve(node.evaluateDirect(input, node.memory)).then(result => {
        node.result = result;
        node.time = result.__time;
        node.dirty = false;
    });
}

function runWorker(nodes) {
    const all = Promise.all(nodes.map(node => {
        const operatorInput = prepareInputs(node);

        if (node.evaluateWorker) {
            return node.evaluateWorker(operatorInput, node.memory).then(result => {
                node.result = result;
                node.time = result.__time;
                node.dirty = false;
            });
        }

        return runDirect(node, operatorInput);
    }));

    return all;
}

function prepareInputs(node) {
    const operatorInput = {};

    node.inputs.forEach((input, name)=> {
        input = input.next();
        if (input.computed)
            operatorInput[name] = node.platform.toPlatformValue(input.source.result[input.name]);
        else
            operatorInput[name] = node.platform.toPlatformValue(input.buffer);
    });

    return operatorInput;
}

},{}],11:[function(require,module,exports){
"use strict";

const EventEmitter = require("events").EventEmitter;
const ndarray = require("ndarray");

class BufferAccessor extends EventEmitter {
    constructor(type, data, shape, isTexture = false) {
        super();

        if (data.buffer)
            data = type.toSharedArrayBuffer(data);

        if (!shape || shape.length === 0)
            shape = [data.length / type.size];
        this._arrayShape = shape;
        if (data.data)
            this._ndarray = data;
        else
            this._ndarray = ndarray(data, [...shape, ...type.shape]);
        this._type = type;
        this._isTexture = isTexture;
    }

    get type() {
        return this._type;
    }

    get shape() {
        return this._ndarray.shape;
    }

    get data() {
        return this._ndarray.data;
    }

    set data(newData) {
        this._ndarray.data = newData;
        this.emit("change", this);
    }

    get length() {
        return this._ndarray.shape[0];
    }

    get isTexture() {
        return this._isTexture;
    }

    get(...args) {
        return this.type.valueFromBuffer(this._ndarray.pick(...args));
    }

    set(...args) {
        const value = args.pop();
        this.type.storeValueInBuffer(this._ndarray.pick(...args), value);
        this.emit("change", this)
    }

    pick(...args) {
        const shape = this._arrayShape.slice();
        shape.shift();
        return new BufferAccessor(this._type, this._ndarray.pick(...args), shape);
    }
}

exports = module.exports = BufferAccessor;

},{"events":32,"ndarray":37}],12:[function(require,module,exports){
(function (process,global){
"use strict";

const Shade = require("shade.js");

const BufferAccessor = require("./buffer_accessor");

if (!global.SharedArrayBuffer && !process.browser)
	global.SharedArrayBuffer = ArrayBuffer;

function createTypeDescriptor(name, typedArray, baseShape, valueFromBuffer,
							  storeValueInBuffer, fromArray) {
	let baseSize = baseShape.reduce((pre, cur) => pre * cur, 1);

	const allocate = function(shape) {
		shape = Array.isArray(shape) ? shape : [shape];
		const numElements = shape.reduce((pre, cur) => pre * cur, baseSize);
		const data = new typedArray(new SharedArrayBuffer(numElements *  typedArray.BYTES_PER_ELEMENT));

		return new BufferAccessor(this, data, shape);
	};

	return {
		name: name, shape: baseShape, size: baseSize, allocate: allocate,
		typedArray: typedArray,
		valueFromBuffer: valueFromBuffer,
		storeValueInBuffer: storeValueInBuffer,
		fromArray: fromArray,
		toSharedArrayBuffer: array => {
			if (array.buffer.constructor === SharedArrayBuffer)
				return array;

			var shared = new typedArray(new SharedArrayBuffer(array.length *  typedArray.BYTES_PER_ELEMENT));
			shared.set(array);
			return shared;
		}
	};
}

exports.float32 = createTypeDescriptor(
	"float32", Float32Array, [], buffer => buffer.get(0),
	(buffer, value) => buffer.set(value), v => v[0]);
exports.int32 = createTypeDescriptor(
	"int32", Int32Array, [], buffer => buffer.get(0),
	(buffer, value) => buffer.set(value), v => v[0]);
exports.uint8 = createTypeDescriptor(
	"uint8", Uint8Array, [], buffer => buffer.get(0),
	(buffer, value) => buffer.set(value), v => v[0]);

exports.vec2 = createTypeDescriptor(
	"vec2", Float32Array, [2],
	buffer => new Shade.Vec2(buffer.get(0), buffer.get(1)), (buffer, value) => {
		buffer.set(0, value.x);
		buffer.set(1, value.y);
	}, Shade.Vec2);
exports.vec3 = createTypeDescriptor(
	"vec3", Float32Array, [3],
	buffer => new Shade.Vec3(new Float32Array(buffer.data.buffer, buffer.offset * 4, 3)),
	(buffer, value) => {
		buffer.set(0, value.x);
		buffer.set(1, value.y);
		buffer.set(2, value.z);
	}, Shade.Vec3);
exports.vec4 = createTypeDescriptor(
	"vec4", Float32Array, [4],
	buffer => new Shade.Vec4(buffer.get(0), buffer.get(1), buffer.get(2),
							 buffer.get(3)),
	(buffer, value) => {
		buffer.set(0, value.x);
		buffer.set(1, value.y);
		buffer.set(2, value.z);
		buffer.set(3, value.w);
	}, Shade.Vec4);

exports.mat2 = createTypeDescriptor(
	"mat2", Float32Array, [2, 2],
	buffer => new Shade.Mat2(buffer.get(0, 0), buffer.get(0, 1),
							 buffer.get(1, 0), buffer.get(1, 1)),
	(buffer, value) => {
		buffer.set(0, 0, value.m11);
		buffer.set(0, 1, value.m21);
		buffer.set(1, 0, value.m12);
		buffer.set(1, 1, value.m22);
	}, Shade.Mat2);

exports.mat3 = createTypeDescriptor(
	"mat3", Float32Array, [3, 3],
	buffer => new Shade.Mat3(
		buffer.get(0, 0), buffer.get(0, 1), buffer.get(0, 2), buffer.get(1, 0),
		buffer.get(1, 1), buffer.get(1, 2), buffer.get(2, 0), buffer.get(2, 1),
		buffer.get(2, 2)),
	(buffer, value) => {
		buffer.set(0, 0, value.m11);
		buffer.set(0, 1, value.m21);
		buffer.set(0, 2, value.m31);
		buffer.set(1, 0, value.m12);
		buffer.set(1, 1, value.m22);
		buffer.set(1, 2, value.m32);
		buffer.set(2, 0, value.m13);
		buffer.set(2, 1, value.m23);
		buffer.set(2, 2, value.m33);
	}, Shade.Mat3);

exports.mat4 = createTypeDescriptor(
	"mat4", Float32Array, [4, 4],
	buffer => new Shade.Mat4(
		buffer.get(0, 0), buffer.get(0, 1), buffer.get(0, 2), buffer.get(0, 3),
		buffer.get(1, 0), buffer.get(1, 1), buffer.get(1, 2), buffer.get(1, 3),
		buffer.get(2, 0), buffer.get(2, 1), buffer.get(2, 2), buffer.get(2, 3),
		buffer.get(3, 0), buffer.get(3, 1), buffer.get(3, 2), buffer.get(3, 3)),
	(buffer, value) => {
		buffer.set(0, 0, value.m11);
		buffer.set(0, 1, value.m21);
		buffer.set(0, 2, value.m31);
		buffer.set(0, 3, value.m41);
		buffer.set(1, 0, value.m12);
		buffer.set(1, 1, value.m22);
		buffer.set(1, 2, value.m32);
		buffer.set(1, 3, value.m42);
		buffer.set(2, 0, value.m13);
		buffer.set(2, 1, value.m23);
		buffer.set(2, 2, value.m33);
		buffer.set(2, 3, value.m43);
		buffer.set(3, 0, value.m14);
		buffer.set(3, 1, value.m24);
		buffer.set(3, 2, value.m34);
		buffer.set(3, 3, value.m44);
	}, Shade.Mat4);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./buffer_accessor":11,"_process":40,"shade.js":44}],13:[function(require,module,exports){
"use strict";

const assert = require("assert");
const EventEmitter = require("events").EventEmitter;

const NodeCollection = require("./node_collection");
const Operator = require("../operator/operator");
const compiler = require("../compiler");

const determineNodeInputs = require("../analysis/determine_node_inputs");

let count = 1;

class Node extends EventEmitter {
	constructor({name = "unnamed node " + count++, operator = Operator.defaultOperator} = {}) {
		super();
		this.setMaxListeners(0);

		this.name = name;
		this.next = [];
		this.prev = [];
		this.fields = new Map();
		this._operator = operator;
		this._cachedInputs = null;
	}

	get operator() {
		return this._operator;
	}

	set operator(operator) {
		this._operator = operator;
		this._typeChanged();
	}

	setField(name, buffer) {
		if (this.fields.has(name))
			this.fields.delete(name);

		this.fields.set(name, buffer);
		this._typeChanged();
		return this;
	}

	removeField(name) {
		this.fields.delete(name);
		this._typeChanged();
	}

	pipe(...destinations) {
		destinations.forEach(destination => {
			assert(destination instanceof Node);

			if (this.next.indexOf(destination) === -1) {
				assert(destination.prev.indexOf(this) === -1);
				this.next.push(destination);
				destination.prev.push(this);
				destination._typeChanged();
			}

			assert(destination.prev.indexOf(this) !== -1);
		});

		return new NodeCollection(destinations);
	}

	unpipe(...destinations) {
		if (destinations.length === 0)
			destinations = this.next.slice();
		destinations.forEach(destination => {
			assert(destination instanceof Node);

			const nextIdx = this.next.indexOf(destination);
			if (nextIdx !== -1) {
				const prevIdx = destination.prev.indexOf(this);
				assert(prevIdx !== -1);
				this.next.splice(nextIdx, 1);
				destination.prev.splice(prevIdx, 1);
				destination._typeChanged();
			}

			assert(destination.prev.indexOf(this) === -1);
		});
	}

	determineAvailableInputs() {
		if (this._cachedInputs)
			return this._cachedInputs;
		return determineNodeInputs(this);//.then(inputTable => this._inputTable = inputTable);
	}

	determineUsedInputs() {
		const inputs = this.determineAvailableInputs();
		return this.operator.determineUsedInputs(new Map([...inputs]), this);
	}

	determineOutputs() {
		const inputs = this.determineAvailableInputs();
		return this.operator.determineFinalOutput(new Map([...inputs]), this);
	}

	createProgramToCompute(outputs, options) {
		return compiler.createProgram(this, outputs, options);
	}

	_typeChanged(alreadyInformedNodes = new Set()) {
		this._cachedInputs = null;
		this.emit("type-change");
		this.next.forEach(next => {
			if (alreadyInformedNodes.has(next))
				return;
			alreadyInformedNodes.add(next);
			next._typeChanged(alreadyInformedNodes)
		});
	}
}

exports = module.exports = Node;

function isBackwardsReachable(nodeToReach, startNode,
							  visited = new Set()) {
	visited.add(startNode);
	return startNode.prev.some(prevNode => {
		if (prevNode === nodeToReach)
			return true;
		if (visited.has(prevNode))
			return false;

		visited.add(prevNode);
		return isBackwardsReachable(nodeToReach, prevNode, visited);
	});
}

},{"../analysis/determine_node_inputs":5,"../compiler":7,"../operator/operator":16,"./node_collection":14,"assert":25,"events":32}],14:[function(require,module,exports){
"use strict";

class NodeCollection extends Set {
	constructor(nodes, baseSet) {
		super(nodes);
		this._baseSet = baseSet;
	}

	pipe(...destinations) {
		this.forEach(node => node.pipe(...destinations));
		return new NodeCollection(destinations, this._baseSetComplement());
	}

	select(...filters) {
		let filter = node => {
			return filters.indexOf(node) !== -1
		};
		if (filters.length === 1 && typeof filters[0] === "function")
			filter = filters[0];

		return new NodeCollection([...this].filter(filter), this);
	}

	deselect() {
		if (this._baseSet)
			return new NodeCollection([...this, ...this._baseSet],
									  this._baseSet._baseSet);
		else
			return this;
	}

	_baseSetComplement() {
		if (this._baseSet)
			return new NodeCollection([...this._baseSet].filter(node => {
				return !this.has(node);
			}),
									  this._baseSet._baseSet);
		return null;
	}
}

exports = module.exports = NodeCollection;

},{}],15:[function(require,module,exports){
"use strict";

class FilterOperator {
    constructor(names = new Set(), type = FilterOperator.type.remove) {
        if (Array.isArray(names))
            this._names = new Set(names);
        else
            this._names = names;
        this._type = type;
    }

    determineUsedInputs() {
        return new Map();
    }

    determineFinalOutput(inputs) {
        const result = new Map();
        inputs.forEach((field, name) => {
            if ((this._type === FilterOperator.type.remove && !this._names.has(name)) || (this._type === FilterOperator.type.keep && this._names.has(name)))
                result.set(name, field);
        });
        return result;
    }

    determineAllocations() {
        return new Set();
    }
}

FilterOperator.type = {
    remove: "remove",
    keep: "keep"
};

exports = module.exports = FilterOperator;

},{}],16:[function(require,module,exports){
"use strict";

const assert = require("assert");
const Shade = require("shade.js");

const buildShadeOptions = require("../util/build_shade_options");
const toFieldDescriptor = require("../util/to_field_descriptor");

let count = 1;
const shadeOptions = {
    loc: true,
    validate: true,
    throwOnError: true,
    sanitize: true,
    entry: "evaluate"
};

class Operator {
    constructor({name = "unnamed operator " + count++, evaluate} = {}) {
        this.name = name;
        this.evaluate = evaluate;
    }

    determineUsedInputs(inputs) {
        if (!this.evaluate)
            return new Map();

        const usedParameters = Shade.determineUsedParameters(this.evaluate,  buildShadeOptions(inputs, shadeOptions));
        const used = [...inputs].filter(([name, field]) => {
            return usedParameters.shaderParameters.indexOf(name) !== -1;
        });
        return new Map(used);
    }

    determineFinalOutput(inputs, node) {
        if (!this.evaluate)
            return inputs;

        const returnTypeInfo = Shade.determineReturnType(this.evaluate, buildShadeOptions(inputs, shadeOptions));

        if (returnTypeInfo.type === Shade.TYPES.UNDEFINED)
            return inputs;

        if (returnTypeInfo.type === Shade.TYPES.OBJECT)
            return Object.keys(returnTypeInfo.properties).reduce((outputs, name) => {
                var field = toFieldDescriptor(returnTypeInfo.properties[name], name, node);
                field.computed = true;
                if (field.type === undefined)
                    return outputs;
                outputs.set(name, field);
                return outputs;
            }, new Map(inputs));

        throw new Error("Operator return type has to be undefined or object!");
    }

    determineAllocations(inputs) {
        if (!this.evaluate)
            return new Set();

        const workSet = new Shade.WorkingSet();
        workSet.parse(this.evaluate, shadeOptions);
        workSet.analyze(buildShadeOptions(inputs).inject, undefined, Object.assign({extractAllocations: true}, shadeOptions));
        return workSet.processingData.allocations || new Set();
    }
}

exports = module.exports = Operator;
exports.defaultOperator = new Operator({name: "fastlane-default-operator"});

},{"../util/build_shade_options":20,"../util/to_field_descriptor":22,"assert":25,"shade.js":44}],17:[function(require,module,exports){
"use strict";

class RenameOperator {
    constructor(renameMap) {
        this.name = "Rename Operator";
        this._renameMap = renameMap;
    }

    determineUsedInputs(inputs) {
        return new Map();
    }

    determineFinalOutput(inputs, node) {
        const result = new Map();
        inputs.forEach((field, name) => {
            if (this._renameMap.has(field.name))
                result.set(this._renameMap.get(field.name), field);

            result.set(name, field);
        });
        return result;
    }

    determineAllocations() {
        return new Set();
    }
}

exports = module.exports = RenameOperator;

},{}],18:[function(require,module,exports){
"use strict";

const Shade = require("shade.js");

const Buffer = require("../field/buffer_accessor");
const Types = require("../field/types");
const buildShadeOptions = require("../util/build_shade_options");
const toFieldDescriptor = require("../util/to_field_descriptor");

const shadeOptions = {
    loc: true,
    validate: true,
    throwOnError: true,
    sanitize: true,
    entry: "evaluate",
    extractAllocations: true
};

const workerSkeleton = `
    self.onmessage = function (event) {
        const input = event.data.input;
        const inputShapes = event.data.inputShapes;
        inputShapes.forEach((shape, name) => input[name].shape = shape);
        const memory = event.data.memory;
        const memoryShapes = event.data.memoryShapes;
        memoryShapes.forEach((shape, name) => memory[name].shape = shape);        
        const result = evaluate(input, memory);
        const buffers = [];
        const shapes = new Map();
        for (var name in result) {
            if (result[name].buffer) {
                buffers.push(result[name].buffer);
                shapes.set(name, result[name].shape);
            }
        }
        result.shapes = shapes;
        self.postMessage({result, shapes});
    }
    const evaluate = `;

const cache = new Map();

class CPUPlatform {
    compile(computeNode, options) {
        if (!computeNode.operator)
            return;

        const env = buildShadeOptions(computeNode.env).inject;
        const envKey = JSON.stringify(Object.assign({useSIMD: options.useSIMD}, env));
        const evaluateFn = computeNode.operator.evaluate.toString();
        if (cache.has(evaluateFn)) {
            const inputSignatureCache = cache.get(evaluateFn);
            const evaluateFunctions = inputSignatureCache.get(envKey);
            if (evaluateFunctions) {
                computeNode.evaluateDirect = evaluateFunctions.direct;
                if (options.useWebWorker) {
                    const workerInfo = this.createWebWorker(evaluateFunctions.src);
                    computeNode.evaluateWorker = workerInfo.fn;
                    computeNode.worker = workerInfo.worker;
                }
                computeNode.allocations.forEach(allocation => {
                    if (allocation.isTexture) {
                        const accessor = Types.vec4.allocate([allocation.width, allocation.height]);
                        computeNode.memory[allocation.propertyName] = accessor.data;
                        computeNode.memory[allocation.propertyName].shape = accessor.shape;
                    } else {
                        const descriptor = toFieldDescriptor(allocation.elements.extra);
                        const accessor = descriptor.type.allocate(allocation.elements.staticSize);
                        computeNode.memory[allocation.propertyName] = accessor.data;
                        computeNode.memory[allocation.propertyName].shape = accessor.shape;
                    }
                });
            }
        }
        if (!computeNode.evaluateDirect) {
            const workset = new Shade.WorkingSet();
            workset.parse(evaluateFn, shadeOptions);

            workset.analyze(env, undefined, shadeOptions);
            const memInject = {};
            computeNode.allocations.forEach(allocation => {
                if (allocation.isTexture) {
                    const accessor = Types.vec4.allocate([allocation.width, allocation.height]);
                    computeNode.memory[allocation.propertyName] = accessor.data;
                    computeNode.memory[allocation.propertyName].shape = accessor.shape;
                    memInject[allocation.propertyName] = {
                        type: Shade.TYPES.OBJECT,
                        kind: Shade.OBJECT_KINDS.TEXTURE,
                        width: allocation.width,
                        height: allocation.height
                    };
                } else {
                    const descriptor = toFieldDescriptor(allocation.elements.extra);
                    const accessor = descriptor.type.allocate(allocation.elements.staticSize);
                    computeNode.memory[allocation.propertyName] = accessor.data;
                    computeNode.memory[allocation.propertyName].shape = accessor.shape;
                    memInject[allocation.propertyName] = {
                        type: Shade.TYPES.ARRAY,
                        staticSize: allocation.elements.staticSize,
                        elements: allocation.elements,
                    };
                }
            });
            workset.injectMemory({
                extra: {
                    type: "object",
                    global: true,
                    properties: memInject
                }
            });
            if (!cache.has(evaluateFn))
                cache.set(evaluateFn, new Map());
            const inputSignatureCache = cache.get(evaluateFn);
            const evaluateFunctions = this.createEvaluateFunction(computeNode, workset, options);
            if (options.useWebWorker) {
                const workerInfo = this.createWebWorker(evaluateFunctions.src);
                evaluateFunctions.worker = workerInfo.fn;
                computeNode.worker = workerInfo.worker;
            }
            inputSignatureCache.set(envKey, evaluateFunctions);

            computeNode.evaluateDirect = evaluateFunctions.direct;
            computeNode.evaluateWorker = evaluateFunctions.worker;
        }
    }

    createEvaluateFunction(computeNode, workSet, options) {
        let name = computeNode.operator.name.replace(/ |-/g, '_');
        let src = workSet.compileToFastlane(Object.assign(options, {name: name}));
        let evaluateFunctions = {
            src: src
        };
        name = name + (options.useSIMD ? "_simd" : "");
        let newSrc = `(${src})//# sourceURL=${name}.js`;
        evaluateFunctions.direct = (0, eval)(newSrc);

        return evaluateFunctions;
    }

    createWebWorker(src) {
        const workerSrc = workerSkeleton + src;
        const blob = new Blob([workerSrc], {type: "text/javascript"});
        const url = URL.createObjectURL(blob);
        const worker = new Worker(url);
        URL.revokeObjectURL(url);
        return {
            worker: worker,
            fn: function (input, memory) {
                const data = {input, memory};
                let transfer = [];
                const inputShapes = new Map();
                const memoryShapes = new Map();
                for (let name in input) {
                    if (input[name].buffer) {
                        transfer.push(input[name].buffer);
                        inputShapes.set(name, input[name].shape);
                    }
                }
                for (let name in memory) {
                    if (memory[name].buffer) {
                        transfer.push(memory[name].buffer);
                        memoryShapes.set(name, memory[name].shape);
                    }
                }
                data.inputShapes = inputShapes;
                data.memoryShapes = memoryShapes;
                return new Promise(resolve => {
                    this.worker.postMessage(data);
                    this.worker.onmessage = function (event) {
                        const result = event.data.result;
                        const shapes = event.data.shapes;
                        shapes.forEach((shape, name) => result[name].shape = shape);
                        resolve(result);
                    }
                });
            }
        };
    }

    toPlatformValue(buffer) {
        if (buffer.buffer)
            return buffer;

        if (buffer.shape && buffer.shape.length === 1 && buffer.shape[0] === 1)
            return buffer.get(0);

        if (Array.isArray(buffer))
            return buffer;

        if (buffer instanceof Buffer) {
            const data = buffer._ndarray.data;
            data.shape = buffer.shape;
            return data;
        }

        return buffer;
    }

    disposeNode(computeNode) {
        if (computeNode.worker)
            computeNode.worker.terminate();
    }
}

exports = module.exports = new CPUPlatform();

},{"../field/buffer_accessor":11,"../field/types":12,"../util/build_shade_options":20,"../util/to_field_descriptor":22,"shade.js":44}],19:[function(require,module,exports){
(function (global){
"use strict";

const assert = require("assert");
const Shade = require("shade.js");

const buildShadeOptions = require("../util/build_shade_options");
const toFieldDescriptor = require("../util/to_field_descriptor");
const toShadeValue = require("../util/to_shade_value");

const shadeOptions = {
    entry: "evaluate",
    sanitize: true,
    extractAllocations: true
};

global.Vec2 = Shade.Vec2;
global.Vec3 = Shade.Vec3;
global.Vec4 = Shade.Vec4;
global.Mat2 = Shade.Mat2;
global.Mat3 = Shade.Mat3;
global.Mat4 = Shade.Mat4;


class DebugPlatform {
    compile(computeNode) {
        if (!computeNode.operator)
            return () => {};

        const workset = new Shade.WorkingSet();
        workset.parse(computeNode.operator.evaluate, shadeOptions);
        const env = buildShadeOptions(computeNode.env).inject;
        workset.analyze(env, undefined, shadeOptions);
        const memInject = {};
        computeNode.allocations.forEach(allocation => {
            if (allocation.isTexture) {
                const accessor = Types.vec4.allocate([allocation.width, allocation.height]);
                computeNode.memory[allocation.propertyName] = toShadeValue(accessor);
                // computeNode.memory[allocation.propertyName].shape = accessor.shape;
                memInject[allocation.propertyName] = {
                    type: Shade.TYPES.OBJECT,
                    kind: Shade.OBJECT_KINDS.TEXTURE,
                    width: allocation.width,
                    height: allocation.height
                };
            } else {
                const descriptor = toFieldDescriptor(allocation.elements.extra);
                const accessor = descriptor.type.allocate(allocation.elements.staticSize);
                computeNode.memory[allocation.propertyName] = toShadeValue(accessor);
                // computeNode.memory[allocation.propertyName].shape = accessor.shape;
                memInject[allocation.propertyName] = {
                    type: Shade.TYPES.ARRAY,
                    staticSize: allocation.elements.staticSize,
                    elements: allocation.elements,
                };
            }
        });
        workset.injectMemory({
            extra: {
                type: "object",
                global: true,
                properties: memInject
            }
        });

        const src = workset.toJavaScript();
        let name = computeNode.operator.name.replace(/ |-/g, '_');
        let newSrc = `(${src})//# sourceURL=${name}_debug.js`;
        computeNode.evaluateDirect = (0, eval)(newSrc);
    }

    toPlatformValue(buffer) {
        return toShadeValue(buffer);
    }
}

exports = module.exports = new DebugPlatform();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../util/build_shade_options":20,"../util/to_field_descriptor":22,"../util/to_shade_value":24,"assert":25,"shade.js":44}],20:[function(require,module,exports){
"use strict";

const toShadeType = require("./to_shade_type");

exports = module.exports = (inputs, options = {}) => {
    const env = [...inputs].reduce((env, [name, field]) => {
        env[name] = toShadeType(field);
        return env;
    }, {});

    return Object.assign({
        inject: {
            this: {type: "object", kind: "any", info: {}},
            evaluate: [{
                extra: {
                    type: "object",
                    global: true,
                    properties: env
                }
            }]
        }
    }, options);
};

},{"./to_shade_type":23}],21:[function(require,module,exports){
"use strict";

const DisposeIfNoListener = superclass => class extends superclass {
    constructor(eventName) {
        super();

        const callDispose = () => {
            if (this.dispose)
                this.dispose();
        };

        this.on("removeListener", () => {
            if (this.listenerCount(eventName) === 0)
                callDispose();
        });

        setTimeout(() => {
            if (this.listenerCount(eventName) === 0)
                callDispose();
        }, 0);
    }
};

exports = module.exports = DisposeIfNoListener;

},{}],22:[function(require,module,exports){
"use strict";

const Shade = require("shade.js");

const Types = require("../field/types");

const typeMap = new Map([
    [Shade.TYPES.INT, Types.int32],
    [Shade.TYPES.NUMBER, Types.float32],
    [Shade.OBJECT_KINDS.VEC2, Types.vec2],
    [Shade.OBJECT_KINDS.VEC3, Types.vec3],
    [Shade.OBJECT_KINDS.VEC4, Types.vec4],
    // [Shade.OBJECT_KINDS.MATRIX2, Types.mat2],
    [Shade.OBJECT_KINDS.MATRIX3, Types.mat3],
    [Shade.OBJECT_KINDS.MATRIX4, Types.mat4],
]);

exports = module.exports = (typeInfo, name, source) => {
    let type = typeInfo.kind || typeInfo.type;
    const shape = [];
    let flType = undefined;
    if (type === Shade.OBJECT_KINDS.TEXTURE) {
        flType = Types.vec4;
        shape.push(typeInfo.width);
        shape.push(typeInfo.height);
        shape.push(...flType.shape);

        return {
            name: name,
            type: flType,
            shape: shape,
            source: source,
            isTexture: true
        }
    }

    while (type === Shade.TYPES.ARRAY) {
        shape.push(typeInfo.staticSize);
        const elementTypeInfo = typeInfo.elements.extra;
        type = elementTypeInfo.kind || elementTypeInfo.type;
    }

    flType = typeMap.get(type);
    if (shape.length === 0)
        shape.push(1);

    shape.push(...flType.shape);

    return {
        name: name,
        type: flType,
        shape: shape,
        source: source
    };
};

},{"../field/types":12,"shade.js":44}],23:[function(require,module,exports){
"use strict";

const Shade = require("shade.js");

const Types = require("../field/types");

const typeMap = new Map([
    [Types.int32, {
        type: Shade.TYPES.INT
    }],
    [Types.float32, {
        type: Shade.TYPES.NUMBER
    }],

    [Types.vec2, {
        type: Shade.TYPES.OBJECT,
        kind: Shade.OBJECT_KINDS.VEC2
    }],
    [Types.vec3, {
        type: Shade.TYPES.OBJECT,
        kind: Shade.OBJECT_KINDS.VEC3
    }],
    [Types.vec4, {
        type: Shade.TYPES.OBJECT,
        kind: Shade.OBJECT_KINDS.VEC4
    }],

    [Types.mat2, {
        type: Shade.TYPES.OBJECT,
        kind: Shade.OBJECT_KINDS.MATRIX2
    }],
    [Types.mat3, {
        type: Shade.TYPES.OBJECT,
        kind: Shade.OBJECT_KINDS.MATRIX3
    }],
    [Types.mat4, {
        type: Shade.TYPES.OBJECT,
        kind: Shade.OBJECT_KINDS.MATRIX4
    }]
]);

exports = module.exports = function ({type, shape, accessors, isTexture}) {
    // if (!typeMap.has(type))
    //     throw new Error("Unsupported Type: " + type);
        
    if (shape[0] === 1) {
        const result = Object.assign({
            source: Shade.SOURCES.UNIFORM
        }, typeMap.get(type));
        if (accessors)
            result.accessors = accessors;
        return result;
    } else {
        if (shape.length === 3 && shape[2] === 4 && isTexture)
            return {
                type: Shade.TYPES.OBJECT,
                kind: Shade.OBJECT_KINDS.TEXTURE,
                accessors: accessors,
                width: shape[0],
                height: shape[1]
            };

        const arrayShape = shape.slice(0);
        const arraySize = arrayShape.shift();
        for (let i = 0; i < type.shape.length; ++i)
            arrayShape.pop();

        const shadeTypeInfo = {
            type: Shade.TYPES.ARRAY,
            elements: {
                extra: {}
            },
            staticSize: arraySize,
            source: Shade.SOURCES.UNIFORM
        };

        let elementTypeInfo = shadeTypeInfo.elements.extra;
        while (arrayShape.length > 0) {
            elementTypeInfo.type = Shade.TYPES.ARRAY;
            elementTypeInfo.staticSize = arrayShape.pop();
            elementTypeInfo.elements = {};
            elementTypeInfo.elements.extra = {};
            elementTypeInfo = elementTypeInfo.elements.extra;
        }

        Object.assign(elementTypeInfo, typeMap.get(type));
        if (accessors)
            shadeTypeInfo.accessors = accessors;

        return shadeTypeInfo;
    }
};

},{"../field/types":12,"shade.js":44}],24:[function(require,module,exports){
"use strict";

exports = module.exports = buffer => {
    if (buffer.shape && buffer.shape[0] === 1)
        return buffer.get(0);

    if (Array.isArray(buffer))
        return buffer;

    if (typeof buffer === "object")
        return new Proxy(buffer, {
            get: function (target, prop) {
                if (typeof prop === "string") {
                    if (prop === "width")
                        return target._arrayShape[0];
                    if (prop === "height")
                        return target._arrayShape[1];
                    const idx = parseInt(prop);
                    if (Number.isInteger(idx)) {
                        if (target._arrayShape.length > 1)
                            return new Proxy(target.pick(idx), this);
                        else
                            return target.get(idx);
                    }
                }
                return target[prop];
            },
            set: function (target, prop, value) {
                if (typeof prop === "string") {
                    const idx = parseInt(prop);
                    if (Number.isInteger(idx)) {
                        target.set(idx, value);
                        return true;
                    }
                }
                target[prop] = value;
                return true;
            }
        });

    return buffer;
};

},{}],25:[function(require,module,exports){
// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// when used in node, this will actually load the util module we depend on
// versus loading the builtin util module as happens otherwise
// this is a bug in node module loading as far as I am concerned
var util = require('util/');

var pSlice = Array.prototype.slice;
var hasOwn = Object.prototype.hasOwnProperty;

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  }
  else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = stackStartFunction.name;
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function replacer(key, value) {
  if (util.isUndefined(value)) {
    return '' + value;
  }
  if (util.isNumber(value) && !isFinite(value)) {
    return value.toString();
  }
  if (util.isFunction(value) || util.isRegExp(value)) {
    return value.toString();
  }
  return value;
}

function truncate(s, n) {
  if (util.isString(s)) {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function getMessage(self) {
  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
         self.operator + ' ' +
         truncate(JSON.stringify(self.expected, replacer), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!util.isObject(actual) && !util.isObject(expected)) {
    return actual == expected;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b) {
  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b)) {
    return a === b;
  }
  var aIsArgs = isArguments(a),
      bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  var ka = objectKeys(a),
      kb = objectKeys(b),
      key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  } else if (actual instanceof expected) {
    return true;
  } else if (expected.call({}, actual) === true) {
    return true;
  }

  return false;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (util.isString(expected)) {
    message = expected;
    expected = null;
  }

  try {
    block();
  } catch (e) {
    actual = e;
  }

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  if (!shouldThrow && expectedException(actual, expected)) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [true].concat(pSlice.call(arguments)));
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/message) {
  _throws.apply(this, [false].concat(pSlice.call(arguments)));
};

assert.ifError = function(err) { if (err) {throw err;}};

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

},{"util/":42}],26:[function(require,module,exports){
'use strict'

exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

function init () {
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i]
    revLookup[code.charCodeAt(i)] = i
  }

  revLookup['-'.charCodeAt(0)] = 62
  revLookup['_'.charCodeAt(0)] = 63
}

init()

function toByteArray (b64) {
  var i, j, l, tmp, placeHolders, arr
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0

  // base64 is 4/3 + up to two characters of the original data
  arr = new Arr(len * 3 / 4 - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],27:[function(require,module,exports){
(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.foo = function () { return 42 }
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */
function Buffer (arg) {
  if (!(this instanceof Buffer)) {
    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
    if (arguments.length > 1) return new Buffer(arg, arguments[1])
    return new Buffer(arg)
  }

  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    this.length = 0
    this.parent = undefined
  }

  // Common case.
  if (typeof arg === 'number') {
    return fromNumber(this, arg)
  }

  // Slightly less common case.
  if (typeof arg === 'string') {
    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
  }

  // Unusual.
  return fromObject(this, arg)
}

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function fromNumber (that, length) {
  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < length; i++) {
      that[i] = 0
    }
  }
  return that
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

  // Assumption: byteLength() return value is always < kMaxLength.
  var length = byteLength(string, encoding) | 0
  that = allocate(that, length)

  that.write(string, encoding)
  return that
}

function fromObject (that, object) {
  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

  if (isArray(object)) return fromArray(that, object)

  if (object == null) {
    throw new TypeError('must start with number, buffer, array or string')
  }

  if (typeof ArrayBuffer !== 'undefined') {
    if (object.buffer instanceof ArrayBuffer) {
      return fromTypedArray(that, object)
    }
    if (object instanceof ArrayBuffer) {
      return fromArrayBuffer(that, object)
    }
  }

  if (object.length) return fromArrayLike(that, object)

  return fromJsonObject(that, object)
}

function fromBuffer (that, buffer) {
  var length = checked(buffer.length) | 0
  that = allocate(that, length)
  buffer.copy(that, 0, 0, length)
  return that
}

function fromArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Duplicate of fromArray() to keep fromArray() monomorphic.
function fromTypedArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  // Truncating the elements is probably not what people expect from typed
  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
  // of the old Buffer constructor.
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(array)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromTypedArray(that, new Uint8Array(array))
  }
  return that
}

function fromArrayLike (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
// Returns a zero-length buffer for inputs that don't conform to the spec.
function fromJsonObject (that, object) {
  var array
  var length = 0

  if (object.type === 'Buffer' && isArray(object.data)) {
    array = object.data
    length = checked(array.length) | 0
  }
  that = allocate(that, length)

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
} else {
  // pre-set for values that may exist in the future
  Buffer.prototype.length = undefined
  Buffer.prototype.parent = undefined
}

function allocate (that, length) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that.length = length
  }

  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
  if (fromPool) that.parent = rootParent

  return that
}

function checked (length) {
  // Note: cannot use `length < kMaxLength` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (subject, encoding) {
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

  var buf = new Buffer(subject, encoding)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

  if (list.length === 0) {
    return new Buffer(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; i++) {
      length += list[i].length
    }
  }

  var buf = new Buffer(length)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

function byteLength (string, encoding) {
  if (typeof string !== 'string') string = '' + string

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'binary':
      // Deprecated
      case 'raw':
      case 'raws':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  start = start | 0
  end = end === undefined || end === Infinity ? this.length : end | 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  return Buffer.compare(this, b)
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
  byteOffset >>= 0

  if (this.length === 0) return -1
  if (byteOffset >= this.length) return -1

  // Negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

  if (typeof val === 'string') {
    if (val.length === 0) return -1 // special case: looking for empty string always fails
    return String.prototype.indexOf.call(this, val, byteOffset)
  }
  if (Buffer.isBuffer(val)) {
    return arrayIndexOf(this, val, byteOffset)
  }
  if (typeof val === 'number') {
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
    }
    return arrayIndexOf(this, [ val ], byteOffset)
  }

  function arrayIndexOf (arr, val, byteOffset) {
    var foundIndex = -1
    for (var i = 0; byteOffset + i < arr.length; i++) {
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
      } else {
        foundIndex = -1
      }
    }
    return -1
  }

  throw new TypeError('val must be string, number or Buffer')
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) throw new Error('Invalid hex string')
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    var swap = encoding
    encoding = offset
    offset = length | 0
    length = swap
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'binary':
        return binaryWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length) newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; i--) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; i++) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"base64-js":26,"ieee754":33,"isarray":28}],28:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],29:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":30,"./lib/keys.js":31}],30:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],31:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],32:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],33:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],34:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],35:[function(require,module,exports){
"use strict"

function iota(n) {
  var result = new Array(n)
  for(var i=0; i<n; ++i) {
    result[i] = i
  }
  return result
}

module.exports = iota
},{}],36:[function(require,module,exports){
/**
 * Determine if an object is Buffer
 *
 * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * License:  MIT
 *
 * `npm install is-buffer`
 */

module.exports = function (obj) {
  return !!(obj != null &&
    (obj._isBuffer || // For Safari 5-7 (missing Object.prototype.constructor)
      (obj.constructor &&
      typeof obj.constructor.isBuffer === 'function' &&
      obj.constructor.isBuffer(obj))
    ))
}

},{}],37:[function(require,module,exports){
var iota = require("iota-array")
var isBuffer = require("is-buffer")

var hasTypedArrays  = ((typeof Float64Array) !== "undefined")

function compare1st(a, b) {
  return a[0] - b[0]
}

function order() {
  var stride = this.stride
  var terms = new Array(stride.length)
  var i
  for(i=0; i<terms.length; ++i) {
    terms[i] = [Math.abs(stride[i]), i]
  }
  terms.sort(compare1st)
  var result = new Array(terms.length)
  for(i=0; i<result.length; ++i) {
    result[i] = terms[i][1]
  }
  return result
}

function compileConstructor(dtype, dimension) {
  var className = ["View", dimension, "d", dtype].join("")
  if(dimension < 0) {
    className = "View_Nil" + dtype
  }
  var useGetters = (dtype === "generic")

  if(dimension === -1) {
    //Special case for trivial arrays
    var code =
      "function "+className+"(a){this.data=a;};\
var proto="+className+".prototype;\
proto.dtype='"+dtype+"';\
proto.index=function(){return -1};\
proto.size=0;\
proto.dimension=-1;\
proto.shape=proto.stride=proto.order=[];\
proto.lo=proto.hi=proto.transpose=proto.step=\
function(){return new "+className+"(this.data);};\
proto.get=proto.set=function(){};\
proto.pick=function(){return null};\
return function construct_"+className+"(a){return new "+className+"(a);}"
    var procedure = new Function(code)
    return procedure()
  } else if(dimension === 0) {
    //Special case for 0d arrays
    var code =
      "function "+className+"(a,d) {\
this.data = a;\
this.offset = d\
};\
var proto="+className+".prototype;\
proto.dtype='"+dtype+"';\
proto.index=function(){return this.offset};\
proto.dimension=0;\
proto.size=1;\
proto.shape=\
proto.stride=\
proto.order=[];\
proto.lo=\
proto.hi=\
proto.transpose=\
proto.step=function "+className+"_copy() {\
return new "+className+"(this.data,this.offset)\
};\
proto.pick=function "+className+"_pick(){\
return TrivialArray(this.data);\
};\
proto.valueOf=proto.get=function "+className+"_get(){\
return "+(useGetters ? "this.data.get(this.offset)" : "this.data[this.offset]")+
"};\
proto.set=function "+className+"_set(v){\
return "+(useGetters ? "this.data.set(this.offset,v)" : "this.data[this.offset]=v")+"\
};\
return function construct_"+className+"(a,b,c,d){return new "+className+"(a,d)}"
    var procedure = new Function("TrivialArray", code)
    return procedure(CACHED_CONSTRUCTORS[dtype][0])
  }

  var code = ["'use strict'"]

  //Create constructor for view
  var indices = iota(dimension)
  var args = indices.map(function(i) { return "i"+i })
  var index_str = "this.offset+" + indices.map(function(i) {
        return "this.stride[" + i + "]*i" + i
      }).join("+")
  var shapeArg = indices.map(function(i) {
      return "b"+i
    }).join(",")
  var strideArg = indices.map(function(i) {
      return "c"+i
    }).join(",")
  code.push(
    "function "+className+"(a," + shapeArg + "," + strideArg + ",d){this.data=a",
      "this.shape=[" + shapeArg + "]",
      "this.stride=[" + strideArg + "]",
      "this.offset=d|0}",
    "var proto="+className+".prototype",
    "proto.dtype='"+dtype+"'",
    "proto.dimension="+dimension)

  //view.size:
  code.push("Object.defineProperty(proto,'size',{get:function "+className+"_size(){\
return "+indices.map(function(i) { return "this.shape["+i+"]" }).join("*"),
"}})")

  //view.order:
  if(dimension === 1) {
    code.push("proto.order=[0]")
  } else {
    code.push("Object.defineProperty(proto,'order',{get:")
    if(dimension < 4) {
      code.push("function "+className+"_order(){")
      if(dimension === 2) {
        code.push("return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})")
      } else if(dimension === 3) {
        code.push(
"var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\
if(s0>s1){\
if(s1>s2){\
return [2,1,0];\
}else if(s0>s2){\
return [1,2,0];\
}else{\
return [1,0,2];\
}\
}else if(s0>s2){\
return [2,0,1];\
}else if(s2>s1){\
return [0,1,2];\
}else{\
return [0,2,1];\
}}})")
      }
    } else {
      code.push("ORDER})")
    }
  }

  //view.set(i0, ..., v):
  code.push(
"proto.set=function "+className+"_set("+args.join(",")+",v){")
  if(useGetters) {
    code.push("return this.data.set("+index_str+",v)}")
  } else {
    code.push("return this.data["+index_str+"]=v}")
  }

  //view.get(i0, ...):
  code.push("proto.get=function "+className+"_get("+args.join(",")+"){")
  if(useGetters) {
    code.push("return this.data.get("+index_str+")}")
  } else {
    code.push("return this.data["+index_str+"]}")
  }

  //view.index:
  code.push(
    "proto.index=function "+className+"_index(", args.join(), "){return "+index_str+"}")

  //view.hi():
  code.push("proto.hi=function "+className+"_hi("+args.join(",")+"){return new "+className+"(this.data,"+
    indices.map(function(i) {
      return ["(typeof i",i,"!=='number'||i",i,"<0)?this.shape[", i, "]:i", i,"|0"].join("")
    }).join(",")+","+
    indices.map(function(i) {
      return "this.stride["+i + "]"
    }).join(",")+",this.offset)}")

  //view.lo():
  var a_vars = indices.map(function(i) { return "a"+i+"=this.shape["+i+"]" })
  var c_vars = indices.map(function(i) { return "c"+i+"=this.stride["+i+"]" })
  code.push("proto.lo=function "+className+"_lo("+args.join(",")+"){var b=this.offset,d=0,"+a_vars.join(",")+","+c_vars.join(","))
  for(var i=0; i<dimension; ++i) {
    code.push(
"if(typeof i"+i+"==='number'&&i"+i+">=0){\
d=i"+i+"|0;\
b+=c"+i+"*d;\
a"+i+"-=d}")
  }
  code.push("return new "+className+"(this.data,"+
    indices.map(function(i) {
      return "a"+i
    }).join(",")+","+
    indices.map(function(i) {
      return "c"+i
    }).join(",")+",b)}")

  //view.step():
  code.push("proto.step=function "+className+"_step("+args.join(",")+"){var "+
    indices.map(function(i) {
      return "a"+i+"=this.shape["+i+"]"
    }).join(",")+","+
    indices.map(function(i) {
      return "b"+i+"=this.stride["+i+"]"
    }).join(",")+",c=this.offset,d=0,ceil=Math.ceil")
  for(var i=0; i<dimension; ++i) {
    code.push(
"if(typeof i"+i+"==='number'){\
d=i"+i+"|0;\
if(d<0){\
c+=b"+i+"*(a"+i+"-1);\
a"+i+"=ceil(-a"+i+"/d)\
}else{\
a"+i+"=ceil(a"+i+"/d)\
}\
b"+i+"*=d\
}")
  }
  code.push("return new "+className+"(this.data,"+
    indices.map(function(i) {
      return "a" + i
    }).join(",")+","+
    indices.map(function(i) {
      return "b" + i
    }).join(",")+",c)}")

  //view.transpose():
  var tShape = new Array(dimension)
  var tStride = new Array(dimension)
  for(var i=0; i<dimension; ++i) {
    tShape[i] = "a[i"+i+"]"
    tStride[i] = "b[i"+i+"]"
  }
  code.push("proto.transpose=function "+className+"_transpose("+args+"){"+
    args.map(function(n,idx) { return n + "=(" + n + "===undefined?" + idx + ":" + n + "|0)"}).join(";"),
    "var a=this.shape,b=this.stride;return new "+className+"(this.data,"+tShape.join(",")+","+tStride.join(",")+",this.offset)}")

  //view.pick():
  code.push("proto.pick=function "+className+"_pick("+args+"){var a=[],b=[],c=this.offset")
  for(var i=0; i<dimension; ++i) {
    code.push("if(typeof i"+i+"==='number'&&i"+i+">=0){c=(c+this.stride["+i+"]*i"+i+")|0}else{a.push(this.shape["+i+"]);b.push(this.stride["+i+"])}")
  }
  code.push("var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}")

  //Add return statement
  code.push("return function construct_"+className+"(data,shape,stride,offset){return new "+className+"(data,"+
    indices.map(function(i) {
      return "shape["+i+"]"
    }).join(",")+","+
    indices.map(function(i) {
      return "stride["+i+"]"
    }).join(",")+",offset)}")

  //Compile procedure
  var procedure = new Function("CTOR_LIST", "ORDER", code.join("\n"))
  return procedure(CACHED_CONSTRUCTORS[dtype], order)
}

function arrayDType(data) {
  if(isBuffer(data)) {
    return "buffer"
  }
  if(hasTypedArrays) {
    switch(Object.prototype.toString.call(data)) {
      case "[object Float64Array]":
        return "float64"
      case "[object Float32Array]":
        return "float32"
      case "[object Int8Array]":
        return "int8"
      case "[object Int16Array]":
        return "int16"
      case "[object Int32Array]":
        return "int32"
      case "[object Uint8Array]":
        return "uint8"
      case "[object Uint16Array]":
        return "uint16"
      case "[object Uint32Array]":
        return "uint32"
      case "[object Uint8ClampedArray]":
        return "uint8_clamped"
    }
  }
  if(Array.isArray(data)) {
    return "array"
  }
  return "generic"
}

var CACHED_CONSTRUCTORS = {
  "float32":[],
  "float64":[],
  "int8":[],
  "int16":[],
  "int32":[],
  "uint8":[],
  "uint16":[],
  "uint32":[],
  "array":[],
  "uint8_clamped":[],
  "buffer":[],
  "generic":[]
}

;(function() {
  for(var id in CACHED_CONSTRUCTORS) {
    CACHED_CONSTRUCTORS[id].push(compileConstructor(id, -1))
  }
});

function wrappedNDArrayCtor(data, shape, stride, offset) {
  if(data === undefined) {
    var ctor = CACHED_CONSTRUCTORS.array[0]
    return ctor([])
  } else if(typeof data === "number") {
    data = [data]
  }
  if(shape === undefined) {
    shape = [ data.length ]
  }
  var d = shape.length
  if(stride === undefined) {
    stride = new Array(d)
    for(var i=d-1, sz=1; i>=0; --i) {
      stride[i] = sz
      sz *= shape[i]
    }
  }
  if(offset === undefined) {
    offset = 0
    for(var i=0; i<d; ++i) {
      if(stride[i] < 0) {
        offset -= (shape[i]-1)*stride[i]
      }
    }
  }
  var dtype = arrayDType(data)
  var ctor_list = CACHED_CONSTRUCTORS[dtype]
  while(ctor_list.length <= d+1) {
    ctor_list.push(compileConstructor(dtype, ctor_list.length-1))
  }
  var ctor = ctor_list[d+1]
  return ctor(data, shape, stride, offset)
}

module.exports = wrappedNDArrayCtor

},{"iota-array":35,"is-buffer":36}],38:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))

},{"_process":40}],39:[function(require,module,exports){
(function (process){
// Generated by CoffeeScript 1.7.1
(function() {
  var getNanoSeconds, hrtime, loadTime;

  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
    module.exports = function() {
      return performance.now();
    };
  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
    module.exports = function() {
      return (getNanoSeconds() - loadTime) / 1e6;
    };
    hrtime = process.hrtime;
    getNanoSeconds = function() {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };
    loadTime = getNanoSeconds();
  } else if (Date.now) {
    module.exports = function() {
      return Date.now() - loadTime;
    };
    loadTime = Date.now();
  } else {
    module.exports = function() {
      return new Date().getTime() - loadTime;
    };
    loadTime = new Date().getTime();
  }

}).call(this);

}).call(this,require('_process'))

},{"_process":40}],40:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],41:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],42:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":41,"_process":40,"inherits":34}],43:[function(require,module,exports){
(function (process,global){
"use strict";

if (!process.browser)
    global.Shade = require("shade.js");
else
    window.Shade = require("shade.js");

exports.Node = require("./graph/node");
exports.Operator = require("./operator/operator");
exports.RenameOperator = require("./operator/rename");
exports.FilterOperator = require("./operator/filter");
exports.Buffer = require("./field/buffer_accessor");
exports.Types = require("./field/types");
exports.ComputeRequest = require("./execution/compute_request");

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./execution/compute_request":8,"./field/buffer_accessor":11,"./field/types":12,"./graph/node":13,"./operator/filter":15,"./operator/operator":16,"./operator/rename":17,"_process":40,"shade.js":44}],44:[function(require,module,exports){
module.exports = require('./src/index.js');

},{"./src/index.js":183}],45:[function(require,module,exports){
(function (process,__filename){
/** vim: et:ts=4:sw=4:sts=4
 * @license amdefine 1.0.0 Copyright (c) 2011-2015, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/amdefine for details
 */

/*jslint node: true */
/*global module, process */
'use strict';

/**
 * Creates a define for node.
 * @param {Object} module the "module" object that is defined by Node for the
 * current module.
 * @param {Function} [requireFn]. Node's require function for the current module.
 * It only needs to be passed in Node versions before 0.5, when module.require
 * did not exist.
 * @returns {Function} a define function that is usable for the current node
 * module.
 */
function amdefine(module, requireFn) {
    'use strict';
    var defineCache = {},
        loaderCache = {},
        alreadyCalled = false,
        path = require('path'),
        makeRequire, stringRequire;

    /**
     * Trims the . and .. from an array of path segments.
     * It will keep a leading path segment if a .. will become
     * the first path segment, to help with module name lookups,
     * which act like paths, but can be remapped. But the end result,
     * all paths that use this function should look normalized.
     * NOTE: this method MODIFIES the input array.
     * @param {Array} ary the array of path segments.
     */
    function trimDots(ary) {
        var i, part;
        for (i = 0; ary[i]; i+= 1) {
            part = ary[i];
            if (part === '.') {
                ary.splice(i, 1);
                i -= 1;
            } else if (part === '..') {
                if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {
                    //End of the line. Keep at least one non-dot
                    //path segment at the front so it can be mapped
                    //correctly to disk. Otherwise, there is likely
                    //no path mapping for a path starting with '..'.
                    //This can still fail, but catches the most reasonable
                    //uses of ..
                    break;
                } else if (i > 0) {
                    ary.splice(i - 1, 2);
                    i -= 2;
                }
            }
        }
    }

    function normalize(name, baseName) {
        var baseParts;

        //Adjust any relative paths.
        if (name && name.charAt(0) === '.') {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                baseParts = baseName.split('/');
                baseParts = baseParts.slice(0, baseParts.length - 1);
                baseParts = baseParts.concat(name.split('/'));
                trimDots(baseParts);
                name = baseParts.join('/');
            }
        }

        return name;
    }

    /**
     * Create the normalize() function passed to a loader plugin's
     * normalize method.
     */
    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(id) {
        function load(value) {
            loaderCache[id] = value;
        }

        load.fromText = function (id, text) {
            //This one is difficult because the text can/probably uses
            //define, and any relative paths and requires should be relative
            //to that id was it would be found on disk. But this would require
            //bootstrapping a module/require fairly deeply from node core.
            //Not sure how best to go about that yet.
            throw new Error('amdefine does not implement load.fromText');
        };

        return load;
    }

    makeRequire = function (systemRequire, exports, module, relId) {
        function amdRequire(deps, callback) {
            if (typeof deps === 'string') {
                //Synchronous, single module require('')
                return stringRequire(systemRequire, exports, module, deps, relId);
            } else {
                //Array of dependencies with a callback.

                //Convert the dependencies to modules.
                deps = deps.map(function (depName) {
                    return stringRequire(systemRequire, exports, module, depName, relId);
                });

                //Wait for next tick to call back the require call.
                if (callback) {
                    process.nextTick(function () {
                        callback.apply(null, deps);
                    });
                }
            }
        }

        amdRequire.toUrl = function (filePath) {
            if (filePath.indexOf('.') === 0) {
                return normalize(filePath, path.dirname(module.filename));
            } else {
                return filePath;
            }
        };

        return amdRequire;
    };

    //Favor explicit value, passed in if the module wants to support Node 0.4.
    requireFn = requireFn || function req() {
        return module.require.apply(module, arguments);
    };

    function runFactory(id, deps, factory) {
        var r, e, m, result;

        if (id) {
            e = loaderCache[id] = {};
            m = {
                id: id,
                uri: __filename,
                exports: e
            };
            r = makeRequire(requireFn, e, m, id);
        } else {
            //Only support one define call per file
            if (alreadyCalled) {
                throw new Error('amdefine with no module ID cannot be called more than once per file.');
            }
            alreadyCalled = true;

            //Use the real variables from node
            //Use module.exports for exports, since
            //the exports in here is amdefine exports.
            e = module.exports;
            m = module;
            r = makeRequire(requireFn, e, m, module.id);
        }

        //If there are dependencies, they are strings, so need
        //to convert them to dependency values.
        if (deps) {
            deps = deps.map(function (depName) {
                return r(depName);
            });
        }

        //Call the factory with the right dependencies.
        if (typeof factory === 'function') {
            result = factory.apply(m.exports, deps);
        } else {
            result = factory;
        }

        if (result !== undefined) {
            m.exports = result;
            if (id) {
                loaderCache[id] = m.exports;
            }
        }
    }

    stringRequire = function (systemRequire, exports, module, id, relId) {
        //Split the ID by a ! so that
        var index = id.indexOf('!'),
            originalId = id,
            prefix, plugin;

        if (index === -1) {
            id = normalize(id, relId);

            //Straight module lookup. If it is one of the special dependencies,
            //deal with it, otherwise, delegate to node.
            if (id === 'require') {
                return makeRequire(systemRequire, exports, module, relId);
            } else if (id === 'exports') {
                return exports;
            } else if (id === 'module') {
                return module;
            } else if (loaderCache.hasOwnProperty(id)) {
                return loaderCache[id];
            } else if (defineCache[id]) {
                runFactory.apply(null, defineCache[id]);
                return loaderCache[id];
            } else {
                if(systemRequire) {
                    return systemRequire(originalId);
                } else {
                    throw new Error('No module with ID: ' + id);
                }
            }
        } else {
            //There is a plugin in play.
            prefix = id.substring(0, index);
            id = id.substring(index + 1, id.length);

            plugin = stringRequire(systemRequire, exports, module, prefix, relId);

            if (plugin.normalize) {
                id = plugin.normalize(id, makeNormalize(relId));
            } else {
                //Normalize the ID normally.
                id = normalize(id, relId);
            }

            if (loaderCache[id]) {
                return loaderCache[id];
            } else {
                plugin.load(id, makeRequire(systemRequire, exports, module, relId), makeLoad(id), {});

                return loaderCache[id];
            }
        }
    };

    //Create a define function specific to the module asking for amdefine.
    function define(id, deps, factory) {
        if (Array.isArray(id)) {
            factory = deps;
            deps = id;
            id = undefined;
        } else if (typeof id !== 'string') {
            factory = id;
            id = deps = undefined;
        }

        if (deps && !Array.isArray(deps)) {
            factory = deps;
            deps = undefined;
        }

        if (!deps) {
            deps = ['require', 'exports', 'module'];
        }

        //Set up properties for this module. If an ID, then use
        //internal cache. If no ID, then use the external variables
        //for this node module.
        if (id) {
            //Put the module in deep freeze until there is a
            //require call for it.
            defineCache[id] = [id, deps, factory];
        } else {
            runFactory(id, deps, factory);
        }
    }

    //define.require, which has access to all the values in the
    //cache. Useful for AMD modules that all have IDs in the file,
    //but need to finally export a value to node based on one of those
    //IDs.
    define.require = function (id) {
        if (loaderCache[id]) {
            return loaderCache[id];
        }

        if (defineCache[id]) {
            runFactory.apply(null, defineCache[id]);
            return loaderCache[id];
        }
    };

    define.amd = {};

    return define;
}

module.exports = amdefine;

}).call(this,require('_process'),"/../../shadejs/node_modules/amdefine/amdefine.js")

},{"_process":40,"path":38}],46:[function(require,module,exports){
module.exports = require('./lib');

},{"./lib":50}],47:[function(require,module,exports){

var walkes = require('walkes');
var worklist = require('../');
var Set = require('../set');

module.exports = availableExpressions;

/*
So here is the story:
Each node is supposed to have a `Set` of expressions. And for each expression,
I want to save the `Set` of contained variables for easier killing.

Since JS has no records yet (see http://wiki.ecmascript.org/doku.php?id=strawman:records )
and no concept of structural equality, an expression represented by an AST node
is *never ever* equal to an structurally equal expression unless its the
identical node.
The same goes for `Set`s. Since they are just shimmed using normal Objects, they
are *never ever* equal, although they contain the exact same members.

So as a workaround, I `JSON.stringify` the expression to save it in the Set and
use a mapping table to get to the expression object and the corresponding set of
variables.

Of course, I could just use a custom Set implementation which uses a custom
equality check function. But I want to be forward-compatible with the upcoming
ES6 standard, which should provide a O(1) Sets, instead of the O(n) shim.
*/

function availableExpressions(cfg) {
	var expressionMap = {};

	function findExpressions(ast) {
		var expressions = new Set();
		// FIXME: just handling binary expressions so far
		walkes(ast, {
			Identifier: function () {
				return new Set(this.name);
			},
			Literal: function () {
				return new Set();
			},
			BinaryExpression: function (recurse) {
				var stringified = JSON.stringify(this);
				expressions.add(stringified);
				if (stringified in expressionMap) {
					return expressionMap[stringified].variables;
				}
				var right = recurse(this.right);
				var left = recurse(this.left);
				var variables = Set.union(left, right);
				expressionMap[stringified] = {
					expression: this,
					variables: variables
				};
				return variables;
			}
		});
		return expressions;
	}

	// run the algorithm
	var output = worklist(cfg, function (input, list) {
		if (this.type || !this.astNode)
			return input;
		var kill = this.kill = this.kill || findAssignments(this.astNode);
		var generate = this.generate = this.generate || findExpressions(this.astNode);
		var killed = new Set(input.values().filter(function (expr) {
			var variables = expressionMap[expr].variables;
			return !Set.intersect(variables, kill).size;
		}));
		return Set.union(killed, generate);
	}, {direction: 'forward', merge: worklist.merge(Set.intersect)});

	// go over all the nodes and push down the real objects into the output
	cfg[2].forEach(function (node) {
		var out = output.get(node);
		output.set(node, new Set(out.values().map(function (expr) {
			return expressionMap[expr].expression;
		})));
	});

	return output;
}

function findAssignments(ast) {
	var variables = new Set();
	walkes(ast, {
		AssignmentExpression: function (recurse) {
			if (this.left.type === 'Identifier')
				variables.add(this.left.name);
			recurse(this.right);
		},
		VariableDeclarator: function (recurse) {
			variables.add(this.id.name);
			if (this.init)
				recurse(this.init);
		}
	});
	return variables;
}


},{"../":50,"../set":52,"walkes":95}],48:[function(require,module,exports){

exports.liveVariables = require('./livevariables');
exports.availableExpressions = require('./availableexpressions');


},{"./availableexpressions":47,"./livevariables":49}],49:[function(require,module,exports){

var walkes = require('walkes');
var worklist = require('../');
var Set = require('../set');

module.exports = liveVariables;

function liveVariables(cfg) {
	return worklist(cfg, function (input) {
		if (this.type || !this.astNode)
			return input;

		return Set.union(new Set([this], input));
	}, {direction: 'forward',         merge: worklist.merge(Set.intersect)});
}

function findAssignments(astNode) {
	var variables = new Set();
	walkes(astNode, {
		AssignmentExpression: function (recurse) {
			if (this.left.type === 'Identifier')
				variables.add(this.left.name);
			recurse(this.right);
		},
		FunctionDeclaration: function () {},
		FunctionExpression: function () {},
		VariableDeclarator: function (recurse) {
			variables.add(this.id.name);
			if (this.init)
				recurse(this.init);
		}
	});
	return variables;
}
function findVariables(astNode) {
	var variables = new Set();
	walkes(astNode, {
		AssignmentExpression: function (recurse) {
			if (this.left.type !== 'Identifier')
				recurse(this.left);
			recurse(this.right);
		},
		FunctionDeclaration: function () {},
		FunctionExpression: function () {},
		Identifier: function () {
			variables.add(this.name);
		},
		MemberExpression: function (recurse) {
			recurse(this.object);
		},
		Property: function (recurse) {
			recurse(this.value);
		},
		VariableDeclarator: function (recurse) {
			recurse(this.init);
		}
	});
	return variables;
}


},{"../":50,"../set":52,"walkes":95}],50:[function(require,module,exports){

var Queue = require('./queue');
var Set = require('./set');

var exports = module.exports = worklist;

// expose the utilities to have them tested separately
exports.Queue = Queue;
exports.Set = Set;
exports.examples = require('./examples');

/**
 * Implementation of a general worklist algorithm
 * `cfg` is a control flow graph created by `esgraph`,
 * `transferFunction` gets called with (this = node, input, worklist)
 * it operates on the input `Set` and can return an output set, in which case
 * the worklist algorithm automatically enqueues all the successor nodes, or it
 * might return an {output: output, enqueue: false} object in which case it is
 * itself responsible to enqueue the successor nodes.
 * `options` defines the `direction`, a `merge` function and an `equals`
 * function which merge the inputs to a node and determine if a node has changed
 * its output respectively.
 * Returns a `Map` from node -> output
 */
function worklist(cfg, transferFunction, options) {
	options = options || {};
	var direction = options.direction || 'forward';
	var merge = options.merge || worklist.merge(Set.union);
	var equals = options.equals || Set.equals;
	var list = new Queue();
	if (direction === 'forward') {
		list.push(cfg[0]);
		var predecessors = worklist.predecessors;
		var successors = worklist.successors;
	} else {
		list.push(cfg[1]);
		var predecessors = worklist.successors;
		var successors = worklist.predecessors;
	}
	var start = options.start || new Set();

	var output = new Map();
	while (list.length) {
		var node = list.shift();
		var pre = predecessors(node)
			.map(function (n) {return output.get(n);})
		var input = pre.length ? merge(pre) : start;
		var oldOutput = output.get(node);
		var out = transferFunction.call(node, input, list, oldOutput);
		if (!out || out instanceof Set)
			out = {output: out, enqueue: true};
		output.set(node, out.output);
		if (out.enqueue && (!oldOutput || !equals(out.output, oldOutput)))
			successors(node).forEach(function (aSuccessor) {	list.push(aSuccessor);	});
	}
	return output;
};

worklist.predecessors = function (node) {
	return node.prev;
};

worklist.successors = function (node) {
	return node.next;
};

worklist.merge = function (fn) {
	return function (inputs) {
		if (inputs.length == 1)
			return new Set(inputs[0]);
		return inputs.reduce(fn);
	};
};


},{"./examples":48,"./queue":51,"./set":52}],51:[function(require,module,exports){

module.exports = Queue;

/**
 * This is a really small priority queue that makes sure that duplicate elements
 * are being inserted at the end
 */
function Queue() {
	var q = [];
	q.__proto__ = Queue.prototype;
	return q;
}

Queue.prototype = Object.create(Array.prototype);
Queue.prototype.push = function Queue_push(elem) {
	var pos = this.indexOf(elem);
	if (pos != -1)
		this.splice(pos, 1);
	Array.prototype.push.call(this, elem);
};

},{}],52:[function(require,module,exports){

module.exports = Set;

/**
 * ES6 Sets in `node --harmony` do not provide `.values()` or `for of` iteration
 * yet, so they are pretty useless :-(
 * This Set also does not use `Object.is`; we do not care about NaN, -0, +0
 */
function Set(elements) {
	this._values = [];
	if (Array.isArray(elements))
		elements.forEach(this.add.bind(this));
	else if (elements instanceof Set)
		elements._values.forEach(this.add.bind(this));
}
Object.defineProperty(Set.prototype, 'size', {
	enumerable: false,
	configurable: false,
	get: function () {
		return this._values.length;
	}
});
Set.prototype._i = function Set__i(elem) {
	return this._values.indexOf(elem);
};
Set.prototype.add = function Set_add(elem) {
	if (!this.has(elem))
		this._values.push(elem);
};
Set.prototype.has = function Set_has(elem) {
	return !!~this._i(elem);
};
Set.prototype.delete = function Set_delete(elem) {
	var i = this._i(elem);
	if (!~i)
		return;
	this._values.splice(i, 1);
};
Set.prototype.values = function Set_values() {
	return [].concat(this._values);
};

// forward some convenience functions from Array.prototype
[
	'some',
	'map',
	'every',
	'filter',
	'forEach'
].forEach(function (method) {
	Set.prototype[method] = function () {
		return Array.prototype[method].apply(this._values, arguments);
	}
});

// some convenience functions
Set.prototype.first = function Set_first() {
	return this._values[0];
};
Set.intersect = function intersect(a, b) {
	if (!a && b)
		return new Set(b);
	if (!b && a)
		return new Set(a);
	var s = new Set();
	a.forEach(function (val) {
		if (b.has(val))
			s.add(val);
	});
	return s;
};
Set.union = function union(a, b) {
	if (!a && b)
		return new Set(b);
	var s = new Set(a);
	if (b)
		b.forEach(s.add.bind(s));
	return s;
};
Set.equals = function equals(a, b) {
	if (a.size != b.size)
		return false;
	return a.every(function (val) {
		return b.has(val);
	});
};
Set.minus = function minus(a, b) {
	var s = new Set(a);
	b.forEach(s.delete.bind(s));
	return s;
};


},{}],53:[function(require,module,exports){
(function (Buffer){
/*!
 * @description Recursive object extending
 * @author Viacheslav Lotsmanov <lotsmanov89@gmail.com>
 * @license MIT
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2013-2015 Viacheslav Lotsmanov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

'use strict';

function isSpecificValue(val) {
	return (
		val instanceof Buffer
		|| val instanceof Date
		|| val instanceof RegExp
	) ? true : false;
}

function cloneSpecificValue(val) {
	if (val instanceof Buffer) {
		var x = new Buffer(val.length);
		val.copy(x);
		return x;
	} else if (val instanceof Date) {
		return new Date(val.getTime());
	} else if (val instanceof RegExp) {
		return new RegExp(val);
	} else {
		throw new Error('Unexpected situation');
	}
}

/**
 * Recursive cloning array.
 */
function deepCloneArray(arr) {
	var clone = [];
	arr.forEach(function (item, index) {
		if (typeof item === 'object' && item !== null) {
			if (Array.isArray(item)) {
				clone[index] = deepCloneArray(item);
			} else if (isSpecificValue(item)) {
				clone[index] = cloneSpecificValue(item);
			} else {
				clone[index] = deepExtend({}, item);
			}
		} else {
			clone[index] = item;
		}
	});
	return clone;
}

/**
 * Extening object that entered in first argument.
 *
 * Returns extended object or false if have no target object or incorrect type.
 *
 * If you wish to clone source object (without modify it), just use empty new
 * object as first argument, like this:
 *   deepExtend({}, yourObj_1, [yourObj_N]);
 */
var deepExtend = module.exports = function (/*obj_1, [obj_2], [obj_N]*/) {
	if (arguments.length < 1 || typeof arguments[0] !== 'object') {
		return false;
	}

	if (arguments.length < 2) {
		return arguments[0];
	}

	var target = arguments[0];

	// convert arguments to array and cut off target object
	var args = Array.prototype.slice.call(arguments, 1);

	var val, src, clone;

	args.forEach(function (obj) {
		// skip argument if it is array or isn't object
		if (typeof obj !== 'object' || Array.isArray(obj)) {
			return;
		}

		Object.keys(obj).forEach(function (key) {
			src = target[key]; // source value
			val = obj[key]; // new value

			// recursion prevention
			if (val === target) {
				return;

			/**
			 * if new value isn't object then just overwrite by new value
			 * instead of extending.
			 */
			} else if (typeof val !== 'object' || val === null) {
				target[key] = val;
				return;

			// just clone arrays (and recursive clone objects inside)
			} else if (Array.isArray(val)) {
				target[key] = deepCloneArray(val);
				return;

			// custom cloning and overwrite for specific objects
			} else if (isSpecificValue(val)) {
				target[key] = cloneSpecificValue(val);
				return;

			// overwrite by new value if source isn't object or array
			} else if (typeof src !== 'object' || src === null || Array.isArray(src)) {
				target[key] = deepExtend({}, val);
				return;

			// source value and new value is objects both, extending...
			} else {
				target[key] = deepExtend(src, val);
				return;
			}
		});
	});

	return target;
}

}).call(this,require("buffer").Buffer)

},{"buffer":27}],54:[function(require,module,exports){
(function (global){
/*
  Copyright (C) 2012-2014 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2015 Ingvar Stepanyan <me@rreverser.com>
  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>
  Copyright (C) 2012-2013 Michael Ficarra <escodegen.copyright@michael.ficarra.me>
  Copyright (C) 2012-2013 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2013 Irakli Gozalishvili <rfobic@gmail.com>
  Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>
  Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>
  Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*global exports:true, require:true, global:true*/
(function () {
    'use strict';

    var Syntax,
        Precedence,
        BinaryPrecedence,
        SourceNode,
        estraverse,
        esutils,
        isArray,
        base,
        indent,
        json,
        renumber,
        hexadecimal,
        quotes,
        escapeless,
        newline,
        space,
        parentheses,
        semicolons,
        safeConcatenation,
        directive,
        extra,
        parse,
        sourceMap,
        sourceCode,
        preserveBlankLines,
        FORMAT_MINIFY,
        FORMAT_DEFAULTS;

    estraverse = require('estraverse');
    esutils = require('esutils');

    Syntax = estraverse.Syntax;

    // Generation is done by generateExpression.
    function isExpression(node) {
        return CodeGenerator.Expression.hasOwnProperty(node.type);
    }

    // Generation is done by generateStatement.
    function isStatement(node) {
        return CodeGenerator.Statement.hasOwnProperty(node.type);
    }

    Precedence = {
        Sequence: 0,
        Yield: 1,
        Await: 1,
        Assignment: 1,
        Conditional: 2,
        ArrowFunction: 2,
        LogicalOR: 3,
        LogicalAND: 4,
        BitwiseOR: 5,
        BitwiseXOR: 6,
        BitwiseAND: 7,
        Equality: 8,
        Relational: 9,
        BitwiseSHIFT: 10,
        Additive: 11,
        Multiplicative: 12,
        Unary: 13,
        Postfix: 14,
        Call: 15,
        New: 16,
        TaggedTemplate: 17,
        Member: 18,
        Primary: 19
    };

    BinaryPrecedence = {
        '||': Precedence.LogicalOR,
        '&&': Precedence.LogicalAND,
        '|': Precedence.BitwiseOR,
        '^': Precedence.BitwiseXOR,
        '&': Precedence.BitwiseAND,
        '==': Precedence.Equality,
        '!=': Precedence.Equality,
        '===': Precedence.Equality,
        '!==': Precedence.Equality,
        'is': Precedence.Equality,
        'isnt': Precedence.Equality,
        '<': Precedence.Relational,
        '>': Precedence.Relational,
        '<=': Precedence.Relational,
        '>=': Precedence.Relational,
        'in': Precedence.Relational,
        'instanceof': Precedence.Relational,
        '<<': Precedence.BitwiseSHIFT,
        '>>': Precedence.BitwiseSHIFT,
        '>>>': Precedence.BitwiseSHIFT,
        '+': Precedence.Additive,
        '-': Precedence.Additive,
        '*': Precedence.Multiplicative,
        '%': Precedence.Multiplicative,
        '/': Precedence.Multiplicative
    };

    //Flags
    var F_ALLOW_IN = 1,
        F_ALLOW_CALL = 1 << 1,
        F_ALLOW_UNPARATH_NEW = 1 << 2,
        F_FUNC_BODY = 1 << 3,
        F_DIRECTIVE_CTX = 1 << 4,
        F_SEMICOLON_OPT = 1 << 5;

    //Expression flag sets
    //NOTE: Flag order:
    // F_ALLOW_IN
    // F_ALLOW_CALL
    // F_ALLOW_UNPARATH_NEW
    var E_FTT = F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW,
        E_TTF = F_ALLOW_IN | F_ALLOW_CALL,
        E_TTT = F_ALLOW_IN | F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW,
        E_TFF = F_ALLOW_IN,
        E_FFT = F_ALLOW_UNPARATH_NEW,
        E_TFT = F_ALLOW_IN | F_ALLOW_UNPARATH_NEW;

    //Statement flag sets
    //NOTE: Flag order:
    // F_ALLOW_IN
    // F_FUNC_BODY
    // F_DIRECTIVE_CTX
    // F_SEMICOLON_OPT
    var S_TFFF = F_ALLOW_IN,
        S_TFFT = F_ALLOW_IN | F_SEMICOLON_OPT,
        S_FFFF = 0x00,
        S_TFTF = F_ALLOW_IN | F_DIRECTIVE_CTX,
        S_TTFF = F_ALLOW_IN | F_FUNC_BODY;

    function getDefaultOptions() {
        // default options
        return {
            indent: null,
            base: null,
            parse: null,
            comment: false,
            format: {
                indent: {
                    style: '    ',
                    base: 0,
                    adjustMultilineComment: false
                },
                newline: '\n',
                space: ' ',
                json: false,
                renumber: false,
                hexadecimal: false,
                quotes: 'single',
                escapeless: false,
                compact: false,
                parentheses: true,
                semicolons: true,
                safeConcatenation: false,
                preserveBlankLines: false
            },
            moz: {
                comprehensionExpressionStartsWithAssignment: false,
                starlessGenerator: false
            },
            sourceMap: null,
            sourceMapRoot: null,
            sourceMapWithCode: false,
            directive: false,
            raw: true,
            verbatim: null,
            sourceCode: null
        };
    }

    function stringRepeat(str, num) {
        var result = '';

        for (num |= 0; num > 0; num >>>= 1, str += str) {
            if (num & 1) {
                result += str;
            }
        }

        return result;
    }

    isArray = Array.isArray;
    if (!isArray) {
        isArray = function isArray(array) {
            return Object.prototype.toString.call(array) === '[object Array]';
        };
    }

    function hasLineTerminator(str) {
        return (/[\r\n]/g).test(str);
    }

    function endsWithLineTerminator(str) {
        var len = str.length;
        return len && esutils.code.isLineTerminator(str.charCodeAt(len - 1));
    }

    function merge(target, override) {
        var key;
        for (key in override) {
            if (override.hasOwnProperty(key)) {
                target[key] = override[key];
            }
        }
        return target;
    }

    function updateDeeply(target, override) {
        var key, val;

        function isHashObject(target) {
            return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);
        }

        for (key in override) {
            if (override.hasOwnProperty(key)) {
                val = override[key];
                if (isHashObject(val)) {
                    if (isHashObject(target[key])) {
                        updateDeeply(target[key], val);
                    } else {
                        target[key] = updateDeeply({}, val);
                    }
                } else {
                    target[key] = val;
                }
            }
        }
        return target;
    }

    function generateNumber(value) {
        var result, point, temp, exponent, pos;

        if (value !== value) {
            throw new Error('Numeric literal whose value is NaN');
        }
        if (value < 0 || (value === 0 && 1 / value < 0)) {
            throw new Error('Numeric literal whose value is negative');
        }

        if (value === 1 / 0) {
            return json ? 'null' : renumber ? '1e400' : '1e+400';
        }

        result = '' + value;
        if (!renumber || result.length < 3) {
            return result;
        }

        point = result.indexOf('.');
        if (!json && result.charCodeAt(0) === 0x30  /* 0 */ && point === 1) {
            point = 0;
            result = result.slice(1);
        }
        temp = result;
        result = result.replace('e+', 'e');
        exponent = 0;
        if ((pos = temp.indexOf('e')) > 0) {
            exponent = +temp.slice(pos + 1);
            temp = temp.slice(0, pos);
        }
        if (point >= 0) {
            exponent -= temp.length - point - 1;
            temp = +(temp.slice(0, point) + temp.slice(point + 1)) + '';
        }
        pos = 0;
        while (temp.charCodeAt(temp.length + pos - 1) === 0x30  /* 0 */) {
            --pos;
        }
        if (pos !== 0) {
            exponent -= pos;
            temp = temp.slice(0, pos);
        }
        if (exponent !== 0) {
            temp += 'e' + exponent;
        }
        if ((temp.length < result.length ||
                    (hexadecimal && value > 1e12 && Math.floor(value) === value && (temp = '0x' + value.toString(16)).length < result.length)) &&
                +temp === value) {
            result = temp;
        }

        return result;
    }

    // Generate valid RegExp expression.
    // This function is based on https://github.com/Constellation/iv Engine

    function escapeRegExpCharacter(ch, previousIsBackslash) {
        // not handling '\' and handling \u2028 or \u2029 to unicode escape sequence
        if ((ch & ~1) === 0x2028) {
            return (previousIsBackslash ? 'u' : '\\u') + ((ch === 0x2028) ? '2028' : '2029');
        } else if (ch === 10 || ch === 13) {  // \n, \r
            return (previousIsBackslash ? '' : '\\') + ((ch === 10) ? 'n' : 'r');
        }
        return String.fromCharCode(ch);
    }

    function generateRegExp(reg) {
        var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;

        result = reg.toString();

        if (reg.source) {
            // extract flag from toString result
            match = result.match(/\/([^/]*)$/);
            if (!match) {
                return result;
            }

            flags = match[1];
            result = '';

            characterInBrack = false;
            previousIsBackslash = false;
            for (i = 0, iz = reg.source.length; i < iz; ++i) {
                ch = reg.source.charCodeAt(i);

                if (!previousIsBackslash) {
                    if (characterInBrack) {
                        if (ch === 93) {  // ]
                            characterInBrack = false;
                        }
                    } else {
                        if (ch === 47) {  // /
                            result += '\\';
                        } else if (ch === 91) {  // [
                            characterInBrack = true;
                        }
                    }
                    result += escapeRegExpCharacter(ch, previousIsBackslash);
                    previousIsBackslash = ch === 92;  // \
                } else {
                    // if new RegExp("\\\n') is provided, create /\n/
                    result += escapeRegExpCharacter(ch, previousIsBackslash);
                    // prevent like /\\[/]/
                    previousIsBackslash = false;
                }
            }

            return '/' + result + '/' + flags;
        }

        return result;
    }

    function escapeAllowedCharacter(code, next) {
        var hex;

        if (code === 0x08  /* \b */) {
            return '\\b';
        }

        if (code === 0x0C  /* \f */) {
            return '\\f';
        }

        if (code === 0x09  /* \t */) {
            return '\\t';
        }

        hex = code.toString(16).toUpperCase();
        if (json || code > 0xFF) {
            return '\\u' + '0000'.slice(hex.length) + hex;
        } else if (code === 0x0000 && !esutils.code.isDecimalDigit(next)) {
            return '\\0';
        } else if (code === 0x000B  /* \v */) { // '\v'
            return '\\x0B';
        } else {
            return '\\x' + '00'.slice(hex.length) + hex;
        }
    }

    function escapeDisallowedCharacter(code) {
        if (code === 0x5C  /* \ */) {
            return '\\\\';
        }

        if (code === 0x0A  /* \n */) {
            return '\\n';
        }

        if (code === 0x0D  /* \r */) {
            return '\\r';
        }

        if (code === 0x2028) {
            return '\\u2028';
        }

        if (code === 0x2029) {
            return '\\u2029';
        }

        throw new Error('Incorrectly classified character');
    }

    function escapeDirective(str) {
        var i, iz, code, quote;

        quote = quotes === 'double' ? '"' : '\'';
        for (i = 0, iz = str.length; i < iz; ++i) {
            code = str.charCodeAt(i);
            if (code === 0x27  /* ' */) {
                quote = '"';
                break;
            } else if (code === 0x22  /* " */) {
                quote = '\'';
                break;
            } else if (code === 0x5C  /* \ */) {
                ++i;
            }
        }

        return quote + str + quote;
    }

    function escapeString(str) {
        var result = '', i, len, code, singleQuotes = 0, doubleQuotes = 0, single, quote;

        for (i = 0, len = str.length; i < len; ++i) {
            code = str.charCodeAt(i);
            if (code === 0x27  /* ' */) {
                ++singleQuotes;
            } else if (code === 0x22  /* " */) {
                ++doubleQuotes;
            } else if (code === 0x2F  /* / */ && json) {
                result += '\\';
            } else if (esutils.code.isLineTerminator(code) || code === 0x5C  /* \ */) {
                result += escapeDisallowedCharacter(code);
                continue;
            } else if ((json && code < 0x20  /* SP */) || !(json || escapeless || (code >= 0x20  /* SP */ && code <= 0x7E  /* ~ */))) {
                result += escapeAllowedCharacter(code, str.charCodeAt(i + 1));
                continue;
            }
            result += String.fromCharCode(code);
        }

        single = !(quotes === 'double' || (quotes === 'auto' && doubleQuotes < singleQuotes));
        quote = single ? '\'' : '"';

        if (!(single ? singleQuotes : doubleQuotes)) {
            return quote + result + quote;
        }

        str = result;
        result = quote;

        for (i = 0, len = str.length; i < len; ++i) {
            code = str.charCodeAt(i);
            if ((code === 0x27  /* ' */ && single) || (code === 0x22  /* " */ && !single)) {
                result += '\\';
            }
            result += String.fromCharCode(code);
        }

        return result + quote;
    }

    /**
     * flatten an array to a string, where the array can contain
     * either strings or nested arrays
     */
    function flattenToString(arr) {
        var i, iz, elem, result = '';
        for (i = 0, iz = arr.length; i < iz; ++i) {
            elem = arr[i];
            result += isArray(elem) ? flattenToString(elem) : elem;
        }
        return result;
    }

    /**
     * convert generated to a SourceNode when source maps are enabled.
     */
    function toSourceNodeWhenNeeded(generated, node) {
        if (!sourceMap) {
            // with no source maps, generated is either an
            // array or a string.  if an array, flatten it.
            // if a string, just return it
            if (isArray(generated)) {
                return flattenToString(generated);
            } else {
                return generated;
            }
        }
        if (node == null) {
            if (generated instanceof SourceNode) {
                return generated;
            } else {
                node = {};
            }
        }
        if (node.loc == null) {
            return new SourceNode(null, null, sourceMap, generated, node.name || null);
        }
        return new SourceNode(node.loc.start.line, node.loc.start.column, (sourceMap === true ? node.loc.source || null : sourceMap), generated, node.name || null);
    }

    function noEmptySpace() {
        return (space) ? space : ' ';
    }

    function join(left, right) {
        var leftSource,
            rightSource,
            leftCharCode,
            rightCharCode;

        leftSource = toSourceNodeWhenNeeded(left).toString();
        if (leftSource.length === 0) {
            return [right];
        }

        rightSource = toSourceNodeWhenNeeded(right).toString();
        if (rightSource.length === 0) {
            return [left];
        }

        leftCharCode = leftSource.charCodeAt(leftSource.length - 1);
        rightCharCode = rightSource.charCodeAt(0);

        if ((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode ||
            esutils.code.isIdentifierPart(leftCharCode) && esutils.code.isIdentifierPart(rightCharCode) ||
            leftCharCode === 0x2F  /* / */ && rightCharCode === 0x69  /* i */) { // infix word operators all start with `i`
            return [left, noEmptySpace(), right];
        } else if (esutils.code.isWhiteSpace(leftCharCode) || esutils.code.isLineTerminator(leftCharCode) ||
                esutils.code.isWhiteSpace(rightCharCode) || esutils.code.isLineTerminator(rightCharCode)) {
            return [left, right];
        }
        return [left, space, right];
    }

    function addIndent(stmt) {
        return [base, stmt];
    }

    function withIndent(fn) {
        var previousBase;
        previousBase = base;
        base += indent;
        fn(base);
        base = previousBase;
    }

    function calculateSpaces(str) {
        var i;
        for (i = str.length - 1; i >= 0; --i) {
            if (esutils.code.isLineTerminator(str.charCodeAt(i))) {
                break;
            }
        }
        return (str.length - 1) - i;
    }

    function adjustMultilineComment(value, specialBase) {
        var array, i, len, line, j, spaces, previousBase, sn;

        array = value.split(/\r\n|[\r\n]/);
        spaces = Number.MAX_VALUE;

        // first line doesn't have indentation
        for (i = 1, len = array.length; i < len; ++i) {
            line = array[i];
            j = 0;
            while (j < line.length && esutils.code.isWhiteSpace(line.charCodeAt(j))) {
                ++j;
            }
            if (spaces > j) {
                spaces = j;
            }
        }

        if (typeof specialBase !== 'undefined') {
            // pattern like
            // {
            //   var t = 20;  /*
            //                 * this is comment
            //                 */
            // }
            previousBase = base;
            if (array[1][spaces] === '*') {
                specialBase += ' ';
            }
            base = specialBase;
        } else {
            if (spaces & 1) {
                // /*
                //  *
                //  */
                // If spaces are odd number, above pattern is considered.
                // We waste 1 space.
                --spaces;
            }
            previousBase = base;
        }

        for (i = 1, len = array.length; i < len; ++i) {
            sn = toSourceNodeWhenNeeded(addIndent(array[i].slice(spaces)));
            array[i] = sourceMap ? sn.join('') : sn;
        }

        base = previousBase;

        return array.join('\n');
    }

    function generateComment(comment, specialBase) {
        if (comment.type === 'Line') {
            if (endsWithLineTerminator(comment.value)) {
                return '//' + comment.value;
            } else {
                // Always use LineTerminator
                var result = '//' + comment.value;
                if (!preserveBlankLines) {
                    result += '\n';
                }
                return result;
            }
        }
        if (extra.format.indent.adjustMultilineComment && /[\n\r]/.test(comment.value)) {
            return adjustMultilineComment('/*' + comment.value + '*/', specialBase);
        }
        return '/*' + comment.value + '*/';
    }

    function addComments(stmt, result) {
        var i, len, comment, save, tailingToStatement, specialBase, fragment,
            extRange, range, prevRange, prefix, infix, suffix, count;

        if (stmt.leadingComments && stmt.leadingComments.length > 0) {
            save = result;

            if (preserveBlankLines) {
                comment = stmt.leadingComments[0];
                result = [];

                extRange = comment.extendedRange;
                range = comment.range;

                prefix = sourceCode.substring(extRange[0], range[0]);
                count = (prefix.match(/\n/g) || []).length;
                if (count > 0) {
                    result.push(stringRepeat('\n', count));
                    result.push(addIndent(generateComment(comment)));
                } else {
                    result.push(prefix);
                    result.push(generateComment(comment));
                }

                prevRange = range;

                for (i = 1, len = stmt.leadingComments.length; i < len; i++) {
                    comment = stmt.leadingComments[i];
                    range = comment.range;

                    infix = sourceCode.substring(prevRange[1], range[0]);
                    count = (infix.match(/\n/g) || []).length;
                    result.push(stringRepeat('\n', count));
                    result.push(addIndent(generateComment(comment)));

                    prevRange = range;
                }

                suffix = sourceCode.substring(range[1], extRange[1]);
                count = (suffix.match(/\n/g) || []).length;
                result.push(stringRepeat('\n', count));
            } else {
                comment = stmt.leadingComments[0];
                result = [];
                if (safeConcatenation && stmt.type === Syntax.Program && stmt.body.length === 0) {
                    result.push('\n');
                }
                result.push(generateComment(comment));
                if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                    result.push('\n');
                }

                for (i = 1, len = stmt.leadingComments.length; i < len; ++i) {
                    comment = stmt.leadingComments[i];
                    fragment = [generateComment(comment)];
                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                        fragment.push('\n');
                    }
                    result.push(addIndent(fragment));
                }
            }

            result.push(addIndent(save));
        }

        if (stmt.trailingComments) {

            if (preserveBlankLines) {
                comment = stmt.trailingComments[0];
                extRange = comment.extendedRange;
                range = comment.range;

                prefix = sourceCode.substring(extRange[0], range[0]);
                count = (prefix.match(/\n/g) || []).length;

                if (count > 0) {
                    result.push(stringRepeat('\n', count));
                    result.push(addIndent(generateComment(comment)));
                } else {
                    result.push(prefix);
                    result.push(generateComment(comment));
                }
            } else {
                tailingToStatement = !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());
                specialBase = stringRepeat(' ', calculateSpaces(toSourceNodeWhenNeeded([base, result, indent]).toString()));
                for (i = 0, len = stmt.trailingComments.length; i < len; ++i) {
                    comment = stmt.trailingComments[i];
                    if (tailingToStatement) {
                        // We assume target like following script
                        //
                        // var t = 20;  /**
                        //               * This is comment of t
                        //               */
                        if (i === 0) {
                            // first case
                            result = [result, indent];
                        } else {
                            result = [result, specialBase];
                        }
                        result.push(generateComment(comment, specialBase));
                    } else {
                        result = [result, addIndent(generateComment(comment))];
                    }
                    if (i !== len - 1 && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                        result = [result, '\n'];
                    }
                }
            }
        }

        return result;
    }

    function generateBlankLines(start, end, result) {
        var j, newlineCount = 0;

        for (j = start; j < end; j++) {
            if (sourceCode[j] === '\n') {
                newlineCount++;
            }
        }

        for (j = 1; j < newlineCount; j++) {
            result.push(newline);
        }
    }

    function parenthesize(text, current, should) {
        if (current < should) {
            return ['(', text, ')'];
        }
        return text;
    }

    function generateVerbatimString(string) {
        var i, iz, result;
        result = string.split(/\r\n|\n/);
        for (i = 1, iz = result.length; i < iz; i++) {
            result[i] = newline + base + result[i];
        }
        return result;
    }

    function generateVerbatim(expr, precedence) {
        var verbatim, result, prec;
        verbatim = expr[extra.verbatim];

        if (typeof verbatim === 'string') {
            result = parenthesize(generateVerbatimString(verbatim), Precedence.Sequence, precedence);
        } else {
            // verbatim is object
            result = generateVerbatimString(verbatim.content);
            prec = (verbatim.precedence != null) ? verbatim.precedence : Precedence.Sequence;
            result = parenthesize(result, prec, precedence);
        }

        return toSourceNodeWhenNeeded(result, expr);
    }

    function CodeGenerator() {
    }

    // Helpers.

    CodeGenerator.prototype.maybeBlock = function(stmt, flags) {
        var result, noLeadingComment, that = this;

        noLeadingComment = !extra.comment || !stmt.leadingComments;

        if (stmt.type === Syntax.BlockStatement && noLeadingComment) {
            return [space, this.generateStatement(stmt, flags)];
        }

        if (stmt.type === Syntax.EmptyStatement && noLeadingComment) {
            return ';';
        }

        withIndent(function () {
            result = [
                newline,
                addIndent(that.generateStatement(stmt, flags))
            ];
        });

        return result;
    };

    CodeGenerator.prototype.maybeBlockSuffix = function (stmt, result) {
        var ends = endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());
        if (stmt.type === Syntax.BlockStatement && (!extra.comment || !stmt.leadingComments) && !ends) {
            return [result, space];
        }
        if (ends) {
            return [result, base];
        }
        return [result, newline, base];
    };

    function generateIdentifier(node) {
        return toSourceNodeWhenNeeded(node.name, node);
    }

    function generateAsyncPrefix(node, spaceRequired) {
        return node.async ? 'async' + (spaceRequired ? noEmptySpace() : space) : '';
    }

    function generateStarSuffix(node) {
        var isGenerator = node.generator && !extra.moz.starlessGenerator;
        return isGenerator ? '*' + space : '';
    }

    function generateMethodPrefix(prop) {
        var func = prop.value;
        if (func.async) {
            return generateAsyncPrefix(func, !prop.computed);
        } else {
            // avoid space before method name
            return generateStarSuffix(func) ? '*' : '';
        }
    }

    CodeGenerator.prototype.generatePattern = function (node, precedence, flags) {
        if (node.type === Syntax.Identifier) {
            return generateIdentifier(node);
        }
        return this.generateExpression(node, precedence, flags);
    };

    CodeGenerator.prototype.generateFunctionParams = function (node) {
        var i, iz, result, hasDefault;

        hasDefault = false;

        if (node.type === Syntax.ArrowFunctionExpression &&
                !node.rest && (!node.defaults || node.defaults.length === 0) &&
                node.params.length === 1 && node.params[0].type === Syntax.Identifier) {
            // arg => { } case
            result = [generateAsyncPrefix(node, true), generateIdentifier(node.params[0])];
        } else {
            result = node.type === Syntax.ArrowFunctionExpression ? [generateAsyncPrefix(node, false)] : [];
            result.push('(');
            if (node.defaults) {
                hasDefault = true;
            }
            for (i = 0, iz = node.params.length; i < iz; ++i) {
                if (hasDefault && node.defaults[i]) {
                    // Handle default values.
                    result.push(this.generateAssignment(node.params[i], node.defaults[i], '=', Precedence.Assignment, E_TTT));
                } else {
                    result.push(this.generatePattern(node.params[i], Precedence.Assignment, E_TTT));
                }
                if (i + 1 < iz) {
                    result.push(',' + space);
                }
            }

            if (node.rest) {
                if (node.params.length) {
                    result.push(',' + space);
                }
                result.push('...');
                result.push(generateIdentifier(node.rest));
            }

            result.push(')');
        }

        return result;
    };

    CodeGenerator.prototype.generateFunctionBody = function (node) {
        var result, expr;

        result = this.generateFunctionParams(node);

        if (node.type === Syntax.ArrowFunctionExpression) {
            result.push(space);
            result.push('=>');
        }

        if (node.expression) {
            result.push(space);
            expr = this.generateExpression(node.body, Precedence.Assignment, E_TTT);
            if (expr.toString().charAt(0) === '{') {
                expr = ['(', expr, ')'];
            }
            result.push(expr);
        } else {
            result.push(this.maybeBlock(node.body, S_TTFF));
        }

        return result;
    };

    CodeGenerator.prototype.generateIterationForStatement = function (operator, stmt, flags) {
        var result = ['for' + space + '('], that = this;
        withIndent(function () {
            if (stmt.left.type === Syntax.VariableDeclaration) {
                withIndent(function () {
                    result.push(stmt.left.kind + noEmptySpace());
                    result.push(that.generateStatement(stmt.left.declarations[0], S_FFFF));
                });
            } else {
                result.push(that.generateExpression(stmt.left, Precedence.Call, E_TTT));
            }

            result = join(result, operator);
            result = [join(
                result,
                that.generateExpression(stmt.right, Precedence.Sequence, E_TTT)
            ), ')'];
        });
        result.push(this.maybeBlock(stmt.body, flags));
        return result;
    };

    CodeGenerator.prototype.generatePropertyKey = function (expr, computed) {
        var result = [];

        if (computed) {
            result.push('[');
        }

        result.push(this.generateExpression(expr, Precedence.Sequence, E_TTT));
        if (computed) {
            result.push(']');
        }

        return result;
    };

    CodeGenerator.prototype.generateAssignment = function (left, right, operator, precedence, flags) {
        if (Precedence.Assignment < precedence) {
            flags |= F_ALLOW_IN;
        }

        return parenthesize(
            [
                this.generateExpression(left, Precedence.Call, flags),
                space + operator + space,
                this.generateExpression(right, Precedence.Assignment, flags)
            ],
            Precedence.Assignment,
            precedence
        );
    };

    CodeGenerator.prototype.semicolon = function (flags) {
        if (!semicolons && flags & F_SEMICOLON_OPT) {
            return '';
        }
        return ';';
    };

    // Statements.

    CodeGenerator.Statement = {

        BlockStatement: function (stmt, flags) {
            var range, content, result = ['{', newline], that = this;

            withIndent(function () {
                // handle functions without any code
                if (stmt.body.length === 0 && preserveBlankLines) {
                    range = stmt.range;
                    if (range[1] - range[0] > 2) {
                        content = sourceCode.substring(range[0] + 1, range[1] - 1);
                        if (content[0] === '\n') {
                            result = ['{'];
                        }
                        result.push(content);
                    }
                }

                var i, iz, fragment, bodyFlags;
                bodyFlags = S_TFFF;
                if (flags & F_FUNC_BODY) {
                    bodyFlags |= F_DIRECTIVE_CTX;
                }

                for (i = 0, iz = stmt.body.length; i < iz; ++i) {
                    if (preserveBlankLines) {
                        // handle spaces before the first line
                        if (i === 0) {
                            if (stmt.body[0].leadingComments) {
                                range = stmt.body[0].leadingComments[0].extendedRange;
                                content = sourceCode.substring(range[0], range[1]);
                                if (content[0] === '\n') {
                                    result = ['{'];
                                }
                            }
                            if (!stmt.body[0].leadingComments) {
                                generateBlankLines(stmt.range[0], stmt.body[0].range[0], result);
                            }
                        }

                        // handle spaces between lines
                        if (i > 0) {
                            if (!stmt.body[i - 1].trailingComments  && !stmt.body[i].leadingComments) {
                                generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);
                            }
                        }
                    }

                    if (i === iz - 1) {
                        bodyFlags |= F_SEMICOLON_OPT;
                    }

                    if (stmt.body[i].leadingComments && preserveBlankLines) {
                        fragment = that.generateStatement(stmt.body[i], bodyFlags);
                    } else {
                        fragment = addIndent(that.generateStatement(stmt.body[i], bodyFlags));
                    }

                    result.push(fragment);
                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                        if (preserveBlankLines && i < iz - 1) {
                            // don't add a new line if there are leading coments
                            // in the next statement
                            if (!stmt.body[i + 1].leadingComments) {
                                result.push(newline);
                            }
                        } else {
                            result.push(newline);
                        }
                    }

                    if (preserveBlankLines) {
                        // handle spaces after the last line
                        if (i === iz - 1) {
                            if (!stmt.body[i].trailingComments) {
                                generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);
                            }
                        }
                    }
                }
            });

            result.push(addIndent('}'));
            return result;
        },

        BreakStatement: function (stmt, flags) {
            if (stmt.label) {
                return 'break ' + stmt.label.name + this.semicolon(flags);
            }
            return 'break' + this.semicolon(flags);
        },

        ContinueStatement: function (stmt, flags) {
            if (stmt.label) {
                return 'continue ' + stmt.label.name + this.semicolon(flags);
            }
            return 'continue' + this.semicolon(flags);
        },

        ClassBody: function (stmt, flags) {
            var result = [ '{', newline], that = this;

            withIndent(function (indent) {
                var i, iz;

                for (i = 0, iz = stmt.body.length; i < iz; ++i) {
                    result.push(indent);
                    result.push(that.generateExpression(stmt.body[i], Precedence.Sequence, E_TTT));
                    if (i + 1 < iz) {
                        result.push(newline);
                    }
                }
            });

            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                result.push(newline);
            }
            result.push(base);
            result.push('}');
            return result;
        },

        ClassDeclaration: function (stmt, flags) {
            var result, fragment;
            result  = ['class ' + stmt.id.name];
            if (stmt.superClass) {
                fragment = join('extends', this.generateExpression(stmt.superClass, Precedence.Assignment, E_TTT));
                result = join(result, fragment);
            }
            result.push(space);
            result.push(this.generateStatement(stmt.body, S_TFFT));
            return result;
        },

        DirectiveStatement: function (stmt, flags) {
            if (extra.raw && stmt.raw) {
                return stmt.raw + this.semicolon(flags);
            }
            return escapeDirective(stmt.directive) + this.semicolon(flags);
        },

        DoWhileStatement: function (stmt, flags) {
            // Because `do 42 while (cond)` is Syntax Error. We need semicolon.
            var result = join('do', this.maybeBlock(stmt.body, S_TFFF));
            result = this.maybeBlockSuffix(stmt.body, result);
            return join(result, [
                'while' + space + '(',
                this.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
                ')' + this.semicolon(flags)
            ]);
        },

        CatchClause: function (stmt, flags) {
            var result, that = this;
            withIndent(function () {
                var guard;

                result = [
                    'catch' + space + '(',
                    that.generateExpression(stmt.param, Precedence.Sequence, E_TTT),
                    ')'
                ];

                if (stmt.guard) {
                    guard = that.generateExpression(stmt.guard, Precedence.Sequence, E_TTT);
                    result.splice(2, 0, ' if ', guard);
                }
            });
            result.push(this.maybeBlock(stmt.body, S_TFFF));
            return result;
        },

        DebuggerStatement: function (stmt, flags) {
            return 'debugger' + this.semicolon(flags);
        },

        EmptyStatement: function (stmt, flags) {
            return ';';
        },

        ExportDeclaration: function (stmt, flags) {
            var result = [ 'export' ], bodyFlags, that = this;

            bodyFlags = (flags & F_SEMICOLON_OPT) ? S_TFFT : S_TFFF;

            // export default HoistableDeclaration[Default]
            // export default AssignmentExpression[In] ;
            if (stmt['default']) {
                result = join(result, 'default');
                if (isStatement(stmt.declaration)) {
                    result = join(result, this.generateStatement(stmt.declaration, bodyFlags));
                } else {
                    result = join(result, this.generateExpression(stmt.declaration, Precedence.Assignment, E_TTT) + this.semicolon(flags));
                }
                return result;
            }

            // export VariableStatement
            // export Declaration[Default]
            if (stmt.declaration) {
                return join(result, this.generateStatement(stmt.declaration, bodyFlags));
            }

            // export * FromClause ;
            // export ExportClause[NoReference] FromClause ;
            // export ExportClause ;
            if (stmt.specifiers) {
                if (stmt.specifiers.length === 0) {
                    result = join(result, '{' + space + '}');
                } else if (stmt.specifiers[0].type === Syntax.ExportBatchSpecifier) {
                    result = join(result, this.generateExpression(stmt.specifiers[0], Precedence.Sequence, E_TTT));
                } else {
                    result = join(result, '{');
                    withIndent(function (indent) {
                        var i, iz;
                        result.push(newline);
                        for (i = 0, iz = stmt.specifiers.length; i < iz; ++i) {
                            result.push(indent);
                            result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));
                            if (i + 1 < iz) {
                                result.push(',' + newline);
                            }
                        }
                    });
                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                        result.push(newline);
                    }
                    result.push(base + '}');
                }

                if (stmt.source) {
                    result = join(result, [
                        'from' + space,
                        // ModuleSpecifier
                        this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                        this.semicolon(flags)
                    ]);
                } else {
                    result.push(this.semicolon(flags));
                }
            }
            return result;
        },

        ExpressionStatement: function (stmt, flags) {
            var result, fragment;

            function isClassPrefixed(fragment) {
                var code;
                if (fragment.slice(0, 5) !== 'class') {
                    return false;
                }
                code = fragment.charCodeAt(5);
                return code === 0x7B  /* '{' */ || esutils.code.isWhiteSpace(code) || esutils.code.isLineTerminator(code);
            }

            function isFunctionPrefixed(fragment) {
                var code;
                if (fragment.slice(0, 8) !== 'function') {
                    return false;
                }
                code = fragment.charCodeAt(8);
                return code === 0x28 /* '(' */ || esutils.code.isWhiteSpace(code) || code === 0x2A  /* '*' */ || esutils.code.isLineTerminator(code);
            }

            function isAsyncPrefixed(fragment) {
                var code, i, iz;
                if (fragment.slice(0, 5) !== 'async') {
                    return false;
                }
                if (!esutils.code.isWhiteSpace(fragment.charCodeAt(5))) {
                    return false;
                }
                for (i = 6, iz = fragment.length; i < iz; ++i) {
                    if (!esutils.code.isWhiteSpace(fragment.charCodeAt(i))) {
                        break;
                    }
                }
                if (i === iz) {
                    return false;
                }
                if (fragment.slice(i, i + 8) !== 'function') {
                    return false;
                }
                code = fragment.charCodeAt(i + 8);
                return code === 0x28 /* '(' */ || esutils.code.isWhiteSpace(code) || code === 0x2A  /* '*' */ || esutils.code.isLineTerminator(code);
            }

            result = [this.generateExpression(stmt.expression, Precedence.Sequence, E_TTT)];
            // 12.4 '{', 'function', 'class' is not allowed in this position.
            // wrap expression with parentheses
            fragment = toSourceNodeWhenNeeded(result).toString();
            if (fragment.charCodeAt(0) === 0x7B  /* '{' */ ||  // ObjectExpression
                    isClassPrefixed(fragment) ||
                    isFunctionPrefixed(fragment) ||
                    isAsyncPrefixed(fragment) ||
                    (directive && (flags & F_DIRECTIVE_CTX) && stmt.expression.type === Syntax.Literal && typeof stmt.expression.value === 'string')) {
                result = ['(', result, ')' + this.semicolon(flags)];
            } else {
                result.push(this.semicolon(flags));
            }
            return result;
        },

        ImportDeclaration: function (stmt, flags) {
            // ES6: 15.2.1 valid import declarations:
            //     - import ImportClause FromClause ;
            //     - import ModuleSpecifier ;
            var result, cursor, that = this;

            // If no ImportClause is present,
            // this should be `import ModuleSpecifier` so skip `from`
            // ModuleSpecifier is StringLiteral.
            if (stmt.specifiers.length === 0) {
                // import ModuleSpecifier ;
                return [
                    'import',
                    space,
                    // ModuleSpecifier
                    this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                    this.semicolon(flags)
                ];
            }

            // import ImportClause FromClause ;
            result = [
                'import'
            ];
            cursor = 0;

            // ImportedBinding
            if (stmt.specifiers[cursor].type === Syntax.ImportDefaultSpecifier) {
                result = join(result, [
                        this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)
                ]);
                ++cursor;
            }

            if (stmt.specifiers[cursor]) {
                if (cursor !== 0) {
                    result.push(',');
                }

                if (stmt.specifiers[cursor].type === Syntax.ImportNamespaceSpecifier) {
                    // NameSpaceImport
                    result = join(result, [
                            space,
                            this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)
                    ]);
                } else {
                    // NamedImports
                    result.push(space + '{');

                    if ((stmt.specifiers.length - cursor) === 1) {
                        // import { ... } from "...";
                        result.push(space);
                        result.push(this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT));
                        result.push(space + '}' + space);
                    } else {
                        // import {
                        //    ...,
                        //    ...,
                        // } from "...";
                        withIndent(function (indent) {
                            var i, iz;
                            result.push(newline);
                            for (i = cursor, iz = stmt.specifiers.length; i < iz; ++i) {
                                result.push(indent);
                                result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));
                                if (i + 1 < iz) {
                                    result.push(',' + newline);
                                }
                            }
                        });
                        if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                            result.push(newline);
                        }
                        result.push(base + '}' + space);
                    }
                }
            }

            result = join(result, [
                'from' + space,
                // ModuleSpecifier
                this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                this.semicolon(flags)
            ]);
            return result;
        },

        VariableDeclarator: function (stmt, flags) {
            var itemFlags = (flags & F_ALLOW_IN) ? E_TTT : E_FTT;
            if (stmt.init) {
                return [
                    this.generateExpression(stmt.id, Precedence.Assignment, itemFlags),
                    space,
                    '=',
                    space,
                    this.generateExpression(stmt.init, Precedence.Assignment, itemFlags)
                ];
            }
            return this.generatePattern(stmt.id, Precedence.Assignment, itemFlags);
        },

        VariableDeclaration: function (stmt, flags) {
            // VariableDeclarator is typed as Statement,
            // but joined with comma (not LineTerminator).
            // So if comment is attached to target node, we should specialize.
            var result, i, iz, node, bodyFlags, that = this;

            result = [ stmt.kind ];

            bodyFlags = (flags & F_ALLOW_IN) ? S_TFFF : S_FFFF;

            function block() {
                node = stmt.declarations[0];
                if (extra.comment && node.leadingComments) {
                    result.push('\n');
                    result.push(addIndent(that.generateStatement(node, bodyFlags)));
                } else {
                    result.push(noEmptySpace());
                    result.push(that.generateStatement(node, bodyFlags));
                }

                for (i = 1, iz = stmt.declarations.length; i < iz; ++i) {
                    node = stmt.declarations[i];
                    if (extra.comment && node.leadingComments) {
                        result.push(',' + newline);
                        result.push(addIndent(that.generateStatement(node, bodyFlags)));
                    } else {
                        result.push(',' + space);
                        result.push(that.generateStatement(node, bodyFlags));
                    }
                }
            }

            if (stmt.declarations.length > 1) {
                withIndent(block);
            } else {
                block();
            }

            result.push(this.semicolon(flags));

            return result;
        },

        ThrowStatement: function (stmt, flags) {
            return [join(
                'throw',
                this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)
            ), this.semicolon(flags)];
        },

        TryStatement: function (stmt, flags) {
            var result, i, iz, guardedHandlers;

            result = ['try', this.maybeBlock(stmt.block, S_TFFF)];
            result = this.maybeBlockSuffix(stmt.block, result);

            if (stmt.handlers) {
                // old interface
                for (i = 0, iz = stmt.handlers.length; i < iz; ++i) {
                    result = join(result, this.generateStatement(stmt.handlers[i], S_TFFF));
                    if (stmt.finalizer || i + 1 !== iz) {
                        result = this.maybeBlockSuffix(stmt.handlers[i].body, result);
                    }
                }
            } else {
                guardedHandlers = stmt.guardedHandlers || [];

                for (i = 0, iz = guardedHandlers.length; i < iz; ++i) {
                    result = join(result, this.generateStatement(guardedHandlers[i], S_TFFF));
                    if (stmt.finalizer || i + 1 !== iz) {
                        result = this.maybeBlockSuffix(guardedHandlers[i].body, result);
                    }
                }

                // new interface
                if (stmt.handler) {
                    if (isArray(stmt.handler)) {
                        for (i = 0, iz = stmt.handler.length; i < iz; ++i) {
                            result = join(result, this.generateStatement(stmt.handler[i], S_TFFF));
                            if (stmt.finalizer || i + 1 !== iz) {
                                result = this.maybeBlockSuffix(stmt.handler[i].body, result);
                            }
                        }
                    } else {
                        result = join(result, this.generateStatement(stmt.handler, S_TFFF));
                        if (stmt.finalizer) {
                            result = this.maybeBlockSuffix(stmt.handler.body, result);
                        }
                    }
                }
            }
            if (stmt.finalizer) {
                result = join(result, ['finally', this.maybeBlock(stmt.finalizer, S_TFFF)]);
            }
            return result;
        },

        SwitchStatement: function (stmt, flags) {
            var result, fragment, i, iz, bodyFlags, that = this;
            withIndent(function () {
                result = [
                    'switch' + space + '(',
                    that.generateExpression(stmt.discriminant, Precedence.Sequence, E_TTT),
                    ')' + space + '{' + newline
                ];
            });
            if (stmt.cases) {
                bodyFlags = S_TFFF;
                for (i = 0, iz = stmt.cases.length; i < iz; ++i) {
                    if (i === iz - 1) {
                        bodyFlags |= F_SEMICOLON_OPT;
                    }
                    fragment = addIndent(this.generateStatement(stmt.cases[i], bodyFlags));
                    result.push(fragment);
                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                        result.push(newline);
                    }
                }
            }
            result.push(addIndent('}'));
            return result;
        },

        SwitchCase: function (stmt, flags) {
            var result, fragment, i, iz, bodyFlags, that = this;
            withIndent(function () {
                if (stmt.test) {
                    result = [
                        join('case', that.generateExpression(stmt.test, Precedence.Sequence, E_TTT)),
                        ':'
                    ];
                } else {
                    result = ['default:'];
                }

                i = 0;
                iz = stmt.consequent.length;
                if (iz && stmt.consequent[0].type === Syntax.BlockStatement) {
                    fragment = that.maybeBlock(stmt.consequent[0], S_TFFF);
                    result.push(fragment);
                    i = 1;
                }

                if (i !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                    result.push(newline);
                }

                bodyFlags = S_TFFF;
                for (; i < iz; ++i) {
                    if (i === iz - 1 && flags & F_SEMICOLON_OPT) {
                        bodyFlags |= F_SEMICOLON_OPT;
                    }
                    fragment = addIndent(that.generateStatement(stmt.consequent[i], bodyFlags));
                    result.push(fragment);
                    if (i + 1 !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                        result.push(newline);
                    }
                }
            });
            return result;
        },

        IfStatement: function (stmt, flags) {
            var result, bodyFlags, semicolonOptional, that = this;
            withIndent(function () {
                result = [
                    'if' + space + '(',
                    that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
                    ')'
                ];
            });
            semicolonOptional = flags & F_SEMICOLON_OPT;
            bodyFlags = S_TFFF;
            if (semicolonOptional) {
                bodyFlags |= F_SEMICOLON_OPT;
            }
            if (stmt.alternate) {
                result.push(this.maybeBlock(stmt.consequent, S_TFFF));
                result = this.maybeBlockSuffix(stmt.consequent, result);
                if (stmt.alternate.type === Syntax.IfStatement) {
                    result = join(result, ['else ', this.generateStatement(stmt.alternate, bodyFlags)]);
                } else {
                    result = join(result, join('else', this.maybeBlock(stmt.alternate, bodyFlags)));
                }
            } else {
                result.push(this.maybeBlock(stmt.consequent, bodyFlags));
            }
            return result;
        },

        ForStatement: function (stmt, flags) {
            var result, that = this;
            withIndent(function () {
                result = ['for' + space + '('];
                if (stmt.init) {
                    if (stmt.init.type === Syntax.VariableDeclaration) {
                        result.push(that.generateStatement(stmt.init, S_FFFF));
                    } else {
                        // F_ALLOW_IN becomes false.
                        result.push(that.generateExpression(stmt.init, Precedence.Sequence, E_FTT));
                        result.push(';');
                    }
                } else {
                    result.push(';');
                }

                if (stmt.test) {
                    result.push(space);
                    result.push(that.generateExpression(stmt.test, Precedence.Sequence, E_TTT));
                    result.push(';');
                } else {
                    result.push(';');
                }

                if (stmt.update) {
                    result.push(space);
                    result.push(that.generateExpression(stmt.update, Precedence.Sequence, E_TTT));
                    result.push(')');
                } else {
                    result.push(')');
                }
            });

            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
            return result;
        },

        ForInStatement: function (stmt, flags) {
            return this.generateIterationForStatement('in', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);
        },

        ForOfStatement: function (stmt, flags) {
            return this.generateIterationForStatement('of', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);
        },

        LabeledStatement: function (stmt, flags) {
            return [stmt.label.name + ':', this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF)];
        },

        Program: function (stmt, flags) {
            var result, fragment, i, iz, bodyFlags;
            iz = stmt.body.length;
            result = [safeConcatenation && iz > 0 ? '\n' : ''];
            bodyFlags = S_TFTF;
            for (i = 0; i < iz; ++i) {
                if (!safeConcatenation && i === iz - 1) {
                    bodyFlags |= F_SEMICOLON_OPT;
                }

                if (preserveBlankLines) {
                    // handle spaces before the first line
                    if (i === 0) {
                        if (!stmt.body[0].leadingComments) {
                            generateBlankLines(stmt.range[0], stmt.body[i].range[0], result);
                        }
                    }

                    // handle spaces between lines
                    if (i > 0) {
                        if (!stmt.body[i - 1].trailingComments && !stmt.body[i].leadingComments) {
                            generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);
                        }
                    }
                }

                fragment = addIndent(this.generateStatement(stmt.body[i], bodyFlags));
                result.push(fragment);
                if (i + 1 < iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                    if (preserveBlankLines) {
                        if (!stmt.body[i + 1].leadingComments) {
                            result.push(newline);
                        }
                    } else {
                        result.push(newline);
                    }
                }

                if (preserveBlankLines) {
                    // handle spaces after the last line
                    if (i === iz - 1) {
                        if (!stmt.body[i].trailingComments) {
                            generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);
                        }
                    }
                }
            }
            return result;
        },

        FunctionDeclaration: function (stmt, flags) {
            return [
                generateAsyncPrefix(stmt, true),
                'function',
                generateStarSuffix(stmt) || noEmptySpace(),
                generateIdentifier(stmt.id),
                this.generateFunctionBody(stmt)
            ];
        },

        ReturnStatement: function (stmt, flags) {
            if (stmt.argument) {
                return [join(
                    'return',
                    this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)
                ), this.semicolon(flags)];
            }
            return ['return' + this.semicolon(flags)];
        },

        WhileStatement: function (stmt, flags) {
            var result, that = this;
            withIndent(function () {
                result = [
                    'while' + space + '(',
                    that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
                    ')'
                ];
            });
            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
            return result;
        },

        WithStatement: function (stmt, flags) {
            var result, that = this;
            withIndent(function () {
                result = [
                    'with' + space + '(',
                    that.generateExpression(stmt.object, Precedence.Sequence, E_TTT),
                    ')'
                ];
            });
            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
            return result;
        }

    };

    merge(CodeGenerator.prototype, CodeGenerator.Statement);

    // Expressions.

    CodeGenerator.Expression = {

        SequenceExpression: function (expr, precedence, flags) {
            var result, i, iz;
            if (Precedence.Sequence < precedence) {
                flags |= F_ALLOW_IN;
            }
            result = [];
            for (i = 0, iz = expr.expressions.length; i < iz; ++i) {
                result.push(this.generateExpression(expr.expressions[i], Precedence.Assignment, flags));
                if (i + 1 < iz) {
                    result.push(',' + space);
                }
            }
            return parenthesize(result, Precedence.Sequence, precedence);
        },

        AssignmentExpression: function (expr, precedence, flags) {
            return this.generateAssignment(expr.left, expr.right, expr.operator, precedence, flags);
        },

        ArrowFunctionExpression: function (expr, precedence, flags) {
            return parenthesize(this.generateFunctionBody(expr), Precedence.ArrowFunction, precedence);
        },

        ConditionalExpression: function (expr, precedence, flags) {
            if (Precedence.Conditional < precedence) {
                flags |= F_ALLOW_IN;
            }
            return parenthesize(
                [
                    this.generateExpression(expr.test, Precedence.LogicalOR, flags),
                    space + '?' + space,
                    this.generateExpression(expr.consequent, Precedence.Assignment, flags),
                    space + ':' + space,
                    this.generateExpression(expr.alternate, Precedence.Assignment, flags)
                ],
                Precedence.Conditional,
                precedence
            );
        },

        LogicalExpression: function (expr, precedence, flags) {
            return this.BinaryExpression(expr, precedence, flags);
        },

        BinaryExpression: function (expr, precedence, flags) {
            var result, currentPrecedence, fragment, leftSource;
            currentPrecedence = BinaryPrecedence[expr.operator];

            if (currentPrecedence < precedence) {
                flags |= F_ALLOW_IN;
            }

            fragment = this.generateExpression(expr.left, currentPrecedence, flags);

            leftSource = fragment.toString();

            if (leftSource.charCodeAt(leftSource.length - 1) === 0x2F /* / */ && esutils.code.isIdentifierPart(expr.operator.charCodeAt(0))) {
                result = [fragment, noEmptySpace(), expr.operator];
            } else {
                result = join(fragment, expr.operator);
            }

            fragment = this.generateExpression(expr.right, currentPrecedence + 1, flags);

            if (expr.operator === '/' && fragment.toString().charAt(0) === '/' ||
            expr.operator.slice(-1) === '<' && fragment.toString().slice(0, 3) === '!--') {
                // If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start
                result.push(noEmptySpace());
                result.push(fragment);
            } else {
                result = join(result, fragment);
            }

            if (expr.operator === 'in' && !(flags & F_ALLOW_IN)) {
                return ['(', result, ')'];
            }
            return parenthesize(result, currentPrecedence, precedence);
        },

        CallExpression: function (expr, precedence, flags) {
            var result, i, iz;
            // F_ALLOW_UNPARATH_NEW becomes false.
            result = [this.generateExpression(expr.callee, Precedence.Call, E_TTF)];
            result.push('(');
            for (i = 0, iz = expr['arguments'].length; i < iz; ++i) {
                result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));
                if (i + 1 < iz) {
                    result.push(',' + space);
                }
            }
            result.push(')');

            if (!(flags & F_ALLOW_CALL)) {
                return ['(', result, ')'];
            }
            return parenthesize(result, Precedence.Call, precedence);
        },

        NewExpression: function (expr, precedence, flags) {
            var result, length, i, iz, itemFlags;
            length = expr['arguments'].length;

            // F_ALLOW_CALL becomes false.
            // F_ALLOW_UNPARATH_NEW may become false.
            itemFlags = (flags & F_ALLOW_UNPARATH_NEW && !parentheses && length === 0) ? E_TFT : E_TFF;

            result = join(
                'new',
                this.generateExpression(expr.callee, Precedence.New, itemFlags)
            );

            if (!(flags & F_ALLOW_UNPARATH_NEW) || parentheses || length > 0) {
                result.push('(');
                for (i = 0, iz = length; i < iz; ++i) {
                    result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));
                    if (i + 1 < iz) {
                        result.push(',' + space);
                    }
                }
                result.push(')');
            }

            return parenthesize(result, Precedence.New, precedence);
        },

        MemberExpression: function (expr, precedence, flags) {
            var result, fragment;

            // F_ALLOW_UNPARATH_NEW becomes false.
            result = [this.generateExpression(expr.object, Precedence.Call, (flags & F_ALLOW_CALL) ? E_TTF : E_TFF)];

            if (expr.computed) {
                result.push('[');
                result.push(this.generateExpression(expr.property, Precedence.Sequence, flags & F_ALLOW_CALL ? E_TTT : E_TFT));
                result.push(']');
            } else {
                if (expr.object.type === Syntax.Literal && typeof expr.object.value === 'number') {
                    fragment = toSourceNodeWhenNeeded(result).toString();
                    // When the following conditions are all true,
                    //   1. No floating point
                    //   2. Don't have exponents
                    //   3. The last character is a decimal digit
                    //   4. Not hexadecimal OR octal number literal
                    // we should add a floating point.
                    if (
                            fragment.indexOf('.') < 0 &&
                            !/[eExX]/.test(fragment) &&
                            esutils.code.isDecimalDigit(fragment.charCodeAt(fragment.length - 1)) &&
                            !(fragment.length >= 2 && fragment.charCodeAt(0) === 48)  // '0'
                            ) {
                        result.push('.');
                    }
                }
                result.push('.');
                result.push(generateIdentifier(expr.property));
            }

            return parenthesize(result, Precedence.Member, precedence);
        },

        UnaryExpression: function (expr, precedence, flags) {
            var result, fragment, rightCharCode, leftSource, leftCharCode;
            fragment = this.generateExpression(expr.argument, Precedence.Unary, E_TTT);

            if (space === '') {
                result = join(expr.operator, fragment);
            } else {
                result = [expr.operator];
                if (expr.operator.length > 2) {
                    // delete, void, typeof
                    // get `typeof []`, not `typeof[]`
                    result = join(result, fragment);
                } else {
                    // Prevent inserting spaces between operator and argument if it is unnecessary
                    // like, `!cond`
                    leftSource = toSourceNodeWhenNeeded(result).toString();
                    leftCharCode = leftSource.charCodeAt(leftSource.length - 1);
                    rightCharCode = fragment.toString().charCodeAt(0);

                    if (((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode) ||
                            (esutils.code.isIdentifierPart(leftCharCode) && esutils.code.isIdentifierPart(rightCharCode))) {
                        result.push(noEmptySpace());
                        result.push(fragment);
                    } else {
                        result.push(fragment);
                    }
                }
            }
            return parenthesize(result, Precedence.Unary, precedence);
        },

        YieldExpression: function (expr, precedence, flags) {
            var result;
            if (expr.delegate) {
                result = 'yield*';
            } else {
                result = 'yield';
            }
            if (expr.argument) {
                result = join(
                    result,
                    this.generateExpression(expr.argument, Precedence.Yield, E_TTT)
                );
            }
            return parenthesize(result, Precedence.Yield, precedence);
        },

        AwaitExpression: function (expr, precedence, flags) {
            var result = join(
                expr.delegate ? 'await*' : 'await',
                this.generateExpression(expr.argument, Precedence.Await, E_TTT)
            );
            return parenthesize(result, Precedence.Await, precedence);
        },

        UpdateExpression: function (expr, precedence, flags) {
            if (expr.prefix) {
                return parenthesize(
                    [
                        expr.operator,
                        this.generateExpression(expr.argument, Precedence.Unary, E_TTT)
                    ],
                    Precedence.Unary,
                    precedence
                );
            }
            return parenthesize(
                [
                    this.generateExpression(expr.argument, Precedence.Postfix, E_TTT),
                    expr.operator
                ],
                Precedence.Postfix,
                precedence
            );
        },

        FunctionExpression: function (expr, precedence, flags) {
            var result = [
                generateAsyncPrefix(expr, true),
                'function'
            ];
            if (expr.id) {
                result.push(generateStarSuffix(expr) || noEmptySpace());
                result.push(generateIdentifier(expr.id));
            } else {
                result.push(generateStarSuffix(expr) || space);
            }
            result.push(this.generateFunctionBody(expr));
            return result;
        },

        ExportBatchSpecifier: function (expr, precedence, flags) {
            return '*';
        },

        ArrayPattern: function (expr, precedence, flags) {
            return this.ArrayExpression(expr, precedence, flags);
        },

        ArrayExpression: function (expr, precedence, flags) {
            var result, multiline, that = this;
            if (!expr.elements.length) {
                return '[]';
            }
            multiline = expr.elements.length > 1;
            result = ['[', multiline ? newline : ''];
            withIndent(function (indent) {
                var i, iz;
                for (i = 0, iz = expr.elements.length; i < iz; ++i) {
                    if (!expr.elements[i]) {
                        if (multiline) {
                            result.push(indent);
                        }
                        if (i + 1 === iz) {
                            result.push(',');
                        }
                    } else {
                        result.push(multiline ? indent : '');
                        result.push(that.generateExpression(expr.elements[i], Precedence.Assignment, E_TTT));
                    }
                    if (i + 1 < iz) {
                        result.push(',' + (multiline ? newline : space));
                    }
                }
            });
            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                result.push(newline);
            }
            result.push(multiline ? base : '');
            result.push(']');
            return result;
        },

        ClassExpression: function (expr, precedence, flags) {
            var result, fragment;
            result = ['class'];
            if (expr.id) {
                result = join(result, this.generateExpression(expr.id, Precedence.Sequence, E_TTT));
            }
            if (expr.superClass) {
                fragment = join('extends', this.generateExpression(expr.superClass, Precedence.Assignment, E_TTT));
                result = join(result, fragment);
            }
            result.push(space);
            result.push(this.generateStatement(expr.body, S_TFFT));
            return result;
        },

        MethodDefinition: function (expr, precedence, flags) {
            var result, fragment;
            if (expr['static']) {
                result = ['static' + space];
            } else {
                result = [];
            }
            if (expr.kind === 'get' || expr.kind === 'set') {
                fragment = [
                    join(expr.kind, this.generatePropertyKey(expr.key, expr.computed)),
                    this.generateFunctionBody(expr.value)
                ];
            } else {
                fragment = [
                    generateMethodPrefix(expr),
                    this.generatePropertyKey(expr.key, expr.computed),
                    this.generateFunctionBody(expr.value)
                ];
            }
            return join(result, fragment);
        },

        Property: function (expr, precedence, flags) {
            if (expr.kind === 'get' || expr.kind === 'set') {
                return [
                    expr.kind, noEmptySpace(),
                    this.generatePropertyKey(expr.key, expr.computed),
                    this.generateFunctionBody(expr.value)
                ];
            }

            if (expr.shorthand) {
                return this.generatePropertyKey(expr.key, expr.computed);
            }

            if (expr.method) {
                return [
                    generateMethodPrefix(expr),
                    this.generatePropertyKey(expr.key, expr.computed),
                    this.generateFunctionBody(expr.value)
                ];
            }

            return [
                this.generatePropertyKey(expr.key, expr.computed),
                ':' + space,
                this.generateExpression(expr.value, Precedence.Assignment, E_TTT)
            ];
        },

        ObjectExpression: function (expr, precedence, flags) {
            var multiline, result, fragment, that = this;

            if (!expr.properties.length) {
                return '{}';
            }
            multiline = expr.properties.length > 1;

            withIndent(function () {
                fragment = that.generateExpression(expr.properties[0], Precedence.Sequence, E_TTT);
            });

            if (!multiline) {
                // issues 4
                // Do not transform from
                //   dejavu.Class.declare({
                //       method2: function () {}
                //   });
                // to
                //   dejavu.Class.declare({method2: function () {
                //       }});
                if (!hasLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
                    return [ '{', space, fragment, space, '}' ];
                }
            }

            withIndent(function (indent) {
                var i, iz;
                result = [ '{', newline, indent, fragment ];

                if (multiline) {
                    result.push(',' + newline);
                    for (i = 1, iz = expr.properties.length; i < iz; ++i) {
                        result.push(indent);
                        result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));
                        if (i + 1 < iz) {
                            result.push(',' + newline);
                        }
                    }
                }
            });

            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                result.push(newline);
            }
            result.push(base);
            result.push('}');
            return result;
        },

        ObjectPattern: function (expr, precedence, flags) {
            var result, i, iz, multiline, property, that = this;
            if (!expr.properties.length) {
                return '{}';
            }

            multiline = false;
            if (expr.properties.length === 1) {
                property = expr.properties[0];
                if (property.value.type !== Syntax.Identifier) {
                    multiline = true;
                }
            } else {
                for (i = 0, iz = expr.properties.length; i < iz; ++i) {
                    property = expr.properties[i];
                    if (!property.shorthand) {
                        multiline = true;
                        break;
                    }
                }
            }
            result = ['{', multiline ? newline : '' ];

            withIndent(function (indent) {
                var i, iz;
                for (i = 0, iz = expr.properties.length; i < iz; ++i) {
                    result.push(multiline ? indent : '');
                    result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));
                    if (i + 1 < iz) {
                        result.push(',' + (multiline ? newline : space));
                    }
                }
            });

            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
                result.push(newline);
            }
            result.push(multiline ? base : '');
            result.push('}');
            return result;
        },

        ThisExpression: function (expr, precedence, flags) {
            return 'this';
        },

        Identifier: function (expr, precedence, flags) {
            return generateIdentifier(expr);
        },

        ImportDefaultSpecifier: function (expr, precedence, flags) {
            return generateIdentifier(expr.id);
        },

        ImportNamespaceSpecifier: function (expr, precedence, flags) {
            var result = ['*'];
            if (expr.id) {
                result.push(space + 'as' + noEmptySpace() + generateIdentifier(expr.id));
            }
            return result;
        },

        ImportSpecifier: function (expr, precedence, flags) {
            return this.ExportSpecifier(expr, precedence, flags);
        },

        ExportSpecifier: function (expr, precedence, flags) {
            var result = [ expr.id.name ];
            if (expr.name) {
                result.push(noEmptySpace() + 'as' + noEmptySpace() + generateIdentifier(expr.name));
            }
            return result;
        },

        Literal: function (expr, precedence, flags) {
            var raw;
            if (expr.hasOwnProperty('raw') && parse && extra.raw) {
                try {
                    raw = parse(expr.raw).body[0].expression;
                    if (raw.type === Syntax.Literal) {
                        if (raw.value === expr.value) {
                            return expr.raw;
                        }
                    }
                } catch (e) {
                    // not use raw property
                }
            }

            if (expr.value === null) {
                return 'null';
            }

            if (typeof expr.value === 'string') {
                return escapeString(expr.value);
            }

            if (typeof expr.value === 'number') {
                return generateNumber(expr.value);
            }

            if (typeof expr.value === 'boolean') {
                return expr.value ? 'true' : 'false';
            }

            return generateRegExp(expr.value);
        },

        GeneratorExpression: function (expr, precedence, flags) {
            return this.ComprehensionExpression(expr, precedence, flags);
        },

        ComprehensionExpression: function (expr, precedence, flags) {
            // GeneratorExpression should be parenthesized with (...), ComprehensionExpression with [...]
            // Due to https://bugzilla.mozilla.org/show_bug.cgi?id=883468 position of expr.body can differ in Spidermonkey and ES6

            var result, i, iz, fragment, that = this;
            result = (expr.type === Syntax.GeneratorExpression) ? ['('] : ['['];

            if (extra.moz.comprehensionExpressionStartsWithAssignment) {
                fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);
                result.push(fragment);
            }

            if (expr.blocks) {
                withIndent(function () {
                    for (i = 0, iz = expr.blocks.length; i < iz; ++i) {
                        fragment = that.generateExpression(expr.blocks[i], Precedence.Sequence, E_TTT);
                        if (i > 0 || extra.moz.comprehensionExpressionStartsWithAssignment) {
                            result = join(result, fragment);
                        } else {
                            result.push(fragment);
                        }
                    }
                });
            }

            if (expr.filter) {
                result = join(result, 'if' + space);
                fragment = this.generateExpression(expr.filter, Precedence.Sequence, E_TTT);
                result = join(result, [ '(', fragment, ')' ]);
            }

            if (!extra.moz.comprehensionExpressionStartsWithAssignment) {
                fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);

                result = join(result, fragment);
            }

            result.push((expr.type === Syntax.GeneratorExpression) ? ')' : ']');
            return result;
        },

        ComprehensionBlock: function (expr, precedence, flags) {
            var fragment;
            if (expr.left.type === Syntax.VariableDeclaration) {
                fragment = [
                    expr.left.kind, noEmptySpace(),
                    this.generateStatement(expr.left.declarations[0], S_FFFF)
                ];
            } else {
                fragment = this.generateExpression(expr.left, Precedence.Call, E_TTT);
            }

            fragment = join(fragment, expr.of ? 'of' : 'in');
            fragment = join(fragment, this.generateExpression(expr.right, Precedence.Sequence, E_TTT));

            return [ 'for' + space + '(', fragment, ')' ];
        },

        SpreadElement: function (expr, precedence, flags) {
            return [
                '...',
                this.generateExpression(expr.argument, Precedence.Assignment, E_TTT)
            ];
        },

        TaggedTemplateExpression: function (expr, precedence, flags) {
            var itemFlags = E_TTF;
            if (!(flags & F_ALLOW_CALL)) {
                itemFlags = E_TFF;
            }
            var result = [
                this.generateExpression(expr.tag, Precedence.Call, itemFlags),
                this.generateExpression(expr.quasi, Precedence.Primary, E_FFT)
            ];
            return parenthesize(result, Precedence.TaggedTemplate, precedence);
        },

        TemplateElement: function (expr, precedence, flags) {
            // Don't use "cooked". Since tagged template can use raw template
            // representation. So if we do so, it breaks the script semantics.
            return expr.value.raw;
        },

        TemplateLiteral: function (expr, precedence, flags) {
            var result, i, iz;
            result = [ '`' ];
            for (i = 0, iz = expr.quasis.length; i < iz; ++i) {
                result.push(this.generateExpression(expr.quasis[i], Precedence.Primary, E_TTT));
                if (i + 1 < iz) {
                    result.push('${' + space);
                    result.push(this.generateExpression(expr.expressions[i], Precedence.Sequence, E_TTT));
                    result.push(space + '}');
                }
            }
            result.push('`');
            return result;
        },

        ModuleSpecifier: function (expr, precedence, flags) {
            return this.Literal(expr, precedence, flags);
        }

    };

    merge(CodeGenerator.prototype, CodeGenerator.Expression);

    CodeGenerator.prototype.generateExpression = function (expr, precedence, flags) {
        var result, type;

        type = expr.type || Syntax.Property;

        if (extra.verbatim && expr.hasOwnProperty(extra.verbatim)) {
            return generateVerbatim(expr, precedence);
        }

        result = this[type](expr, precedence, flags);


        if (extra.comment) {
            result = addComments(expr,result);
        }
        return toSourceNodeWhenNeeded(result, expr);
    };

    CodeGenerator.prototype.generateStatement = function (stmt, flags) {
        var result,
            fragment;

        result = this[stmt.type](stmt, flags);

        // Attach comments

        if (extra.comment) {
            result = addComments(stmt, result);
        }

        fragment = toSourceNodeWhenNeeded(result).toString();
        if (stmt.type === Syntax.Program && !safeConcatenation && newline === '' &&  fragment.charAt(fragment.length - 1) === '\n') {
            result = sourceMap ? toSourceNodeWhenNeeded(result).replaceRight(/\s+$/, '') : fragment.replace(/\s+$/, '');
        }

        return toSourceNodeWhenNeeded(result, stmt);
    };

    function generateInternal(node) {
        var codegen;

        codegen = new CodeGenerator();
        if (isStatement(node)) {
            return codegen.generateStatement(node, S_TFFF);
        }

        if (isExpression(node)) {
            return codegen.generateExpression(node, Precedence.Sequence, E_TTT);
        }

        throw new Error('Unknown node type: ' + node.type);
    }

    function generate(node, options) {
        var defaultOptions = getDefaultOptions(), result, pair;

        if (options != null) {
            // Obsolete options
            //
            //   `options.indent`
            //   `options.base`
            //
            // Instead of them, we can use `option.format.indent`.
            if (typeof options.indent === 'string') {
                defaultOptions.format.indent.style = options.indent;
            }
            if (typeof options.base === 'number') {
                defaultOptions.format.indent.base = options.base;
            }
            options = updateDeeply(defaultOptions, options);
            indent = options.format.indent.style;
            if (typeof options.base === 'string') {
                base = options.base;
            } else {
                base = stringRepeat(indent, options.format.indent.base);
            }
        } else {
            options = defaultOptions;
            indent = options.format.indent.style;
            base = stringRepeat(indent, options.format.indent.base);
        }
        json = options.format.json;
        renumber = options.format.renumber;
        hexadecimal = json ? false : options.format.hexadecimal;
        quotes = json ? 'double' : options.format.quotes;
        escapeless = options.format.escapeless;
        newline = options.format.newline;
        space = options.format.space;
        if (options.format.compact) {
            newline = space = indent = base = '';
        }
        parentheses = options.format.parentheses;
        semicolons = options.format.semicolons;
        safeConcatenation = options.format.safeConcatenation;
        directive = options.directive;
        parse = json ? null : options.parse;
        sourceMap = options.sourceMap;
        sourceCode = options.sourceCode;
        preserveBlankLines = options.format.preserveBlankLines && sourceCode !== null;
        extra = options;

        if (sourceMap) {
            if (!exports.browser) {
                // We assume environment is node.js
                // And prevent from including source-map by browserify
                SourceNode = require('source-map').SourceNode;
            } else {
                SourceNode = global.sourceMap.SourceNode;
            }
        }

        result = generateInternal(node);

        if (!sourceMap) {
            pair = {code: result.toString(), map: null};
            return options.sourceMapWithCode ? pair : pair.code;
        }


        pair = result.toStringWithSourceMap({
            file: options.file,
            sourceRoot: options.sourceMapRoot
        });

        if (options.sourceContent) {
            pair.map.setSourceContent(options.sourceMap,
                                      options.sourceContent);
        }

        if (options.sourceMapWithCode) {
            return pair;
        }

        return pair.map.toString();
    }

    FORMAT_MINIFY = {
        indent: {
            style: '',
            base: 0
        },
        renumber: true,
        hexadecimal: true,
        quotes: 'auto',
        escapeless: true,
        compact: true,
        parentheses: false,
        semicolons: false
    };

    FORMAT_DEFAULTS = getDefaultOptions().format;

    exports.version = require('./package.json').version;
    exports.generate = generate;
    exports.attachComments = estraverse.attachComments;
    exports.Precedence = updateDeeply({}, Precedence);
    exports.browser = false;
    exports.FORMAT_MINIFY = FORMAT_MINIFY;
    exports.FORMAT_DEFAULTS = FORMAT_DEFAULTS;
}());
/* vim: set sw=4 ts=4 et tw=80 : */

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./package.json":56,"estraverse":55,"esutils":66,"source-map":85}],55:[function(require,module,exports){
/*
  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
/*jslint vars:false, bitwise:true*/
/*jshint indent:4*/
/*global exports:true, define:true*/
(function (root, factory) {
    'use strict';

    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,
    // and plain browser loading,
    if (typeof define === 'function' && define.amd) {
        define(['exports'], factory);
    } else if (typeof exports !== 'undefined') {
        factory(exports);
    } else {
        factory((root.estraverse = {}));
    }
}(this, function clone(exports) {
    'use strict';

    var Syntax,
        isArray,
        VisitorOption,
        VisitorKeys,
        objectCreate,
        objectKeys,
        BREAK,
        SKIP,
        REMOVE;

    function ignoreJSHintError() { }

    isArray = Array.isArray;
    if (!isArray) {
        isArray = function isArray(array) {
            return Object.prototype.toString.call(array) === '[object Array]';
        };
    }

    function deepCopy(obj) {
        var ret = {}, key, val;
        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                val = obj[key];
                if (typeof val === 'object' && val !== null) {
                    ret[key] = deepCopy(val);
                } else {
                    ret[key] = val;
                }
            }
        }
        return ret;
    }

    function shallowCopy(obj) {
        var ret = {}, key;
        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                ret[key] = obj[key];
            }
        }
        return ret;
    }
    ignoreJSHintError(shallowCopy);

    // based on LLVM libc++ upper_bound / lower_bound
    // MIT License

    function upperBound(array, func) {
        var diff, len, i, current;

        len = array.length;
        i = 0;

        while (len) {
            diff = len >>> 1;
            current = i + diff;
            if (func(array[current])) {
                len = diff;
            } else {
                i = current + 1;
                len -= diff + 1;
            }
        }
        return i;
    }

    function lowerBound(array, func) {
        var diff, len, i, current;

        len = array.length;
        i = 0;

        while (len) {
            diff = len >>> 1;
            current = i + diff;
            if (func(array[current])) {
                i = current + 1;
                len -= diff + 1;
            } else {
                len = diff;
            }
        }
        return i;
    }
    ignoreJSHintError(lowerBound);

    objectCreate = Object.create || (function () {
        function F() { }

        return function (o) {
            F.prototype = o;
            return new F();
        };
    })();

    objectKeys = Object.keys || function (o) {
        var keys = [], key;
        for (key in o) {
            keys.push(key);
        }
        return keys;
    };

    function extend(to, from) {
        var keys = objectKeys(from), key, i, len;
        for (i = 0, len = keys.length; i < len; i += 1) {
            key = keys[i];
            to[key] = from[key];
        }
        return to;
    }

    Syntax = {
        AssignmentExpression: 'AssignmentExpression',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        AwaitExpression: 'AwaitExpression', // CAUTION: It's deferred to ES7.
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ComprehensionBlock: 'ComprehensionBlock',  // CAUTION: It's deferred to ES7.
        ComprehensionExpression: 'ComprehensionExpression',  // CAUTION: It's deferred to ES7.
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DebuggerStatement: 'DebuggerStatement',
        DirectiveStatement: 'DirectiveStatement',
        DoWhileStatement: 'DoWhileStatement',
        EmptyStatement: 'EmptyStatement',
        ExportBatchSpecifier: 'ExportBatchSpecifier',
        ExportDeclaration: 'ExportDeclaration',
        ExportSpecifier: 'ExportSpecifier',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForInStatement: 'ForInStatement',
        ForOfStatement: 'ForOfStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        GeneratorExpression: 'GeneratorExpression',  // CAUTION: It's deferred to ES7.
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportDeclaration: 'ImportDeclaration',
        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
        ImportSpecifier: 'ImportSpecifier',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MethodDefinition: 'MethodDefinition',
        ModuleSpecifier: 'ModuleSpecifier',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        Program: 'Program',
        Property: 'Property',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SpreadElement: 'SpreadElement',
        SwitchStatement: 'SwitchStatement',
        SwitchCase: 'SwitchCase',
        TaggedTemplateExpression: 'TaggedTemplateExpression',
        TemplateElement: 'TemplateElement',
        TemplateLiteral: 'TemplateLiteral',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression'
    };

    VisitorKeys = {
        AssignmentExpression: ['left', 'right'],
        ArrayExpression: ['elements'],
        ArrayPattern: ['elements'],
        ArrowFunctionExpression: ['params', 'defaults', 'rest', 'body'],
        AwaitExpression: ['argument'], // CAUTION: It's deferred to ES7.
        BlockStatement: ['body'],
        BinaryExpression: ['left', 'right'],
        BreakStatement: ['label'],
        CallExpression: ['callee', 'arguments'],
        CatchClause: ['param', 'body'],
        ClassBody: ['body'],
        ClassDeclaration: ['id', 'body', 'superClass'],
        ClassExpression: ['id', 'body', 'superClass'],
        ComprehensionBlock: ['left', 'right'],  // CAUTION: It's deferred to ES7.
        ComprehensionExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.
        ConditionalExpression: ['test', 'consequent', 'alternate'],
        ContinueStatement: ['label'],
        DebuggerStatement: [],
        DirectiveStatement: [],
        DoWhileStatement: ['body', 'test'],
        EmptyStatement: [],
        ExportBatchSpecifier: [],
        ExportDeclaration: ['declaration', 'specifiers', 'source'],
        ExportSpecifier: ['id', 'name'],
        ExpressionStatement: ['expression'],
        ForStatement: ['init', 'test', 'update', 'body'],
        ForInStatement: ['left', 'right', 'body'],
        ForOfStatement: ['left', 'right', 'body'],
        FunctionDeclaration: ['id', 'params', 'defaults', 'rest', 'body'],
        FunctionExpression: ['id', 'params', 'defaults', 'rest', 'body'],
        GeneratorExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.
        Identifier: [],
        IfStatement: ['test', 'consequent', 'alternate'],
        ImportDeclaration: ['specifiers', 'source'],
        ImportDefaultSpecifier: ['id'],
        ImportNamespaceSpecifier: ['id'],
        ImportSpecifier: ['id', 'name'],
        Literal: [],
        LabeledStatement: ['label', 'body'],
        LogicalExpression: ['left', 'right'],
        MemberExpression: ['object', 'property'],
        MethodDefinition: ['key', 'value'],
        ModuleSpecifier: [],
        NewExpression: ['callee', 'arguments'],
        ObjectExpression: ['properties'],
        ObjectPattern: ['properties'],
        Program: ['body'],
        Property: ['key', 'value'],
        ReturnStatement: ['argument'],
        SequenceExpression: ['expressions'],
        SpreadElement: ['argument'],
        SwitchStatement: ['discriminant', 'cases'],
        SwitchCase: ['test', 'consequent'],
        TaggedTemplateExpression: ['tag', 'quasi'],
        TemplateElement: [],
        TemplateLiteral: ['quasis', 'expressions'],
        ThisExpression: [],
        ThrowStatement: ['argument'],
        TryStatement: ['block', 'handlers', 'handler', 'guardedHandlers', 'finalizer'],
        UnaryExpression: ['argument'],
        UpdateExpression: ['argument'],
        VariableDeclaration: ['declarations'],
        VariableDeclarator: ['id', 'init'],
        WhileStatement: ['test', 'body'],
        WithStatement: ['object', 'body'],
        YieldExpression: ['argument']
    };

    // unique id
    BREAK = {};
    SKIP = {};
    REMOVE = {};

    VisitorOption = {
        Break: BREAK,
        Skip: SKIP,
        Remove: REMOVE
    };

    function Reference(parent, key) {
        this.parent = parent;
        this.key = key;
    }

    Reference.prototype.replace = function replace(node) {
        this.parent[this.key] = node;
    };

    Reference.prototype.remove = function remove() {
        if (isArray(this.parent)) {
            this.parent.splice(this.key, 1);
            return true;
        } else {
            this.replace(null);
            return false;
        }
    };

    function Element(node, path, wrap, ref) {
        this.node = node;
        this.path = path;
        this.wrap = wrap;
        this.ref = ref;
    }

    function Controller() { }

    // API:
    // return property path array from root to current node
    Controller.prototype.path = function path() {
        var i, iz, j, jz, result, element;

        function addToPath(result, path) {
            if (isArray(path)) {
                for (j = 0, jz = path.length; j < jz; ++j) {
                    result.push(path[j]);
                }
            } else {
                result.push(path);
            }
        }

        // root node
        if (!this.__current.path) {
            return null;
        }

        // first node is sentinel, second node is root element
        result = [];
        for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {
            element = this.__leavelist[i];
            addToPath(result, element.path);
        }
        addToPath(result, this.__current.path);
        return result;
    };

    // API:
    // return type of current node
    Controller.prototype.type = function () {
        var node = this.current();
        return node.type || this.__current.wrap;
    };

    // API:
    // return array of parent elements
    Controller.prototype.parents = function parents() {
        var i, iz, result;

        // first node is sentinel
        result = [];
        for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {
            result.push(this.__leavelist[i].node);
        }

        return result;
    };

    // API:
    // return current node
    Controller.prototype.current = function current() {
        return this.__current.node;
    };

    Controller.prototype.__execute = function __execute(callback, element) {
        var previous, result;

        result = undefined;

        previous  = this.__current;
        this.__current = element;
        this.__state = null;
        if (callback) {
            result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);
        }
        this.__current = previous;

        return result;
    };

    // API:
    // notify control skip / break
    Controller.prototype.notify = function notify(flag) {
        this.__state = flag;
    };

    // API:
    // skip child nodes of current node
    Controller.prototype.skip = function () {
        this.notify(SKIP);
    };

    // API:
    // break traversals
    Controller.prototype['break'] = function () {
        this.notify(BREAK);
    };

    // API:
    // remove node
    Controller.prototype.remove = function () {
        this.notify(REMOVE);
    };

    Controller.prototype.__initialize = function(root, visitor) {
        this.visitor = visitor;
        this.root = root;
        this.__worklist = [];
        this.__leavelist = [];
        this.__current = null;
        this.__state = null;
        this.__fallback = visitor.fallback === 'iteration';
        this.__keys = VisitorKeys;
        if (visitor.keys) {
            this.__keys = extend(objectCreate(this.__keys), visitor.keys);
        }
    };

    function isNode(node) {
        if (node == null) {
            return false;
        }
        return typeof node === 'object' && typeof node.type === 'string';
    }

    function isProperty(nodeType, key) {
        return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === key;
    }

    Controller.prototype.traverse = function traverse(root, visitor) {
        var worklist,
            leavelist,
            element,
            node,
            nodeType,
            ret,
            key,
            current,
            current2,
            candidates,
            candidate,
            sentinel;

        this.__initialize(root, visitor);

        sentinel = {};

        // reference
        worklist = this.__worklist;
        leavelist = this.__leavelist;

        // initialize
        worklist.push(new Element(root, null, null, null));
        leavelist.push(new Element(null, null, null, null));

        while (worklist.length) {
            element = worklist.pop();

            if (element === sentinel) {
                element = leavelist.pop();

                ret = this.__execute(visitor.leave, element);

                if (this.__state === BREAK || ret === BREAK) {
                    return;
                }
                continue;
            }

            if (element.node) {

                ret = this.__execute(visitor.enter, element);

                if (this.__state === BREAK || ret === BREAK) {
                    return;
                }

                worklist.push(sentinel);
                leavelist.push(element);

                if (this.__state === SKIP || ret === SKIP) {
                    continue;
                }

                node = element.node;
                nodeType = element.wrap || node.type;
                candidates = this.__keys[nodeType];
                if (!candidates) {
                    if (this.__fallback) {
                        candidates = objectKeys(node);
                    } else {
                        throw new Error('Unknown node type ' + nodeType + '.');
                    }
                }

                current = candidates.length;
                while ((current -= 1) >= 0) {
                    key = candidates[current];
                    candidate = node[key];
                    if (!candidate) {
                        continue;
                    }

                    if (isArray(candidate)) {
                        current2 = candidate.length;
                        while ((current2 -= 1) >= 0) {
                            if (!candidate[current2]) {
                                continue;
                            }
                            if (isProperty(nodeType, candidates[current])) {
                                element = new Element(candidate[current2], [key, current2], 'Property', null);
                            } else if (isNode(candidate[current2])) {
                                element = new Element(candidate[current2], [key, current2], null, null);
                            } else {
                                continue;
                            }
                            worklist.push(element);
                        }
                    } else if (isNode(candidate)) {
                        worklist.push(new Element(candidate, key, null, null));
                    }
                }
            }
        }
    };

    Controller.prototype.replace = function replace(root, visitor) {
        function removeElem(element) {
            var i,
                key,
                nextElem,
                parent;

            if (element.ref.remove()) {
                // When the reference is an element of an array.
                key = element.ref.key;
                parent = element.ref.parent;

                // If removed from array, then decrease following items' keys.
                i = worklist.length;
                while (i--) {
                    nextElem = worklist[i];
                    if (nextElem.ref && nextElem.ref.parent === parent) {
                        if  (nextElem.ref.key < key) {
                            break;
                        }
                        --nextElem.ref.key;
                    }
                }
            }
        }

        var worklist,
            leavelist,
            node,
            nodeType,
            target,
            element,
            current,
            current2,
            candidates,
            candidate,
            sentinel,
            outer,
            key;

        this.__initialize(root, visitor);

        sentinel = {};

        // reference
        worklist = this.__worklist;
        leavelist = this.__leavelist;

        // initialize
        outer = {
            root: root
        };
        element = new Element(root, null, null, new Reference(outer, 'root'));
        worklist.push(element);
        leavelist.push(element);

        while (worklist.length) {
            element = worklist.pop();

            if (element === sentinel) {
                element = leavelist.pop();

                target = this.__execute(visitor.leave, element);

                // node may be replaced with null,
                // so distinguish between undefined and null in this place
                if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
                    // replace
                    element.ref.replace(target);
                }

                if (this.__state === REMOVE || target === REMOVE) {
                    removeElem(element);
                }

                if (this.__state === BREAK || target === BREAK) {
                    return outer.root;
                }
                continue;
            }

            target = this.__execute(visitor.enter, element);

            // node may be replaced with null,
            // so distinguish between undefined and null in this place
            if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
                // replace
                element.ref.replace(target);
                element.node = target;
            }

            if (this.__state === REMOVE || target === REMOVE) {
                removeElem(element);
                element.node = null;
            }

            if (this.__state === BREAK || target === BREAK) {
                return outer.root;
            }

            // node may be null
            node = element.node;
            if (!node) {
                continue;
            }

            worklist.push(sentinel);
            leavelist.push(element);

            if (this.__state === SKIP || target === SKIP) {
                continue;
            }

            nodeType = element.wrap || node.type;
            candidates = this.__keys[nodeType];
            if (!candidates) {
                if (this.__fallback) {
                    candidates = objectKeys(node);
                } else {
                    throw new Error('Unknown node type ' + nodeType + '.');
                }
            }

            current = candidates.length;
            while ((current -= 1) >= 0) {
                key = candidates[current];
                candidate = node[key];
                if (!candidate) {
                    continue;
                }

                if (isArray(candidate)) {
                    current2 = candidate.length;
                    while ((current2 -= 1) >= 0) {
                        if (!candidate[current2]) {
                            continue;
                        }
                        if (isProperty(nodeType, candidates[current])) {
                            element = new Element(candidate[current2], [key, current2], 'Property', new Reference(candidate, current2));
                        } else if (isNode(candidate[current2])) {
                            element = new Element(candidate[current2], [key, current2], null, new Reference(candidate, current2));
                        } else {
                            continue;
                        }
                        worklist.push(element);
                    }
                } else if (isNode(candidate)) {
                    worklist.push(new Element(candidate, key, null, new Reference(node, key)));
                }
            }
        }

        return outer.root;
    };

    function traverse(root, visitor) {
        var controller = new Controller();
        return controller.traverse(root, visitor);
    }

    function replace(root, visitor) {
        var controller = new Controller();
        return controller.replace(root, visitor);
    }

    function extendCommentRange(comment, tokens) {
        var target;

        target = upperBound(tokens, function search(token) {
            return token.range[0] > comment.range[0];
        });

        comment.extendedRange = [comment.range[0], comment.range[1]];

        if (target !== tokens.length) {
            comment.extendedRange[1] = tokens[target].range[0];
        }

        target -= 1;
        if (target >= 0) {
            comment.extendedRange[0] = tokens[target].range[1];
        }

        return comment;
    }

    function attachComments(tree, providedComments, tokens) {
        // At first, we should calculate extended comment ranges.
        var comments = [], comment, len, i, cursor;

        if (!tree.range) {
            throw new Error('attachComments needs range information');
        }

        // tokens array is empty, we attach comments to tree as 'leadingComments'
        if (!tokens.length) {
            if (providedComments.length) {
                for (i = 0, len = providedComments.length; i < len; i += 1) {
                    comment = deepCopy(providedComments[i]);
                    comment.extendedRange = [0, tree.range[0]];
                    comments.push(comment);
                }
                tree.leadingComments = comments;
            }
            return tree;
        }

        for (i = 0, len = providedComments.length; i < len; i += 1) {
            comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));
        }

        // This is based on John Freeman's implementation.
        cursor = 0;
        traverse(tree, {
            enter: function (node) {
                var comment;

                while (cursor < comments.length) {
                    comment = comments[cursor];
                    if (comment.extendedRange[1] > node.range[0]) {
                        break;
                    }

                    if (comment.extendedRange[1] === node.range[0]) {
                        if (!node.leadingComments) {
                            node.leadingComments = [];
                        }
                        node.leadingComments.push(comment);
                        comments.splice(cursor, 1);
                    } else {
                        cursor += 1;
                    }
                }

                // already out of owned node
                if (cursor === comments.length) {
                    return VisitorOption.Break;
                }

                if (comments[cursor].extendedRange[0] > node.range[1]) {
                    return VisitorOption.Skip;
                }
            }
        });

        cursor = 0;
        traverse(tree, {
            leave: function (node) {
                var comment;

                while (cursor < comments.length) {
                    comment = comments[cursor];
                    if (node.range[1] < comment.extendedRange[0]) {
                        break;
                    }

                    if (node.range[1] === comment.extendedRange[0]) {
                        if (!node.trailingComments) {
                            node.trailingComments = [];
                        }
                        node.trailingComments.push(comment);
                        comments.splice(cursor, 1);
                    } else {
                        cursor += 1;
                    }
                }

                // already out of owned node
                if (cursor === comments.length) {
                    return VisitorOption.Break;
                }

                if (comments[cursor].extendedRange[0] > node.range[1]) {
                    return VisitorOption.Skip;
                }
            }
        });

        return tree;
    }

    exports.version = '1.8.1-dev';
    exports.Syntax = Syntax;
    exports.traverse = traverse;
    exports.replace = replace;
    exports.attachComments = attachComments;
    exports.VisitorKeys = VisitorKeys;
    exports.VisitorOption = VisitorOption;
    exports.Controller = Controller;
    exports.cloneEnvironment = function () { return clone({}); };

    return exports;
}));
/* vim: set sw=4 ts=4 et tw=80 : */

},{}],56:[function(require,module,exports){
module.exports={
  "_args": [
    [
      {
        "name": "escodegen",
        "raw": "escodegen@1.6.1",
        "rawSpec": "1.6.1",
        "scope": null,
        "spec": "1.6.1",
        "type": "version"
      },
      "/Users/jan/development/shadejs"
    ]
  ],
  "_from": "escodegen@1.6.1",
  "_id": "escodegen@1.6.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/escodegen",
  "_npmUser": {
    "email": "utatane.tea@gmail.com",
    "name": "constellation"
  },
  "_npmVersion": "2.0.0-alpha-5",
  "_phantomChildren": {},
  "_requested": {
    "name": "escodegen",
    "raw": "escodegen@1.6.1",
    "rawSpec": "1.6.1",
    "scope": null,
    "spec": "1.6.1",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/escodegen/-/escodegen-1.6.1.tgz",
  "_shasum": "367de17d8510540d12bc6dcb8b3f918391265815",
  "_shrinkwrap": null,
  "_spec": "escodegen@1.6.1",
  "_where": "/Users/jan/development/shadejs",
  "bin": {
    "escodegen": "./bin/escodegen.js",
    "esgenerate": "./bin/esgenerate.js"
  },
  "bugs": {
    "url": "https://github.com/estools/escodegen/issues"
  },
  "dependencies": {
    "esprima": "^1.2.2",
    "estraverse": "^1.9.1",
    "esutils": "^1.1.6",
    "optionator": "^0.5.0",
    "source-map": "~0.1.40"
  },
  "description": "ECMAScript code generator",
  "devDependencies": {
    "acorn-6to5": "^0.11.1-25",
    "bluebird": "^2.3.11",
    "bower-registry-client": "^0.2.1",
    "chai": "^1.10.0",
    "commonjs-everywhere": "^0.9.7",
    "esprima-moz": "*",
    "gulp": "^3.8.10",
    "gulp-eslint": "^0.2.0",
    "gulp-mocha": "^2.0.0",
    "semver": "^4.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "367de17d8510540d12bc6dcb8b3f918391265815",
    "tarball": "https://registry.npmjs.org/escodegen/-/escodegen-1.6.1.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "files": [
    "LICENSE.BSD",
    "LICENSE.source-map",
    "README.md",
    "bin",
    "escodegen.js",
    "package.json"
  ],
  "gitHead": "1ca664f68dcf220b76c9dc562b2337c5e0b4227d",
  "homepage": "http://github.com/estools/escodegen",
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/estools/escodegen/raw/master/LICENSE.BSD"
    }
  ],
  "main": "escodegen.js",
  "maintainers": [
    {
      "email": "utatane.tea@gmail.com",
      "name": "constellation"
    }
  ],
  "name": "escodegen",
  "optionalDependencies": {
    "source-map": "~0.1.40"
  },
  "readme": "ERROR: No README data found!",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/estools/escodegen.git"
  },
  "scripts": {
    "build": "cjsify -a path: tools/entry-point.js > escodegen.browser.js",
    "build-min": "cjsify -ma path: tools/entry-point.js > escodegen.browser.min.js",
    "lint": "gulp lint",
    "release": "node tools/release.js",
    "test": "gulp travis",
    "unit-test": "gulp test"
  },
  "version": "1.6.1"
}

},{}],57:[function(require,module,exports){

module.exports = dot;

function dot(cfg, options) {
	options = options || {};
	var counter = options.counter || 0;
	var source = options.source;

	var output = [];
	var nodes = cfg[2];
	var i;
	var node;

	// print all the nodes:
	for (i = 0; i < nodes.length; i++) {
		node = nodes[i];
		var label = node.label || node.type;
		if (!label && source && node.astNode.range) {
			var ast = node.astNode;
			var range = ast.range;
			var add = '';
			// special case some statements to get them properly printed
			if (ast.type === 'SwitchCase') {
				if (ast.test) {
					range = [range[0], ast.test.range[1]];
					add = ':';
				} else {
					range = [range[0], range[0]];
					add ='default:';
				}
			} else if (ast.type === 'ForInStatement') {
				range = [range[0], ast.right.range[1]];
				add = ')';
			} else if (ast.type === 'CatchClause') {
				range = [range[0], ast.param.range[1]];
				add = ')';
			}

			label = source.slice(range[0], range[1])
				.replace(/\n/g, '\\n')
				.replace(/\t/g, '    ')
				.replace(/"/g, '\\"') + add;
		}
		if (!label && node.astNode) {
			label = node.astNode.type;
		}
		output.push('n' + (counter + i) + ' [label="' + label + '"');
		if (~['entry', 'exit'].indexOf(node.type))
			output.push(', style="rounded"');
		output.push(']\n');
	}

	// print all the edges:
	for (i = 0; i < nodes.length; i++) {
		node = nodes[i];
		['normal', 'true', 'false', 'exception'].forEach(eachType);
	}
	function eachType(type) {
		var next = node[type];
		if (!next)
			return;

		output.push('n' + (counter + i) + ' -> n' + (counter + nodes.indexOf(next)) + ' [');
		if (type === 'exception')
			output.push('color="red", label="exception"');
		else if (~['true', 'false'].indexOf(type))
			output.push('label="' + type + '"');
		output.push(']\n');
	}

	if (options.counter !== undefined)
		options.counter+= nodes.length;

	return output.join('');
}


},{}],58:[function(require,module,exports){

var walker = require('walkes');

module.exports = ControlFlowGraph;
module.exports.dot = require('./dot');

// FIXME: switch/case with default before other cases?
// FIXME: catch creates a new scope, so should somehow be handled differently

// TODO: try/finally: finally follows try, but does not return to normal flow?

// TODO: labeled break/continue
// TODO: WithStatement

// TODO: avoid adding and deleting properties on ast nodes

/**
 * Returns [entry, exit] `FlowNode`s for the passed in AST
 */
function ControlFlowGraph(astNode, options) {
	options = options || {};
	var parentStack = [];
	var exitNode = new FlowNode(undefined, undefined, 'exit');
	var catchStack = [exitNode];
	var omitExceptions = !!options.omitExceptions;

	createNodes(astNode);
	linkSiblings(astNode);
	
	walker(astNode, {
		CatchClause: function (node, recurse) {
			node.cfg.connect(getEntry(node.body));
			recurse(node.body);
		},
		DoWhileStatement: function (node, recurse) {
			mayThrow(node.test);
			node.test.cfg
				.connect(getEntry(node.body), 'true')
				.connect(getSuccessor(node), 'false');
			recurse(node.body);
		},
		ExpressionStatement: connectNext,
		FunctionDeclaration: function () {},
		ForStatement: function (node, recurse) {
			if (node.test) {
				mayThrow(node.test);
				node.test.cfg
					.connect(getEntry(node.body), 'true')
					.connect(getSuccessor(node), 'false');
				if (node.update)
					node.update.cfg.connect(node.test.cfg);
			} else if (node.update)
				node.update.cfg.connect(getEntry(node.body));
			if (node.update)
				mayThrow(node.update);
			if (node.init) {
				mayThrow(node.init);
				node.init.cfg.connect(node.test && node.test.cfg || getEntry(node.body));
			}
			recurse(node.body);
		},
		ForInStatement: function (node, recurse) {
			mayThrow(node);
			node.cfg
				.connect(getEntry(node.body), 'true')
				.connect(getSuccessor(node), 'false');
			recurse(node.body);
		},
		IfStatement: function (node, recurse) {
			recurse(node.consequent);
			mayThrow(node.test);
			node.test.cfg.connect(getEntry(node.consequent), 'true');
			if (node.alternate) {
				recurse(node.alternate);
				node.test.cfg.connect(getEntry(node.alternate), 'false');
			} else {
				node.test.cfg.connect(getSuccessor(node), 'false');
			}
		},
		ReturnStatement: function (node) {
			mayThrow(node);
			node.cfg.connect(exitNode);
		},
		SwitchCase: function (node, recurse) {
			if (node.test) {
				// if this is a real case, connect `true` to the body
				// or the body of the next case
				var check = node;
				while (!check.consequent.length && check.cfg.nextSibling)
					check = check.cfg.nextSibling.astNode;

				node.cfg.connect(check.consequent.length && getEntry(check.consequent[0]) || getSuccessor(node.cfg.parent), 'true');

				// and connect false to the next `case`
				node.cfg.connect(getSuccessor(node), 'false');
			} else {
				// this is the `default` case, connect it to the body, or the
				// successor of the parent
				node.cfg.connect(node.consequent.length && getEntry(node.consequent[0]) || getSuccessor(node.cfg.parent));
			}
			node.consequent.forEach(recurse);
		},
		SwitchStatement: function (node, recurse) {
			node.cfg.connect(node.cases[0].cfg);
			node.cases.forEach(recurse);
		},
		ThrowStatement: function (node) {
			node.cfg.connect(getExceptionTarget(node), 'exception');
		},
		TryStatement: function (node, recurse) {

			var handler = node.handler && node.handler.cfg || getEntry(node.finalizer);
			catchStack.push(handler);
			recurse(node.block);
			catchStack.pop();

			if (node.handler)
				recurse(node.handler);
			if (node.finalizer) {
				//node.finalizer.cfg.connect(getSuccessor(node));
				recurse(node.finalizer);
			}
		},
		VariableDeclaration: connectNext,
		WhileStatement: function (node, recurse) {
			mayThrow(node.test);
			node.test.cfg
				.connect(getEntry(node.body), 'true')
				.connect(getSuccessor(node), 'false');
			recurse(node.body);
		}
	});
	
	var entryNode = new FlowNode(astNode, undefined, 'entry');
	entryNode.normal = getEntry(astNode);
	walker(astNode, {default: function (node, recurse) {
		if (!node.cfg)
			return;
		// ExpressionStatements should refer to their expression directly
		if (node.type === 'ExpressionStatement')
			node.cfg.astNode = node.expression;
		delete node.cfg;
		walker.checkProps(node, recurse);
	}});

	var allNodes = [];
	var reverseStack = [entryNode];
	var cfgNode;
	while (reverseStack.length) {
		cfgNode = reverseStack.pop();
		allNodes.push(cfgNode);
		cfgNode.next = [];
		['exception', 'false', 'true', 'normal'].forEach(eachType);
	}
	function eachType(type) {
		var next = cfgNode[type];
		if (!next)
			return;
		if (!~cfgNode.next.indexOf(next))
			cfgNode.next.push(next);
		if (!~next.prev.indexOf(cfgNode))
			next.prev.push(cfgNode);
		if (!~reverseStack.indexOf(next) && !next.next)
			reverseStack.push(next);
	}

	function getExceptionTarget() {
		return catchStack[catchStack.length - 1];
	}

	function mayThrow(node) {
		if (!omitExceptions && expressionThrows(node))
			node.cfg.connect(getExceptionTarget(node), 'exception');
	}
	function expressionThrows(astNode) {
		if (typeof astNode !== 'object' || 'FunctionExpression' === astNode.type)
			return false;
		if (astNode.type && ~throwTypes.indexOf(astNode.type))
			return true;
		var self = astNode;
		return Object.keys(self).some(function (key) {
			var prop = self[key];
			if (prop instanceof Array) {
				return prop.some(expressionThrows);
			} else if (typeof prop === 'object' && prop)
				return expressionThrows(prop);
			else
				return false;
		});
	}

	function getJumpTarget(astNode, types) {
		var parent = astNode.cfg.parent;
		while (!~types.indexOf(parent.type) && parent.cfg.parent)
			parent = parent.cfg.parent;
		return ~types.indexOf(parent.type) ? parent : null;
	}

	function connectNext(node) {
		mayThrow(node);
		node.cfg.connect(getSuccessor(node));
	}

	/**
	 * Returns the entry node of a statement
	 */
	function getEntry(astNode) {
		var target;
		switch (astNode.type) {
			case 'BreakStatement':
				target = getJumpTarget(astNode, breakTargets);
				return target ? getSuccessor(target) : exitNode;
			case 'ContinueStatement':
				target = getJumpTarget(astNode, continueTargets);
				switch (target.type) {
					case 'ForStatement':
						// continue goes to the update, test or body
						return target.update && target.update.cfg || target.test && target.test.cfg || getEntry(target.body);
					case 'ForInStatement':
						return target.cfg;
					case 'DoWhileStatement':
					/* falls through */
					case 'WhileStatement':
						return target.test.cfg;
				}
			// unreached
			/* falls through */
			case 'BlockStatement':
			/* falls through */
			case 'Program':
				return astNode.body.length && getEntry(astNode.body[0]) || getSuccessor(astNode);
			case 'DoWhileStatement':
				return getEntry(astNode.body);
			case 'EmptyStatement':
				return getSuccessor(astNode);
			case 'ForStatement':
				return astNode.init && astNode.init.cfg || astNode.test && astNode.test.cfg || getEntry(astNode.body);
			case 'FunctionDeclaration':
				return getSuccessor(astNode);
			case 'IfStatement':
				return astNode.test.cfg;
			case 'SwitchStatement':
				return getEntry(astNode.cases[0]);
			case 'TryStatement':
				return getEntry(astNode.block);
			case 'WhileStatement':
				return astNode.test.cfg;
			default:
				return astNode.cfg;
		}
	}
	/**
	 * Returns the successor node of a statement
	 */
	function getSuccessor(astNode) {
		// part of a block -> it already has a nextSibling
		if (astNode.cfg.nextSibling)
			return astNode.cfg.nextSibling;
		var parent = astNode.cfg.parent;
		if (!parent) // it has no parent -> exitNode
			return exitNode;
		switch (parent.type) {
			case 'DoWhileStatement':
				return parent.test.cfg;
			case 'ForStatement':
				return parent.update && parent.update.cfg || parent.test && parent.test.cfg || getEntry(parent.body);
			case 'ForInStatement':
				return parent.cfg;
			case 'TryStatement':
				return parent.finalizer && astNode !== parent.finalizer && getEntry(parent.finalizer) || getSuccessor(parent);
			case 'SwitchCase':
				// the sucessor of a statement at the end of a case block is
				// the entry of the next cases consequent
				if (!parent.cfg.nextSibling)
					return getSuccessor(parent);
				var check = parent.cfg.nextSibling.astNode;
				while (!check.consequent.length && check.cfg.nextSibling)
					check = check.cfg.nextSibling.astNode;
				// or the next statement after the switch, if there are no more cases
				return check.consequent.length && getEntry(check.consequent[0]) || getSuccessor(parent.parent);
			case 'WhileStatement':
				return parent.test.cfg;
			default:
				return getSuccessor(parent);
		}
	}

	/**
	 * Creates a FlowNode for every AST node
	 */
	function createNodes(astNode) {
		walker(astNode, { default: function (node, recurse) {
			var parent = parentStack.length ? parentStack[parentStack.length - 1] : undefined;
			createNode(node, parent);
			// do not recurse for FunctionDeclaration or any sub-expression
			if (node.type === 'FunctionDeclaration' || ~node.type.indexOf('Expression'))
				return;
			parentStack.push(node);
			walker.checkProps(node, recurse);
			parentStack.pop();
		}});
	}
	function createNode(astNode, parent) {
		if (!astNode.cfg)
			Object.defineProperty(astNode, 'cfg', {value: new FlowNode(astNode, parent), configurable: true});
	}

	/**
	 * Links in the next sibling for nodes inside a block
	 */
	function linkSiblings(astNode) {
		function backToFront(list, recurse) {
			// link all the children to the next sibling from back to front,
			// so the nodes already have .nextSibling
			// set when their getEntry is called
			for (var i = list.length - 1; i >= 0; i--) {
				var child = list[i];
				if (i < list.length - 1)
					child.cfg.nextSibling = getEntry(list[i + 1]);
				recurse(child);
			}
		}
		function BlockOrProgram(node, recurse) {
			backToFront(node.body, recurse);
		}
		walker(astNode, {
			BlockStatement: BlockOrProgram,
			Program: BlockOrProgram,
			FunctionDeclaration: function () {},
			FunctionExpression: function () {},
			SwitchCase: function (node, recurse) {
				backToFront(node.consequent, recurse);
			},
			SwitchStatement: function (node, recurse) {
				backToFront(node.cases, recurse);
			},
		});
	}
	return [entryNode, exitNode, allNodes];
}

function FlowNode(astNode, parent, type) {
	this.astNode = astNode;
	this.parent = parent;
	this.type = type;
	this.prev = [];
}
FlowNode.prototype.connect = function (next, type) {
	this[type || 'normal'] = next;
	return this;
};

var continueTargets = [
	'ForStatement',
	'ForInStatement',
	'DoWhileStatement',
	'WhileStatement'];
var breakTargets = continueTargets.concat(['SwitchStatement']);
var throwTypes = [
	'AssignmentExpression', // assigning to undef or non-writable prop
	'BinaryExpression', // instanceof and in on non-objects
	'CallExpression', // obviously
	'MemberExpression', // getters may throw
	'NewExpression', // obviously
	'UnaryExpression' // delete non-deletable prop
];


},{"./dot":57,"walkes":59}],59:[function(require,module,exports){
/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */
"use strict";

module.exports = walker;

function walker(astNode, functionTable, offset) {
	function stop() { throw stop; }
	var recurse = function (astNode) {
		if (!astNode || typeof astNode !== 'object' || !astNode.type) {
			return astNode;
		}

		// range based recursion: only recurse when the astNode is in range
		if (offset !== undefined && astNode.range &&
		    (astNode.range[0] > offset || astNode.range[1] < offset)) {
			return astNode;
		}

		var fn = functionTable[astNode.type] || functionTable.default || checkProps;
		return fn(astNode, recurse, stop);
	};
	var ret;
	try {
		ret = recurse(astNode);
	} catch (e) {
		if (e !== stop)
			throw e;
	}
	return ret;
}

function checkProps(node, recurse) {
	var mapped = {};
	Object.keys(node).forEach(function (key) {
		var prop = node[key];
		var ret = prop;
		if (Array.isArray(prop)) {
			ret = prop.map(recurse);
		} else {
			ret = recurse(prop);
		}

		mapped[key] = ret;
	});
	return mapped;
}

walker.checkProps = checkProps;

},{}],60:[function(require,module,exports){
/*
  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*jslint bitwise:true plusplus:true */
/*global esprima:true, define:true, exports:true, window: true,
throwErrorTolerant: true,
throwError: true, generateStatement: true, peek: true,
parseAssignmentExpression: true, parseBlock: true, parseExpression: true,
parseFunctionDeclaration: true, parseFunctionExpression: true,
parseFunctionSourceElements: true, parseVariableIdentifier: true,
parseLeftHandSideExpression: true,
parseUnaryExpression: true,
parseStatement: true, parseSourceElement: true */

(function (root, factory) {
    'use strict';

    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,
    // Rhino, and plain browser loading.

    /* istanbul ignore next */
    if (typeof define === 'function' && define.amd) {
        define(['exports'], factory);
    } else if (typeof exports !== 'undefined') {
        factory(exports);
    } else {
        factory((root.esprima = {}));
    }
}(this, function (exports) {
    'use strict';

    var Token,
        TokenName,
        FnExprTokens,
        Syntax,
        PropertyKind,
        Messages,
        Regex,
        SyntaxTreeDelegate,
        source,
        strict,
        index,
        lineNumber,
        lineStart,
        length,
        delegate,
        lookahead,
        state,
        extra;

    Token = {
        BooleanLiteral: 1,
        EOF: 2,
        Identifier: 3,
        Keyword: 4,
        NullLiteral: 5,
        NumericLiteral: 6,
        Punctuator: 7,
        StringLiteral: 8,
        RegularExpression: 9
    };

    TokenName = {};
    TokenName[Token.BooleanLiteral] = 'Boolean';
    TokenName[Token.EOF] = '<end>';
    TokenName[Token.Identifier] = 'Identifier';
    TokenName[Token.Keyword] = 'Keyword';
    TokenName[Token.NullLiteral] = 'Null';
    TokenName[Token.NumericLiteral] = 'Numeric';
    TokenName[Token.Punctuator] = 'Punctuator';
    TokenName[Token.StringLiteral] = 'String';
    TokenName[Token.RegularExpression] = 'RegularExpression';

    // A function following one of those tokens is an expression.
    FnExprTokens = ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
                    'return', 'case', 'delete', 'throw', 'void',
                    // assignment operators
                    '=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=',
                    '&=', '|=', '^=', ',',
                    // binary/unary operators
                    '+', '-', '*', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
                    '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
                    '<=', '<', '>', '!=', '!=='];

    Syntax = {
        AssignmentExpression: 'AssignmentExpression',
        ArrayExpression: 'ArrayExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DoWhileStatement: 'DoWhileStatement',
        DebuggerStatement: 'DebuggerStatement',
        EmptyStatement: 'EmptyStatement',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForInStatement: 'ForInStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        Program: 'Program',
        Property: 'Property',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SwitchStatement: 'SwitchStatement',
        SwitchCase: 'SwitchCase',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement'
    };

    PropertyKind = {
        Data: 1,
        Get: 2,
        Set: 4
    };

    // Error messages should be identical to V8.
    Messages = {
        UnexpectedToken:  'Unexpected token %0',
        UnexpectedNumber:  'Unexpected number',
        UnexpectedString:  'Unexpected string',
        UnexpectedIdentifier:  'Unexpected identifier',
        UnexpectedReserved:  'Unexpected reserved word',
        UnexpectedEOS:  'Unexpected end of input',
        NewlineAfterThrow:  'Illegal newline after throw',
        InvalidRegExp: 'Invalid regular expression',
        UnterminatedRegExp:  'Invalid regular expression: missing /',
        InvalidLHSInAssignment:  'Invalid left-hand side in assignment',
        InvalidLHSInForIn:  'Invalid left-hand side in for-in',
        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
        NoCatchOrFinally:  'Missing catch or finally after try',
        UnknownLabel: 'Undefined label \'%0\'',
        Redeclaration: '%0 \'%1\' has already been declared',
        IllegalContinue: 'Illegal continue statement',
        IllegalBreak: 'Illegal break statement',
        IllegalReturn: 'Illegal return statement',
        StrictModeWith:  'Strict mode code may not include a with statement',
        StrictCatchVariable:  'Catch variable may not be eval or arguments in strict mode',
        StrictVarName:  'Variable name may not be eval or arguments in strict mode',
        StrictParamName:  'Parameter name eval or arguments is not allowed in strict mode',
        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
        StrictFunctionName:  'Function name may not be eval or arguments in strict mode',
        StrictOctalLiteral:  'Octal literals are not allowed in strict mode.',
        StrictDelete:  'Delete of an unqualified identifier in strict mode.',
        StrictDuplicateProperty:  'Duplicate data property in object literal not allowed in strict mode',
        AccessorDataProperty:  'Object literal may not have data and accessor property with the same name',
        AccessorGetSet:  'Object literal may not have multiple get/set accessors with the same name',
        StrictLHSAssignment:  'Assignment to eval or arguments is not allowed in strict mode',
        StrictLHSPostfix:  'Postfix increment/decrement may not have eval or arguments operand in strict mode',
        StrictLHSPrefix:  'Prefix increment/decrement may not have eval or arguments operand in strict mode',
        StrictReservedWord:  'Use of future reserved word in strict mode'
    };

    // See also tools/generate-unicode-regex.py.
    Regex = {
        NonAsciiIdentifierStart: new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]'),
        NonAsciiIdentifierPart: new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0\u08A2-\u08AC\u08E4-\u08FE\u0900-\u0963\u0966-\u096F\u0971-\u0977\u0979-\u097F\u0981-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C82\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D02\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191C\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1D00-\u1DE6\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA697\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7B\uAA80-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE26\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]')
    };

    // Ensure the condition is true, otherwise throw an error.
    // This is only to have a better contract semantic, i.e. another safety net
    // to catch a logic error. The condition shall be fulfilled in normal case.
    // Do NOT use this to enforce a certain condition on any user input.

    function assert(condition, message) {
        /* istanbul ignore if */
        if (!condition) {
            throw new Error('ASSERT: ' + message);
        }
    }

    function isDecimalDigit(ch) {
        return (ch >= 48 && ch <= 57);   // 0..9
    }

    function isHexDigit(ch) {
        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
    }

    function isOctalDigit(ch) {
        return '01234567'.indexOf(ch) >= 0;
    }


    // 7.2 White Space

    function isWhiteSpace(ch) {
        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||
            (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);
    }

    // 7.3 Line Terminators

    function isLineTerminator(ch) {
        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);
    }

    // 7.6 Identifier Names and Identifiers

    function isIdentifierStart(ch) {
        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)
            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z
            (ch >= 0x61 && ch <= 0x7A) ||         // a..z
            (ch === 0x5C) ||                      // \ (backslash)
            ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(String.fromCharCode(ch)));
    }

    function isIdentifierPart(ch) {
        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)
            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z
            (ch >= 0x61 && ch <= 0x7A) ||         // a..z
            (ch >= 0x30 && ch <= 0x39) ||         // 0..9
            (ch === 0x5C) ||                      // \ (backslash)
            ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(String.fromCharCode(ch)));
    }

    // 7.6.1.2 Future Reserved Words

    function isFutureReservedWord(id) {
        switch (id) {
        case 'class':
        case 'enum':
        case 'export':
        case 'extends':
        case 'import':
        case 'super':
            return true;
        default:
            return false;
        }
    }

    function isStrictModeReservedWord(id) {
        switch (id) {
        case 'implements':
        case 'interface':
        case 'package':
        case 'private':
        case 'protected':
        case 'public':
        case 'static':
        case 'yield':
        case 'let':
            return true;
        default:
            return false;
        }
    }

    function isRestrictedWord(id) {
        return id === 'eval' || id === 'arguments';
    }

    // 7.6.1.1 Keywords

    function isKeyword(id) {
        if (strict && isStrictModeReservedWord(id)) {
            return true;
        }

        // 'const' is specialized as Keyword in V8.
        // 'yield' and 'let' are for compatiblity with SpiderMonkey and ES.next.
        // Some others are from future reserved words.

        switch (id.length) {
        case 2:
            return (id === 'if') || (id === 'in') || (id === 'do');
        case 3:
            return (id === 'var') || (id === 'for') || (id === 'new') ||
                (id === 'try') || (id === 'let');
        case 4:
            return (id === 'this') || (id === 'else') || (id === 'case') ||
                (id === 'void') || (id === 'with') || (id === 'enum');
        case 5:
            return (id === 'while') || (id === 'break') || (id === 'catch') ||
                (id === 'throw') || (id === 'const') || (id === 'yield') ||
                (id === 'class') || (id === 'super');
        case 6:
            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
                (id === 'switch') || (id === 'export') || (id === 'import');
        case 7:
            return (id === 'default') || (id === 'finally') || (id === 'extends');
        case 8:
            return (id === 'function') || (id === 'continue') || (id === 'debugger');
        case 10:
            return (id === 'instanceof');
        default:
            return false;
        }
    }

    // 7.4 Comments

    function addComment(type, value, start, end, loc) {
        var comment, attacher;

        assert(typeof start === 'number', 'Comment must have valid position');

        // Because the way the actual token is scanned, often the comments
        // (if any) are skipped twice during the lexical analysis.
        // Thus, we need to skip adding a comment if the comment array already
        // handled it.
        if (state.lastCommentStart >= start) {
            return;
        }
        state.lastCommentStart = start;

        comment = {
            type: type,
            value: value
        };
        if (extra.range) {
            comment.range = [start, end];
        }
        if (extra.loc) {
            comment.loc = loc;
        }
        extra.comments.push(comment);
        if (extra.attachComment) {
            extra.leadingComments.push(comment);
            extra.trailingComments.push(comment);
        }
    }

    function skipSingleLineComment(offset) {
        var start, loc, ch, comment;

        start = index - offset;
        loc = {
            start: {
                line: lineNumber,
                column: index - lineStart - offset
            }
        };

        while (index < length) {
            ch = source.charCodeAt(index);
            ++index;
            if (isLineTerminator(ch)) {
                if (extra.comments) {
                    comment = source.slice(start + offset, index - 1);
                    loc.end = {
                        line: lineNumber,
                        column: index - lineStart - 1
                    };
                    addComment('Line', comment, start, index - 1, loc);
                }
                if (ch === 13 && source.charCodeAt(index) === 10) {
                    ++index;
                }
                ++lineNumber;
                lineStart = index;
                return;
            }
        }

        if (extra.comments) {
            comment = source.slice(start + offset, index);
            loc.end = {
                line: lineNumber,
                column: index - lineStart
            };
            addComment('Line', comment, start, index, loc);
        }
    }

    function skipMultiLineComment() {
        var start, loc, ch, comment;

        if (extra.comments) {
            start = index - 2;
            loc = {
                start: {
                    line: lineNumber,
                    column: index - lineStart - 2
                }
            };
        }

        while (index < length) {
            ch = source.charCodeAt(index);
            if (isLineTerminator(ch)) {
                if (ch === 0x0D && source.charCodeAt(index + 1) === 0x0A) {
                    ++index;
                }
                ++lineNumber;
                ++index;
                lineStart = index;
                if (index >= length) {
                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                }
            } else if (ch === 0x2A) {
                // Block comment ends with '*/'.
                if (source.charCodeAt(index + 1) === 0x2F) {
                    ++index;
                    ++index;
                    if (extra.comments) {
                        comment = source.slice(start + 2, index - 2);
                        loc.end = {
                            line: lineNumber,
                            column: index - lineStart
                        };
                        addComment('Block', comment, start, index, loc);
                    }
                    return;
                }
                ++index;
            } else {
                ++index;
            }
        }

        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
    }

    function skipComment() {
        var ch, start;

        start = (index === 0);
        while (index < length) {
            ch = source.charCodeAt(index);

            if (isWhiteSpace(ch)) {
                ++index;
            } else if (isLineTerminator(ch)) {
                ++index;
                if (ch === 0x0D && source.charCodeAt(index) === 0x0A) {
                    ++index;
                }
                ++lineNumber;
                lineStart = index;
                start = true;
            } else if (ch === 0x2F) { // U+002F is '/'
                ch = source.charCodeAt(index + 1);
                if (ch === 0x2F) {
                    ++index;
                    ++index;
                    skipSingleLineComment(2);
                    start = true;
                } else if (ch === 0x2A) {  // U+002A is '*'
                    ++index;
                    ++index;
                    skipMultiLineComment();
                } else {
                    break;
                }
            } else if (start && ch === 0x2D) { // U+002D is '-'
                // U+003E is '>'
                if ((source.charCodeAt(index + 1) === 0x2D) && (source.charCodeAt(index + 2) === 0x3E)) {
                    // '-->' is a single-line comment
                    index += 3;
                    skipSingleLineComment(3);
                } else {
                    break;
                }
            } else if (ch === 0x3C) { // U+003C is '<'
                if (source.slice(index + 1, index + 4) === '!--') {
                    ++index; // `<`
                    ++index; // `!`
                    ++index; // `-`
                    ++index; // `-`
                    skipSingleLineComment(4);
                } else {
                    break;
                }
            } else {
                break;
            }
        }
    }

    function scanHexEscape(prefix) {
        var i, len, ch, code = 0;

        len = (prefix === 'u') ? 4 : 2;
        for (i = 0; i < len; ++i) {
            if (index < length && isHexDigit(source[index])) {
                ch = source[index++];
                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
            } else {
                return '';
            }
        }
        return String.fromCharCode(code);
    }

    function getEscapedIdentifier() {
        var ch, id;

        ch = source.charCodeAt(index++);
        id = String.fromCharCode(ch);

        // '\u' (U+005C, U+0075) denotes an escaped character.
        if (ch === 0x5C) {
            if (source.charCodeAt(index) !== 0x75) {
                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
            }
            ++index;
            ch = scanHexEscape('u');
            if (!ch || ch === '\\' || !isIdentifierStart(ch.charCodeAt(0))) {
                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
            }
            id = ch;
        }

        while (index < length) {
            ch = source.charCodeAt(index);
            if (!isIdentifierPart(ch)) {
                break;
            }
            ++index;
            id += String.fromCharCode(ch);

            // '\u' (U+005C, U+0075) denotes an escaped character.
            if (ch === 0x5C) {
                id = id.substr(0, id.length - 1);
                if (source.charCodeAt(index) !== 0x75) {
                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                }
                ++index;
                ch = scanHexEscape('u');
                if (!ch || ch === '\\' || !isIdentifierPart(ch.charCodeAt(0))) {
                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                }
                id += ch;
            }
        }

        return id;
    }

    function getIdentifier() {
        var start, ch;

        start = index++;
        while (index < length) {
            ch = source.charCodeAt(index);
            if (ch === 0x5C) {
                // Blackslash (U+005C) marks Unicode escape sequence.
                index = start;
                return getEscapedIdentifier();
            }
            if (isIdentifierPart(ch)) {
                ++index;
            } else {
                break;
            }
        }

        return source.slice(start, index);
    }

    function scanIdentifier() {
        var start, id, type;

        start = index;

        // Backslash (U+005C) starts an escaped character.
        id = (source.charCodeAt(index) === 0x5C) ? getEscapedIdentifier() : getIdentifier();

        // There is no keyword or literal with only one character.
        // Thus, it must be an identifier.
        if (id.length === 1) {
            type = Token.Identifier;
        } else if (isKeyword(id)) {
            type = Token.Keyword;
        } else if (id === 'null') {
            type = Token.NullLiteral;
        } else if (id === 'true' || id === 'false') {
            type = Token.BooleanLiteral;
        } else {
            type = Token.Identifier;
        }

        return {
            type: type,
            value: id,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }


    // 7.7 Punctuators

    function scanPunctuator() {
        var start = index,
            code = source.charCodeAt(index),
            code2,
            ch1 = source[index],
            ch2,
            ch3,
            ch4;

        switch (code) {

        // Check for most common single-character punctuators.
        case 0x2E:  // . dot
        case 0x28:  // ( open bracket
        case 0x29:  // ) close bracket
        case 0x3B:  // ; semicolon
        case 0x2C:  // , comma
        case 0x7B:  // { open curly brace
        case 0x7D:  // } close curly brace
        case 0x5B:  // [
        case 0x5D:  // ]
        case 0x3A:  // :
        case 0x3F:  // ?
        case 0x7E:  // ~
            ++index;
            if (extra.tokenize) {
                if (code === 0x28) {
                    extra.openParenToken = extra.tokens.length;
                } else if (code === 0x7B) {
                    extra.openCurlyToken = extra.tokens.length;
                }
            }
            return {
                type: Token.Punctuator,
                value: String.fromCharCode(code),
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: start,
                end: index
            };

        default:
            code2 = source.charCodeAt(index + 1);

            // '=' (U+003D) marks an assignment or comparison operator.
            if (code2 === 0x3D) {
                switch (code) {
                case 0x2B:  // +
                case 0x2D:  // -
                case 0x2F:  // /
                case 0x3C:  // <
                case 0x3E:  // >
                case 0x5E:  // ^
                case 0x7C:  // |
                case 0x25:  // %
                case 0x26:  // &
                case 0x2A:  // *
                    index += 2;
                    return {
                        type: Token.Punctuator,
                        value: String.fromCharCode(code) + String.fromCharCode(code2),
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: start,
                        end: index
                    };

                case 0x21: // !
                case 0x3D: // =
                    index += 2;

                    // !== and ===
                    if (source.charCodeAt(index) === 0x3D) {
                        ++index;
                    }
                    return {
                        type: Token.Punctuator,
                        value: source.slice(start, index),
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: start,
                        end: index
                    };
                }
            }
        }

        // 4-character punctuator: >>>=

        ch4 = source.substr(index, 4);

        if (ch4 === '>>>=') {
            index += 4;
            return {
                type: Token.Punctuator,
                value: ch4,
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: start,
                end: index
            };
        }

        // 3-character punctuators: === !== >>> <<= >>=

        ch3 = ch4.substr(0, 3);

        if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {
            index += 3;
            return {
                type: Token.Punctuator,
                value: ch3,
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: start,
                end: index
            };
        }

        // Other 2-character punctuators: ++ -- << >> && ||
        ch2 = ch3.substr(0, 2);

        if ((ch1 === ch2[1] && ('+-<>&|'.indexOf(ch1) >= 0)) || ch2 === '=>') {
            index += 2;
            return {
                type: Token.Punctuator,
                value: ch2,
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: start,
                end: index
            };
        }

        // 1-character punctuators: < > = ! + - * % & | ^ /
        if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {
            ++index;
            return {
                type: Token.Punctuator,
                value: ch1,
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: start,
                end: index
            };
        }

        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
    }

    // 7.8.3 Numeric Literals

    function scanHexLiteral(start) {
        var number = '';

        while (index < length) {
            if (!isHexDigit(source[index])) {
                break;
            }
            number += source[index++];
        }

        if (number.length === 0) {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        if (isIdentifierStart(source.charCodeAt(index))) {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        return {
            type: Token.NumericLiteral,
            value: parseInt('0x' + number, 16),
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    function scanOctalLiteral(start) {
        var number = '0' + source[index++];
        while (index < length) {
            if (!isOctalDigit(source[index])) {
                break;
            }
            number += source[index++];
        }

        if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        return {
            type: Token.NumericLiteral,
            value: parseInt(number, 8),
            octal: true,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    function isImplicitOctalLiteral() {
        var i, ch;

        // Implicit octal, unless there is a non-octal digit.
        // (Annex B.1.1 on Numeric Literals)
        for (i = index + 1; i < length; ++i) {
            ch = source[i];
            if (ch === '8' || ch === '9') {
                return false;
            }
            if (!isOctalDigit(ch)) {
                return true;
            }
        }

        return true;
    }

    function scanNumericLiteral() {
        var number, start, ch;

        ch = source[index];
        assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),
            'Numeric literal must start with a decimal digit or a decimal point');

        start = index;
        number = '';
        if (ch !== '.') {
            number = source[index++];
            ch = source[index];

            // Hex number starts with '0x'.
            // Octal number starts with '0'.
            if (number === '0') {
                if (ch === 'x' || ch === 'X') {
                    ++index;
                    return scanHexLiteral(start);
                }
                if (isOctalDigit(ch)) {
                    if (isImplicitOctalLiteral()) {
                        return scanOctalLiteral(start);
                    }
                }
            }

            while (isDecimalDigit(source.charCodeAt(index))) {
                number += source[index++];
            }
            ch = source[index];
        }

        if (ch === '.') {
            number += source[index++];
            while (isDecimalDigit(source.charCodeAt(index))) {
                number += source[index++];
            }
            ch = source[index];
        }

        if (ch === 'e' || ch === 'E') {
            number += source[index++];

            ch = source[index];
            if (ch === '+' || ch === '-') {
                number += source[index++];
            }
            if (isDecimalDigit(source.charCodeAt(index))) {
                while (isDecimalDigit(source.charCodeAt(index))) {
                    number += source[index++];
                }
            } else {
                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
            }
        }

        if (isIdentifierStart(source.charCodeAt(index))) {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        return {
            type: Token.NumericLiteral,
            value: parseFloat(number),
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    // 7.8.4 String Literals

    function scanStringLiteral() {
        var str = '', quote, start, ch, code, unescaped, restore, octal = false, startLineNumber, startLineStart;
        startLineNumber = lineNumber;
        startLineStart = lineStart;

        quote = source[index];
        assert((quote === '\'' || quote === '"'),
            'String literal must starts with a quote');

        start = index;
        ++index;

        while (index < length) {
            ch = source[index++];

            if (ch === quote) {
                quote = '';
                break;
            } else if (ch === '\\') {
                ch = source[index++];
                if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
                    switch (ch) {
                    case 'u':
                    case 'x':
                        restore = index;
                        unescaped = scanHexEscape(ch);
                        if (unescaped) {
                            str += unescaped;
                        } else {
                            index = restore;
                            str += ch;
                        }
                        break;
                    case 'n':
                        str += '\n';
                        break;
                    case 'r':
                        str += '\r';
                        break;
                    case 't':
                        str += '\t';
                        break;
                    case 'b':
                        str += '\b';
                        break;
                    case 'f':
                        str += '\f';
                        break;
                    case 'v':
                        str += '\x0B';
                        break;

                    default:
                        if (isOctalDigit(ch)) {
                            code = '01234567'.indexOf(ch);

                            // \0 is not octal escape sequence
                            if (code !== 0) {
                                octal = true;
                            }

                            if (index < length && isOctalDigit(source[index])) {
                                octal = true;
                                code = code * 8 + '01234567'.indexOf(source[index++]);

                                // 3 digits are only allowed when string starts
                                // with 0, 1, 2, 3
                                if ('0123'.indexOf(ch) >= 0 &&
                                        index < length &&
                                        isOctalDigit(source[index])) {
                                    code = code * 8 + '01234567'.indexOf(source[index++]);
                                }
                            }
                            str += String.fromCharCode(code);
                        } else {
                            str += ch;
                        }
                        break;
                    }
                } else {
                    ++lineNumber;
                    if (ch ===  '\r' && source[index] === '\n') {
                        ++index;
                    }
                    lineStart = index;
                }
            } else if (isLineTerminator(ch.charCodeAt(0))) {
                break;
            } else {
                str += ch;
            }
        }

        if (quote !== '') {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        return {
            type: Token.StringLiteral,
            value: str,
            octal: octal,
            startLineNumber: startLineNumber,
            startLineStart: startLineStart,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    function testRegExp(pattern, flags) {
        var value;
        try {
            value = new RegExp(pattern, flags);
        } catch (e) {
            throwError({}, Messages.InvalidRegExp);
        }
        return value;
    }

    function scanRegExpBody() {
        var ch, str, classMarker, terminated, body;

        ch = source[index];
        assert(ch === '/', 'Regular expression literal must start with a slash');
        str = source[index++];

        classMarker = false;
        terminated = false;
        while (index < length) {
            ch = source[index++];
            str += ch;
            if (ch === '\\') {
                ch = source[index++];
                // ECMA-262 7.8.5
                if (isLineTerminator(ch.charCodeAt(0))) {
                    throwError({}, Messages.UnterminatedRegExp);
                }
                str += ch;
            } else if (isLineTerminator(ch.charCodeAt(0))) {
                throwError({}, Messages.UnterminatedRegExp);
            } else if (classMarker) {
                if (ch === ']') {
                    classMarker = false;
                }
            } else {
                if (ch === '/') {
                    terminated = true;
                    break;
                } else if (ch === '[') {
                    classMarker = true;
                }
            }
        }

        if (!terminated) {
            throwError({}, Messages.UnterminatedRegExp);
        }

        // Exclude leading and trailing slash.
        body = str.substr(1, str.length - 2);
        return {
            value: body,
            literal: str
        };
    }

    function scanRegExpFlags() {
        var ch, str, flags, restore;

        str = '';
        flags = '';
        while (index < length) {
            ch = source[index];
            if (!isIdentifierPart(ch.charCodeAt(0))) {
                break;
            }

            ++index;
            if (ch === '\\' && index < length) {
                ch = source[index];
                if (ch === 'u') {
                    ++index;
                    restore = index;
                    ch = scanHexEscape('u');
                    if (ch) {
                        flags += ch;
                        for (str += '\\u'; restore < index; ++restore) {
                            str += source[restore];
                        }
                    } else {
                        index = restore;
                        flags += 'u';
                        str += '\\u';
                    }
                    throwErrorTolerant({}, Messages.UnexpectedToken, 'ILLEGAL');
                } else {
                    str += '\\';
                    throwErrorTolerant({}, Messages.UnexpectedToken, 'ILLEGAL');
                }
            } else {
                flags += ch;
                str += ch;
            }
        }

        return {
            value: flags,
            literal: str
        };
    }

    function scanRegExp() {
        var start, body, flags, pattern, value;

        lookahead = null;
        skipComment();
        start = index;

        body = scanRegExpBody();
        flags = scanRegExpFlags();
        value = testRegExp(body.value, flags.value);

        if (extra.tokenize) {
            return {
                type: Token.RegularExpression,
                value: value,
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: start,
                end: index
            };
        }

        return {
            literal: body.literal + flags.literal,
            value: value,
            start: start,
            end: index
        };
    }

    function collectRegex() {
        var pos, loc, regex, token;

        skipComment();

        pos = index;
        loc = {
            start: {
                line: lineNumber,
                column: index - lineStart
            }
        };

        regex = scanRegExp();
        loc.end = {
            line: lineNumber,
            column: index - lineStart
        };

        /* istanbul ignore next */
        if (!extra.tokenize) {
            // Pop the previous token, which is likely '/' or '/='
            if (extra.tokens.length > 0) {
                token = extra.tokens[extra.tokens.length - 1];
                if (token.range[0] === pos && token.type === 'Punctuator') {
                    if (token.value === '/' || token.value === '/=') {
                        extra.tokens.pop();
                    }
                }
            }

            extra.tokens.push({
                type: 'RegularExpression',
                value: regex.literal,
                range: [pos, index],
                loc: loc
            });
        }

        return regex;
    }

    function isIdentifierName(token) {
        return token.type === Token.Identifier ||
            token.type === Token.Keyword ||
            token.type === Token.BooleanLiteral ||
            token.type === Token.NullLiteral;
    }

    function advanceSlash() {
        var prevToken,
            checkToken;
        // Using the following algorithm:
        // https://github.com/mozilla/sweet.js/wiki/design
        prevToken = extra.tokens[extra.tokens.length - 1];
        if (!prevToken) {
            // Nothing before that: it cannot be a division.
            return collectRegex();
        }
        if (prevToken.type === 'Punctuator') {
            if (prevToken.value === ']') {
                return scanPunctuator();
            }
            if (prevToken.value === ')') {
                checkToken = extra.tokens[extra.openParenToken - 1];
                if (checkToken &&
                        checkToken.type === 'Keyword' &&
                        (checkToken.value === 'if' ||
                         checkToken.value === 'while' ||
                         checkToken.value === 'for' ||
                         checkToken.value === 'with')) {
                    return collectRegex();
                }
                return scanPunctuator();
            }
            if (prevToken.value === '}') {
                // Dividing a function by anything makes little sense,
                // but we have to check for that.
                if (extra.tokens[extra.openCurlyToken - 3] &&
                        extra.tokens[extra.openCurlyToken - 3].type === 'Keyword') {
                    // Anonymous function.
                    checkToken = extra.tokens[extra.openCurlyToken - 4];
                    if (!checkToken) {
                        return scanPunctuator();
                    }
                } else if (extra.tokens[extra.openCurlyToken - 4] &&
                        extra.tokens[extra.openCurlyToken - 4].type === 'Keyword') {
                    // Named function.
                    checkToken = extra.tokens[extra.openCurlyToken - 5];
                    if (!checkToken) {
                        return collectRegex();
                    }
                } else {
                    return scanPunctuator();
                }
                // checkToken determines whether the function is
                // a declaration or an expression.
                if (FnExprTokens.indexOf(checkToken.value) >= 0) {
                    // It is an expression.
                    return scanPunctuator();
                }
                // It is a declaration.
                return collectRegex();
            }
            return collectRegex();
        }
        if (prevToken.type === 'Keyword' && prevToken.value !== 'this') {
            return collectRegex();
        }
        return scanPunctuator();
    }

    function advance() {
        var ch;

        skipComment();

        if (index >= length) {
            return {
                type: Token.EOF,
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: index,
                end: index
            };
        }

        ch = source.charCodeAt(index);

        if (isIdentifierStart(ch)) {
            return scanIdentifier();
        }

        // Very common: ( and ) and ;
        if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {
            return scanPunctuator();
        }

        // String literal starts with single quote (U+0027) or double quote (U+0022).
        if (ch === 0x27 || ch === 0x22) {
            return scanStringLiteral();
        }


        // Dot (.) U+002E can also start a floating-point number, hence the need
        // to check the next character.
        if (ch === 0x2E) {
            if (isDecimalDigit(source.charCodeAt(index + 1))) {
                return scanNumericLiteral();
            }
            return scanPunctuator();
        }

        if (isDecimalDigit(ch)) {
            return scanNumericLiteral();
        }

        // Slash (/) U+002F can also start a regex.
        if (extra.tokenize && ch === 0x2F) {
            return advanceSlash();
        }

        return scanPunctuator();
    }

    function collectToken() {
        var loc, token, range, value;

        skipComment();
        loc = {
            start: {
                line: lineNumber,
                column: index - lineStart
            }
        };

        token = advance();
        loc.end = {
            line: lineNumber,
            column: index - lineStart
        };

        if (token.type !== Token.EOF) {
            value = source.slice(token.start, token.end);
            extra.tokens.push({
                type: TokenName[token.type],
                value: value,
                range: [token.start, token.end],
                loc: loc
            });
        }

        return token;
    }

    function lex() {
        var token;

        token = lookahead;
        index = token.end;
        lineNumber = token.lineNumber;
        lineStart = token.lineStart;

        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();

        index = token.end;
        lineNumber = token.lineNumber;
        lineStart = token.lineStart;

        return token;
    }

    function peek() {
        var pos, line, start;

        pos = index;
        line = lineNumber;
        start = lineStart;
        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();
        index = pos;
        lineNumber = line;
        lineStart = start;
    }

    function Position(line, column) {
        this.line = line;
        this.column = column;
    }

    function SourceLocation(startLine, startColumn, line, column) {
        this.start = new Position(startLine, startColumn);
        this.end = new Position(line, column);
    }

    SyntaxTreeDelegate = {

        name: 'SyntaxTree',

        processComment: function (node) {
            var lastChild, trailingComments;

            if (node.type === Syntax.Program) {
                if (node.body.length > 0) {
                    return;
                }
            }

            if (extra.trailingComments.length > 0) {
                if (extra.trailingComments[0].range[0] >= node.range[1]) {
                    trailingComments = extra.trailingComments;
                    extra.trailingComments = [];
                } else {
                    extra.trailingComments.length = 0;
                }
            } else {
                if (extra.bottomRightStack.length > 0 &&
                        extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments &&
                        extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments[0].range[0] >= node.range[1]) {
                    trailingComments = extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments;
                    delete extra.bottomRightStack[extra.bottomRightStack.length - 1].trailingComments;
                }
            }

            // Eating the stack.
            while (extra.bottomRightStack.length > 0 && extra.bottomRightStack[extra.bottomRightStack.length - 1].range[0] >= node.range[0]) {
                lastChild = extra.bottomRightStack.pop();
            }

            if (lastChild) {
                if (lastChild.leadingComments && lastChild.leadingComments[lastChild.leadingComments.length - 1].range[1] <= node.range[0]) {
                    node.leadingComments = lastChild.leadingComments;
                    delete lastChild.leadingComments;
                }
            } else if (extra.leadingComments.length > 0 && extra.leadingComments[extra.leadingComments.length - 1].range[1] <= node.range[0]) {
                node.leadingComments = extra.leadingComments;
                extra.leadingComments = [];
            }


            if (trailingComments) {
                node.trailingComments = trailingComments;
            }

            extra.bottomRightStack.push(node);
        },

        markEnd: function (node, startToken) {
            if (extra.range) {
                node.range = [startToken.start, index];
            }
            if (extra.loc) {
                node.loc = new SourceLocation(
                    startToken.startLineNumber === undefined ?  startToken.lineNumber : startToken.startLineNumber,
                    startToken.start - (startToken.startLineStart === undefined ?  startToken.lineStart : startToken.startLineStart),
                    lineNumber,
                    index - lineStart
                );
                this.postProcess(node);
            }

            if (extra.attachComment) {
                this.processComment(node);
            }
            return node;
        },

        postProcess: function (node) {
            if (extra.source) {
                node.loc.source = extra.source;
            }
            return node;
        },

        createArrayExpression: function (elements) {
            return {
                type: Syntax.ArrayExpression,
                elements: elements
            };
        },

        createAssignmentExpression: function (operator, left, right) {
            return {
                type: Syntax.AssignmentExpression,
                operator: operator,
                left: left,
                right: right
            };
        },

        createBinaryExpression: function (operator, left, right) {
            var type = (operator === '||' || operator === '&&') ? Syntax.LogicalExpression :
                        Syntax.BinaryExpression;
            return {
                type: type,
                operator: operator,
                left: left,
                right: right
            };
        },

        createBlockStatement: function (body) {
            return {
                type: Syntax.BlockStatement,
                body: body
            };
        },

        createBreakStatement: function (label) {
            return {
                type: Syntax.BreakStatement,
                label: label
            };
        },

        createCallExpression: function (callee, args) {
            return {
                type: Syntax.CallExpression,
                callee: callee,
                'arguments': args
            };
        },

        createCatchClause: function (param, body) {
            return {
                type: Syntax.CatchClause,
                param: param,
                body: body
            };
        },

        createConditionalExpression: function (test, consequent, alternate) {
            return {
                type: Syntax.ConditionalExpression,
                test: test,
                consequent: consequent,
                alternate: alternate
            };
        },

        createContinueStatement: function (label) {
            return {
                type: Syntax.ContinueStatement,
                label: label
            };
        },

        createDebuggerStatement: function () {
            return {
                type: Syntax.DebuggerStatement
            };
        },

        createDoWhileStatement: function (body, test) {
            return {
                type: Syntax.DoWhileStatement,
                body: body,
                test: test
            };
        },

        createEmptyStatement: function () {
            return {
                type: Syntax.EmptyStatement
            };
        },

        createExpressionStatement: function (expression) {
            return {
                type: Syntax.ExpressionStatement,
                expression: expression
            };
        },

        createForStatement: function (init, test, update, body) {
            return {
                type: Syntax.ForStatement,
                init: init,
                test: test,
                update: update,
                body: body
            };
        },

        createForInStatement: function (left, right, body) {
            return {
                type: Syntax.ForInStatement,
                left: left,
                right: right,
                body: body,
                each: false
            };
        },

        createFunctionDeclaration: function (id, params, defaults, body) {
            return {
                type: Syntax.FunctionDeclaration,
                id: id,
                params: params,
                defaults: defaults,
                body: body,
                rest: null,
                generator: false,
                expression: false
            };
        },

        createFunctionExpression: function (id, params, defaults, body) {
            return {
                type: Syntax.FunctionExpression,
                id: id,
                params: params,
                defaults: defaults,
                body: body,
                rest: null,
                generator: false,
                expression: false
            };
        },

        createIdentifier: function (name) {
            return {
                type: Syntax.Identifier,
                name: name
            };
        },

        createIfStatement: function (test, consequent, alternate) {
            return {
                type: Syntax.IfStatement,
                test: test,
                consequent: consequent,
                alternate: alternate
            };
        },

        createLabeledStatement: function (label, body) {
            return {
                type: Syntax.LabeledStatement,
                label: label,
                body: body
            };
        },

        createLiteral: function (token) {
            return {
                type: Syntax.Literal,
                value: token.value,
                raw: source.slice(token.start, token.end)
            };
        },

        createMemberExpression: function (accessor, object, property) {
            return {
                type: Syntax.MemberExpression,
                computed: accessor === '[',
                object: object,
                property: property
            };
        },

        createNewExpression: function (callee, args) {
            return {
                type: Syntax.NewExpression,
                callee: callee,
                'arguments': args
            };
        },

        createObjectExpression: function (properties) {
            return {
                type: Syntax.ObjectExpression,
                properties: properties
            };
        },

        createPostfixExpression: function (operator, argument) {
            return {
                type: Syntax.UpdateExpression,
                operator: operator,
                argument: argument,
                prefix: false
            };
        },

        createProgram: function (body) {
            return {
                type: Syntax.Program,
                body: body
            };
        },

        createProperty: function (kind, key, value) {
            return {
                type: Syntax.Property,
                key: key,
                value: value,
                kind: kind
            };
        },

        createReturnStatement: function (argument) {
            return {
                type: Syntax.ReturnStatement,
                argument: argument
            };
        },

        createSequenceExpression: function (expressions) {
            return {
                type: Syntax.SequenceExpression,
                expressions: expressions
            };
        },

        createSwitchCase: function (test, consequent) {
            return {
                type: Syntax.SwitchCase,
                test: test,
                consequent: consequent
            };
        },

        createSwitchStatement: function (discriminant, cases) {
            return {
                type: Syntax.SwitchStatement,
                discriminant: discriminant,
                cases: cases
            };
        },

        createThisExpression: function () {
            return {
                type: Syntax.ThisExpression
            };
        },

        createThrowStatement: function (argument) {
            return {
                type: Syntax.ThrowStatement,
                argument: argument
            };
        },

        createTryStatement: function (block, guardedHandlers, handlers, finalizer) {
            return {
                type: Syntax.TryStatement,
                block: block,
                guardedHandlers: guardedHandlers,
                handlers: handlers,
                finalizer: finalizer
            };
        },

        createUnaryExpression: function (operator, argument) {
            if (operator === '++' || operator === '--') {
                return {
                    type: Syntax.UpdateExpression,
                    operator: operator,
                    argument: argument,
                    prefix: true
                };
            }
            return {
                type: Syntax.UnaryExpression,
                operator: operator,
                argument: argument,
                prefix: true
            };
        },

        createVariableDeclaration: function (declarations, kind) {
            return {
                type: Syntax.VariableDeclaration,
                declarations: declarations,
                kind: kind
            };
        },

        createVariableDeclarator: function (id, init) {
            return {
                type: Syntax.VariableDeclarator,
                id: id,
                init: init
            };
        },

        createWhileStatement: function (test, body) {
            return {
                type: Syntax.WhileStatement,
                test: test,
                body: body
            };
        },

        createWithStatement: function (object, body) {
            return {
                type: Syntax.WithStatement,
                object: object,
                body: body
            };
        }
    };

    // Return true if there is a line terminator before the next token.

    function peekLineTerminator() {
        var pos, line, start, found;

        pos = index;
        line = lineNumber;
        start = lineStart;
        skipComment();
        found = lineNumber !== line;
        index = pos;
        lineNumber = line;
        lineStart = start;

        return found;
    }

    // Throw an exception

    function throwError(token, messageFormat) {
        var error,
            args = Array.prototype.slice.call(arguments, 2),
            msg = messageFormat.replace(
                /%(\d)/g,
                function (whole, index) {
                    assert(index < args.length, 'Message reference must be in range');
                    return args[index];
                }
            );

        if (typeof token.lineNumber === 'number') {
            error = new Error('Line ' + token.lineNumber + ': ' + msg);
            error.index = token.start;
            error.lineNumber = token.lineNumber;
            error.column = token.start - lineStart + 1;
        } else {
            error = new Error('Line ' + lineNumber + ': ' + msg);
            error.index = index;
            error.lineNumber = lineNumber;
            error.column = index - lineStart + 1;
        }

        error.description = msg;
        throw error;
    }

    function throwErrorTolerant() {
        try {
            throwError.apply(null, arguments);
        } catch (e) {
            if (extra.errors) {
                extra.errors.push(e);
            } else {
                throw e;
            }
        }
    }


    // Throw an exception because of the token.

    function throwUnexpected(token) {
        if (token.type === Token.EOF) {
            throwError(token, Messages.UnexpectedEOS);
        }

        if (token.type === Token.NumericLiteral) {
            throwError(token, Messages.UnexpectedNumber);
        }

        if (token.type === Token.StringLiteral) {
            throwError(token, Messages.UnexpectedString);
        }

        if (token.type === Token.Identifier) {
            throwError(token, Messages.UnexpectedIdentifier);
        }

        if (token.type === Token.Keyword) {
            if (isFutureReservedWord(token.value)) {
                throwError(token, Messages.UnexpectedReserved);
            } else if (strict && isStrictModeReservedWord(token.value)) {
                throwErrorTolerant(token, Messages.StrictReservedWord);
                return;
            }
            throwError(token, Messages.UnexpectedToken, token.value);
        }

        // BooleanLiteral, NullLiteral, or Punctuator.
        throwError(token, Messages.UnexpectedToken, token.value);
    }

    // Expect the next token to match the specified punctuator.
    // If not, an exception will be thrown.

    function expect(value) {
        var token = lex();
        if (token.type !== Token.Punctuator || token.value !== value) {
            throwUnexpected(token);
        }
    }

    // Expect the next token to match the specified keyword.
    // If not, an exception will be thrown.

    function expectKeyword(keyword) {
        var token = lex();
        if (token.type !== Token.Keyword || token.value !== keyword) {
            throwUnexpected(token);
        }
    }

    // Return true if the next token matches the specified punctuator.

    function match(value) {
        return lookahead.type === Token.Punctuator && lookahead.value === value;
    }

    // Return true if the next token matches the specified keyword

    function matchKeyword(keyword) {
        return lookahead.type === Token.Keyword && lookahead.value === keyword;
    }

    // Return true if the next token is an assignment operator

    function matchAssign() {
        var op;

        if (lookahead.type !== Token.Punctuator) {
            return false;
        }
        op = lookahead.value;
        return op === '=' ||
            op === '*=' ||
            op === '/=' ||
            op === '%=' ||
            op === '+=' ||
            op === '-=' ||
            op === '<<=' ||
            op === '>>=' ||
            op === '>>>=' ||
            op === '&=' ||
            op === '^=' ||
            op === '|=';
    }

    function consumeSemicolon() {
        var line, oldIndex = index, oldLineNumber = lineNumber,
            oldLineStart = lineStart, oldLookahead = lookahead;

        // Catch the very common case first: immediately a semicolon (U+003B).
        if (source.charCodeAt(index) === 0x3B || match(';')) {
            lex();
            return;
        }

        line = lineNumber;
        skipComment();
        if (lineNumber !== line) {
            index = oldIndex;
            lineNumber = oldLineNumber;
            lineStart = oldLineStart;
            lookahead = oldLookahead;
            return;
        }

        if (lookahead.type !== Token.EOF && !match('}')) {
            throwUnexpected(lookahead);
        }
    }

    // Return true if provided expression is LeftHandSideExpression

    function isLeftHandSide(expr) {
        return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;
    }

    // 11.1.4 Array Initialiser

    function parseArrayInitialiser() {
        var elements = [], startToken;

        startToken = lookahead;
        expect('[');

        while (!match(']')) {
            if (match(',')) {
                lex();
                elements.push(null);
            } else {
                elements.push(parseAssignmentExpression());

                if (!match(']')) {
                    expect(',');
                }
            }
        }

        lex();

        return delegate.markEnd(delegate.createArrayExpression(elements), startToken);
    }

    // 11.1.5 Object Initialiser

    function parsePropertyFunction(param, first) {
        var previousStrict, body, startToken;

        previousStrict = strict;
        startToken = lookahead;
        body = parseFunctionSourceElements();
        if (first && strict && isRestrictedWord(param[0].name)) {
            throwErrorTolerant(first, Messages.StrictParamName);
        }
        strict = previousStrict;
        return delegate.markEnd(delegate.createFunctionExpression(null, param, [], body), startToken);
    }

    function parseObjectPropertyKey() {
        var token, startToken;

        startToken = lookahead;
        token = lex();

        // Note: This function is called only from parseObjectProperty(), where
        // EOF and Punctuator tokens are already filtered out.

        if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {
            if (strict && token.octal) {
                throwErrorTolerant(token, Messages.StrictOctalLiteral);
            }
            return delegate.markEnd(delegate.createLiteral(token), startToken);
        }

        return delegate.markEnd(delegate.createIdentifier(token.value), startToken);
    }

    function parseObjectProperty() {
        var token, key, id, value, param, startToken;

        token = lookahead;
        startToken = lookahead;

        if (token.type === Token.Identifier) {

            id = parseObjectPropertyKey();

            // Property Assignment: Getter and Setter.

            if (token.value === 'get' && !match(':')) {
                key = parseObjectPropertyKey();
                expect('(');
                expect(')');
                value = parsePropertyFunction([]);
                return delegate.markEnd(delegate.createProperty('get', key, value), startToken);
            }
            if (token.value === 'set' && !match(':')) {
                key = parseObjectPropertyKey();
                expect('(');
                token = lookahead;
                if (token.type !== Token.Identifier) {
                    expect(')');
                    throwErrorTolerant(token, Messages.UnexpectedToken, token.value);
                    value = parsePropertyFunction([]);
                } else {
                    param = [ parseVariableIdentifier() ];
                    expect(')');
                    value = parsePropertyFunction(param, token);
                }
                return delegate.markEnd(delegate.createProperty('set', key, value), startToken);
            }
            expect(':');
            value = parseAssignmentExpression();
            return delegate.markEnd(delegate.createProperty('init', id, value), startToken);
        }
        if (token.type === Token.EOF || token.type === Token.Punctuator) {
            throwUnexpected(token);
        } else {
            key = parseObjectPropertyKey();
            expect(':');
            value = parseAssignmentExpression();
            return delegate.markEnd(delegate.createProperty('init', key, value), startToken);
        }
    }

    function parseObjectInitialiser() {
        var properties = [], property, name, key, kind, map = {}, toString = String, startToken;

        startToken = lookahead;

        expect('{');

        while (!match('}')) {
            property = parseObjectProperty();

            if (property.key.type === Syntax.Identifier) {
                name = property.key.name;
            } else {
                name = toString(property.key.value);
            }
            kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;

            key = '$' + name;
            if (Object.prototype.hasOwnProperty.call(map, key)) {
                if (map[key] === PropertyKind.Data) {
                    if (strict && kind === PropertyKind.Data) {
                        throwErrorTolerant({}, Messages.StrictDuplicateProperty);
                    } else if (kind !== PropertyKind.Data) {
                        throwErrorTolerant({}, Messages.AccessorDataProperty);
                    }
                } else {
                    if (kind === PropertyKind.Data) {
                        throwErrorTolerant({}, Messages.AccessorDataProperty);
                    } else if (map[key] & kind) {
                        throwErrorTolerant({}, Messages.AccessorGetSet);
                    }
                }
                map[key] |= kind;
            } else {
                map[key] = kind;
            }

            properties.push(property);

            if (!match('}')) {
                expect(',');
            }
        }

        expect('}');

        return delegate.markEnd(delegate.createObjectExpression(properties), startToken);
    }

    // 11.1.6 The Grouping Operator

    function parseGroupExpression() {
        var expr;

        expect('(');

        expr = parseExpression();

        expect(')');

        return expr;
    }


    // 11.1 Primary Expressions

    function parsePrimaryExpression() {
        var type, token, expr, startToken;

        if (match('(')) {
            return parseGroupExpression();
        }

        if (match('[')) {
            return parseArrayInitialiser();
        }

        if (match('{')) {
            return parseObjectInitialiser();
        }

        type = lookahead.type;
        startToken = lookahead;

        if (type === Token.Identifier) {
            expr =  delegate.createIdentifier(lex().value);
        } else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
            if (strict && lookahead.octal) {
                throwErrorTolerant(lookahead, Messages.StrictOctalLiteral);
            }
            expr = delegate.createLiteral(lex());
        } else if (type === Token.Keyword) {
            if (matchKeyword('function')) {
                return parseFunctionExpression();
            }
            if (matchKeyword('this')) {
                lex();
                expr = delegate.createThisExpression();
            } else {
                throwUnexpected(lex());
            }
        } else if (type === Token.BooleanLiteral) {
            token = lex();
            token.value = (token.value === 'true');
            expr = delegate.createLiteral(token);
        } else if (type === Token.NullLiteral) {
            token = lex();
            token.value = null;
            expr = delegate.createLiteral(token);
        } else if (match('/') || match('/=')) {
            if (typeof extra.tokens !== 'undefined') {
                expr = delegate.createLiteral(collectRegex());
            } else {
                expr = delegate.createLiteral(scanRegExp());
            }
            peek();
        } else {
            throwUnexpected(lex());
        }

        return delegate.markEnd(expr, startToken);
    }

    // 11.2 Left-Hand-Side Expressions

    function parseArguments() {
        var args = [];

        expect('(');

        if (!match(')')) {
            while (index < length) {
                args.push(parseAssignmentExpression());
                if (match(')')) {
                    break;
                }
                expect(',');
            }
        }

        expect(')');

        return args;
    }

    function parseNonComputedProperty() {
        var token, startToken;

        startToken = lookahead;
        token = lex();

        if (!isIdentifierName(token)) {
            throwUnexpected(token);
        }

        return delegate.markEnd(delegate.createIdentifier(token.value), startToken);
    }

    function parseNonComputedMember() {
        expect('.');

        return parseNonComputedProperty();
    }

    function parseComputedMember() {
        var expr;

        expect('[');

        expr = parseExpression();

        expect(']');

        return expr;
    }

    function parseNewExpression() {
        var callee, args, startToken;

        startToken = lookahead;
        expectKeyword('new');
        callee = parseLeftHandSideExpression();
        args = match('(') ? parseArguments() : [];

        return delegate.markEnd(delegate.createNewExpression(callee, args), startToken);
    }

    function parseLeftHandSideExpressionAllowCall() {
        var expr, args, property, startToken, previousAllowIn = state.allowIn;

        startToken = lookahead;
        state.allowIn = true;
        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();

        for (;;) {
            if (match('.')) {
                property = parseNonComputedMember();
                expr = delegate.createMemberExpression('.', expr, property);
            } else if (match('(')) {
                args = parseArguments();
                expr = delegate.createCallExpression(expr, args);
            } else if (match('[')) {
                property = parseComputedMember();
                expr = delegate.createMemberExpression('[', expr, property);
            } else {
                break;
            }
            delegate.markEnd(expr, startToken);
        }
        state.allowIn = previousAllowIn;

        return expr;
    }

    function parseLeftHandSideExpression() {
        var expr, property, startToken;
        assert(state.allowIn, 'callee of new expression always allow in keyword.');

        startToken = lookahead;

        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();

        while (match('.') || match('[')) {
            if (match('[')) {
                property = parseComputedMember();
                expr = delegate.createMemberExpression('[', expr, property);
            } else {
                property = parseNonComputedMember();
                expr = delegate.createMemberExpression('.', expr, property);
            }
            delegate.markEnd(expr, startToken);
        }
        return expr;
    }

    // 11.3 Postfix Expressions

    function parsePostfixExpression() {
        var expr, token, startToken = lookahead;

        expr = parseLeftHandSideExpressionAllowCall();

        if (lookahead.type === Token.Punctuator) {
            if ((match('++') || match('--')) && !peekLineTerminator()) {
                // 11.3.1, 11.3.2
                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                    throwErrorTolerant({}, Messages.StrictLHSPostfix);
                }

                if (!isLeftHandSide(expr)) {
                    throwErrorTolerant({}, Messages.InvalidLHSInAssignment);
                }

                token = lex();
                expr = delegate.markEnd(delegate.createPostfixExpression(token.value, expr), startToken);
            }
        }

        return expr;
    }

    // 11.4 Unary Operators

    function parseUnaryExpression() {
        var token, expr, startToken;

        if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
            expr = parsePostfixExpression();
        } else if (match('++') || match('--')) {
            startToken = lookahead;
            token = lex();
            expr = parseUnaryExpression();
            // 11.4.4, 11.4.5
            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                throwErrorTolerant({}, Messages.StrictLHSPrefix);
            }

            if (!isLeftHandSide(expr)) {
                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);
            }

            expr = delegate.createUnaryExpression(token.value, expr);
            expr = delegate.markEnd(expr, startToken);
        } else if (match('+') || match('-') || match('~') || match('!')) {
            startToken = lookahead;
            token = lex();
            expr = parseUnaryExpression();
            expr = delegate.createUnaryExpression(token.value, expr);
            expr = delegate.markEnd(expr, startToken);
        } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
            startToken = lookahead;
            token = lex();
            expr = parseUnaryExpression();
            expr = delegate.createUnaryExpression(token.value, expr);
            expr = delegate.markEnd(expr, startToken);
            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {
                throwErrorTolerant({}, Messages.StrictDelete);
            }
        } else {
            expr = parsePostfixExpression();
        }

        return expr;
    }

    function binaryPrecedence(token, allowIn) {
        var prec = 0;

        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
            return 0;
        }

        switch (token.value) {
        case '||':
            prec = 1;
            break;

        case '&&':
            prec = 2;
            break;

        case '|':
            prec = 3;
            break;

        case '^':
            prec = 4;
            break;

        case '&':
            prec = 5;
            break;

        case '==':
        case '!=':
        case '===':
        case '!==':
            prec = 6;
            break;

        case '<':
        case '>':
        case '<=':
        case '>=':
        case 'instanceof':
            prec = 7;
            break;

        case 'in':
            prec = allowIn ? 7 : 0;
            break;

        case '<<':
        case '>>':
        case '>>>':
            prec = 8;
            break;

        case '+':
        case '-':
            prec = 9;
            break;

        case '*':
        case '/':
        case '%':
            prec = 11;
            break;

        default:
            break;
        }

        return prec;
    }

    // 11.5 Multiplicative Operators
    // 11.6 Additive Operators
    // 11.7 Bitwise Shift Operators
    // 11.8 Relational Operators
    // 11.9 Equality Operators
    // 11.10 Binary Bitwise Operators
    // 11.11 Binary Logical Operators

    function parseBinaryExpression() {
        var marker, markers, expr, token, prec, stack, right, operator, left, i;

        marker = lookahead;
        left = parseUnaryExpression();

        token = lookahead;
        prec = binaryPrecedence(token, state.allowIn);
        if (prec === 0) {
            return left;
        }
        token.prec = prec;
        lex();

        markers = [marker, lookahead];
        right = parseUnaryExpression();

        stack = [left, token, right];

        while ((prec = binaryPrecedence(lookahead, state.allowIn)) > 0) {

            // Reduce: make a binary expression from the three topmost entries.
            while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {
                right = stack.pop();
                operator = stack.pop().value;
                left = stack.pop();
                expr = delegate.createBinaryExpression(operator, left, right);
                markers.pop();
                marker = markers[markers.length - 1];
                delegate.markEnd(expr, marker);
                stack.push(expr);
            }

            // Shift.
            token = lex();
            token.prec = prec;
            stack.push(token);
            markers.push(lookahead);
            expr = parseUnaryExpression();
            stack.push(expr);
        }

        // Final reduce to clean-up the stack.
        i = stack.length - 1;
        expr = stack[i];
        markers.pop();
        while (i > 1) {
            expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
            i -= 2;
            marker = markers.pop();
            delegate.markEnd(expr, marker);
        }

        return expr;
    }


    // 11.12 Conditional Operator

    function parseConditionalExpression() {
        var expr, previousAllowIn, consequent, alternate, startToken;

        startToken = lookahead;

        expr = parseBinaryExpression();

        if (match('?')) {
            lex();
            previousAllowIn = state.allowIn;
            state.allowIn = true;
            consequent = parseAssignmentExpression();
            state.allowIn = previousAllowIn;
            expect(':');
            alternate = parseAssignmentExpression();

            expr = delegate.createConditionalExpression(expr, consequent, alternate);
            delegate.markEnd(expr, startToken);
        }

        return expr;
    }

    // 11.13 Assignment Operators

    function parseAssignmentExpression() {
        var token, left, right, node, startToken;

        token = lookahead;
        startToken = lookahead;

        node = left = parseConditionalExpression();

        if (matchAssign()) {
            // LeftHandSideExpression
            if (!isLeftHandSide(left)) {
                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);
            }

            // 11.13.1
            if (strict && left.type === Syntax.Identifier && isRestrictedWord(left.name)) {
                throwErrorTolerant(token, Messages.StrictLHSAssignment);
            }

            token = lex();
            right = parseAssignmentExpression();
            node = delegate.markEnd(delegate.createAssignmentExpression(token.value, left, right), startToken);
        }

        return node;
    }

    // 11.14 Comma Operator

    function parseExpression() {
        var expr, startToken = lookahead;

        expr = parseAssignmentExpression();

        if (match(',')) {
            expr = delegate.createSequenceExpression([ expr ]);

            while (index < length) {
                if (!match(',')) {
                    break;
                }
                lex();
                expr.expressions.push(parseAssignmentExpression());
            }

            delegate.markEnd(expr, startToken);
        }

        return expr;
    }

    // 12.1 Block

    function parseStatementList() {
        var list = [],
            statement;

        while (index < length) {
            if (match('}')) {
                break;
            }
            statement = parseSourceElement();
            if (typeof statement === 'undefined') {
                break;
            }
            list.push(statement);
        }

        return list;
    }

    function parseBlock() {
        var block, startToken;

        startToken = lookahead;
        expect('{');

        block = parseStatementList();

        expect('}');

        return delegate.markEnd(delegate.createBlockStatement(block), startToken);
    }

    // 12.2 Variable Statement

    function parseVariableIdentifier() {
        var token, startToken;

        startToken = lookahead;
        token = lex();

        if (token.type !== Token.Identifier) {
            throwUnexpected(token);
        }

        return delegate.markEnd(delegate.createIdentifier(token.value), startToken);
    }

    function parseVariableDeclaration(kind) {
        var init = null, id, startToken;

        startToken = lookahead;
        id = parseVariableIdentifier();

        // 12.2.1
        if (strict && isRestrictedWord(id.name)) {
            throwErrorTolerant({}, Messages.StrictVarName);
        }

        if (kind === 'const') {
            expect('=');
            init = parseAssignmentExpression();
        } else if (match('=')) {
            lex();
            init = parseAssignmentExpression();
        }

        return delegate.markEnd(delegate.createVariableDeclarator(id, init), startToken);
    }

    function parseVariableDeclarationList(kind) {
        var list = [];

        do {
            list.push(parseVariableDeclaration(kind));
            if (!match(',')) {
                break;
            }
            lex();
        } while (index < length);

        return list;
    }

    function parseVariableStatement() {
        var declarations;

        expectKeyword('var');

        declarations = parseVariableDeclarationList();

        consumeSemicolon();

        return delegate.createVariableDeclaration(declarations, 'var');
    }

    // kind may be `const` or `let`
    // Both are experimental and not in the specification yet.
    // see http://wiki.ecmascript.org/doku.php?id=harmony:const
    // and http://wiki.ecmascript.org/doku.php?id=harmony:let
    function parseConstLetDeclaration(kind) {
        var declarations, startToken;

        startToken = lookahead;

        expectKeyword(kind);

        declarations = parseVariableDeclarationList(kind);

        consumeSemicolon();

        return delegate.markEnd(delegate.createVariableDeclaration(declarations, kind), startToken);
    }

    // 12.3 Empty Statement

    function parseEmptyStatement() {
        expect(';');
        return delegate.createEmptyStatement();
    }

    // 12.4 Expression Statement

    function parseExpressionStatement() {
        var expr = parseExpression();
        consumeSemicolon();
        return delegate.createExpressionStatement(expr);
    }

    // 12.5 If statement

    function parseIfStatement() {
        var test, consequent, alternate;

        expectKeyword('if');

        expect('(');

        test = parseExpression();

        expect(')');

        consequent = parseStatement();

        if (matchKeyword('else')) {
            lex();
            alternate = parseStatement();
        } else {
            alternate = null;
        }

        return delegate.createIfStatement(test, consequent, alternate);
    }

    // 12.6 Iteration Statements

    function parseDoWhileStatement() {
        var body, test, oldInIteration;

        expectKeyword('do');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = parseStatement();

        state.inIteration = oldInIteration;

        expectKeyword('while');

        expect('(');

        test = parseExpression();

        expect(')');

        if (match(';')) {
            lex();
        }

        return delegate.createDoWhileStatement(body, test);
    }

    function parseWhileStatement() {
        var test, body, oldInIteration;

        expectKeyword('while');

        expect('(');

        test = parseExpression();

        expect(')');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = parseStatement();

        state.inIteration = oldInIteration;

        return delegate.createWhileStatement(test, body);
    }

    function parseForVariableDeclaration() {
        var token, declarations, startToken;

        startToken = lookahead;
        token = lex();
        declarations = parseVariableDeclarationList();

        return delegate.markEnd(delegate.createVariableDeclaration(declarations, token.value), startToken);
    }

    function parseForStatement() {
        var init, test, update, left, right, body, oldInIteration, previousAllowIn = state.allowIn;

        init = test = update = null;

        expectKeyword('for');

        expect('(');

        if (match(';')) {
            lex();
        } else {
            if (matchKeyword('var') || matchKeyword('let')) {
                state.allowIn = false;
                init = parseForVariableDeclaration();
                state.allowIn = previousAllowIn;

                if (init.declarations.length === 1 && matchKeyword('in')) {
                    lex();
                    left = init;
                    right = parseExpression();
                    init = null;
                }
            } else {
                state.allowIn = false;
                init = parseExpression();
                state.allowIn = previousAllowIn;

                if (matchKeyword('in')) {
                    // LeftHandSideExpression
                    if (!isLeftHandSide(init)) {
                        throwErrorTolerant({}, Messages.InvalidLHSInForIn);
                    }

                    lex();
                    left = init;
                    right = parseExpression();
                    init = null;
                }
            }

            if (typeof left === 'undefined') {
                expect(';');
            }
        }

        if (typeof left === 'undefined') {

            if (!match(';')) {
                test = parseExpression();
            }
            expect(';');

            if (!match(')')) {
                update = parseExpression();
            }
        }

        expect(')');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = parseStatement();

        state.inIteration = oldInIteration;

        return (typeof left === 'undefined') ?
                delegate.createForStatement(init, test, update, body) :
                delegate.createForInStatement(left, right, body);
    }

    // 12.7 The continue statement

    function parseContinueStatement() {
        var label = null, key;

        expectKeyword('continue');

        // Optimize the most common form: 'continue;'.
        if (source.charCodeAt(index) === 0x3B) {
            lex();

            if (!state.inIteration) {
                throwError({}, Messages.IllegalContinue);
            }

            return delegate.createContinueStatement(null);
        }

        if (peekLineTerminator()) {
            if (!state.inIteration) {
                throwError({}, Messages.IllegalContinue);
            }

            return delegate.createContinueStatement(null);
        }

        if (lookahead.type === Token.Identifier) {
            label = parseVariableIdentifier();

            key = '$' + label.name;
            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError({}, Messages.UnknownLabel, label.name);
            }
        }

        consumeSemicolon();

        if (label === null && !state.inIteration) {
            throwError({}, Messages.IllegalContinue);
        }

        return delegate.createContinueStatement(label);
    }

    // 12.8 The break statement

    function parseBreakStatement() {
        var label = null, key;

        expectKeyword('break');

        // Catch the very common case first: immediately a semicolon (U+003B).
        if (source.charCodeAt(index) === 0x3B) {
            lex();

            if (!(state.inIteration || state.inSwitch)) {
                throwError({}, Messages.IllegalBreak);
            }

            return delegate.createBreakStatement(null);
        }

        if (peekLineTerminator()) {
            if (!(state.inIteration || state.inSwitch)) {
                throwError({}, Messages.IllegalBreak);
            }

            return delegate.createBreakStatement(null);
        }

        if (lookahead.type === Token.Identifier) {
            label = parseVariableIdentifier();

            key = '$' + label.name;
            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError({}, Messages.UnknownLabel, label.name);
            }
        }

        consumeSemicolon();

        if (label === null && !(state.inIteration || state.inSwitch)) {
            throwError({}, Messages.IllegalBreak);
        }

        return delegate.createBreakStatement(label);
    }

    // 12.9 The return statement

    function parseReturnStatement() {
        var argument = null;

        expectKeyword('return');

        if (!state.inFunctionBody) {
            throwErrorTolerant({}, Messages.IllegalReturn);
        }

        // 'return' followed by a space and an identifier is very common.
        if (source.charCodeAt(index) === 0x20) {
            if (isIdentifierStart(source.charCodeAt(index + 1))) {
                argument = parseExpression();
                consumeSemicolon();
                return delegate.createReturnStatement(argument);
            }
        }

        if (peekLineTerminator()) {
            return delegate.createReturnStatement(null);
        }

        if (!match(';')) {
            if (!match('}') && lookahead.type !== Token.EOF) {
                argument = parseExpression();
            }
        }

        consumeSemicolon();

        return delegate.createReturnStatement(argument);
    }

    // 12.10 The with statement

    function parseWithStatement() {
        var object, body;

        if (strict) {
            // TODO(ikarienator): Should we update the test cases instead?
            skipComment();
            throwErrorTolerant({}, Messages.StrictModeWith);
        }

        expectKeyword('with');

        expect('(');

        object = parseExpression();

        expect(')');

        body = parseStatement();

        return delegate.createWithStatement(object, body);
    }

    // 12.10 The swith statement

    function parseSwitchCase() {
        var test, consequent = [], statement, startToken;

        startToken = lookahead;
        if (matchKeyword('default')) {
            lex();
            test = null;
        } else {
            expectKeyword('case');
            test = parseExpression();
        }
        expect(':');

        while (index < length) {
            if (match('}') || matchKeyword('default') || matchKeyword('case')) {
                break;
            }
            statement = parseStatement();
            consequent.push(statement);
        }

        return delegate.markEnd(delegate.createSwitchCase(test, consequent), startToken);
    }

    function parseSwitchStatement() {
        var discriminant, cases, clause, oldInSwitch, defaultFound;

        expectKeyword('switch');

        expect('(');

        discriminant = parseExpression();

        expect(')');

        expect('{');

        cases = [];

        if (match('}')) {
            lex();
            return delegate.createSwitchStatement(discriminant, cases);
        }

        oldInSwitch = state.inSwitch;
        state.inSwitch = true;
        defaultFound = false;

        while (index < length) {
            if (match('}')) {
                break;
            }
            clause = parseSwitchCase();
            if (clause.test === null) {
                if (defaultFound) {
                    throwError({}, Messages.MultipleDefaultsInSwitch);
                }
                defaultFound = true;
            }
            cases.push(clause);
        }

        state.inSwitch = oldInSwitch;

        expect('}');

        return delegate.createSwitchStatement(discriminant, cases);
    }

    // 12.13 The throw statement

    function parseThrowStatement() {
        var argument;

        expectKeyword('throw');

        if (peekLineTerminator()) {
            throwError({}, Messages.NewlineAfterThrow);
        }

        argument = parseExpression();

        consumeSemicolon();

        return delegate.createThrowStatement(argument);
    }

    // 12.14 The try statement

    function parseCatchClause() {
        var param, body, startToken;

        startToken = lookahead;
        expectKeyword('catch');

        expect('(');
        if (match(')')) {
            throwUnexpected(lookahead);
        }

        param = parseVariableIdentifier();
        // 12.14.1
        if (strict && isRestrictedWord(param.name)) {
            throwErrorTolerant({}, Messages.StrictCatchVariable);
        }

        expect(')');
        body = parseBlock();
        return delegate.markEnd(delegate.createCatchClause(param, body), startToken);
    }

    function parseTryStatement() {
        var block, handlers = [], finalizer = null;

        expectKeyword('try');

        block = parseBlock();

        if (matchKeyword('catch')) {
            handlers.push(parseCatchClause());
        }

        if (matchKeyword('finally')) {
            lex();
            finalizer = parseBlock();
        }

        if (handlers.length === 0 && !finalizer) {
            throwError({}, Messages.NoCatchOrFinally);
        }

        return delegate.createTryStatement(block, [], handlers, finalizer);
    }

    // 12.15 The debugger statement

    function parseDebuggerStatement() {
        expectKeyword('debugger');

        consumeSemicolon();

        return delegate.createDebuggerStatement();
    }

    // 12 Statements

    function parseStatement() {
        var type = lookahead.type,
            expr,
            labeledBody,
            key,
            startToken;

        if (type === Token.EOF) {
            throwUnexpected(lookahead);
        }

        if (type === Token.Punctuator && lookahead.value === '{') {
            return parseBlock();
        }

        startToken = lookahead;

        if (type === Token.Punctuator) {
            switch (lookahead.value) {
            case ';':
                return delegate.markEnd(parseEmptyStatement(), startToken);
            case '(':
                return delegate.markEnd(parseExpressionStatement(), startToken);
            default:
                break;
            }
        }

        if (type === Token.Keyword) {
            switch (lookahead.value) {
            case 'break':
                return delegate.markEnd(parseBreakStatement(), startToken);
            case 'continue':
                return delegate.markEnd(parseContinueStatement(), startToken);
            case 'debugger':
                return delegate.markEnd(parseDebuggerStatement(), startToken);
            case 'do':
                return delegate.markEnd(parseDoWhileStatement(), startToken);
            case 'for':
                return delegate.markEnd(parseForStatement(), startToken);
            case 'function':
                return delegate.markEnd(parseFunctionDeclaration(), startToken);
            case 'if':
                return delegate.markEnd(parseIfStatement(), startToken);
            case 'return':
                return delegate.markEnd(parseReturnStatement(), startToken);
            case 'switch':
                return delegate.markEnd(parseSwitchStatement(), startToken);
            case 'throw':
                return delegate.markEnd(parseThrowStatement(), startToken);
            case 'try':
                return delegate.markEnd(parseTryStatement(), startToken);
            case 'var':
                return delegate.markEnd(parseVariableStatement(), startToken);
            case 'while':
                return delegate.markEnd(parseWhileStatement(), startToken);
            case 'with':
                return delegate.markEnd(parseWithStatement(), startToken);
            default:
                break;
            }
        }

        expr = parseExpression();

        // 12.12 Labelled Statements
        if ((expr.type === Syntax.Identifier) && match(':')) {
            lex();

            key = '$' + expr.name;
            if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError({}, Messages.Redeclaration, 'Label', expr.name);
            }

            state.labelSet[key] = true;
            labeledBody = parseStatement();
            delete state.labelSet[key];
            return delegate.markEnd(delegate.createLabeledStatement(expr, labeledBody), startToken);
        }

        consumeSemicolon();

        return delegate.markEnd(delegate.createExpressionStatement(expr), startToken);
    }

    // 13 Function Definition

    function parseFunctionSourceElements() {
        var sourceElement, sourceElements = [], token, directive, firstRestricted,
            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody, startToken;

        startToken = lookahead;
        expect('{');

        while (index < length) {
            if (lookahead.type !== Token.StringLiteral) {
                break;
            }
            token = lookahead;

            sourceElement = parseSourceElement();
            sourceElements.push(sourceElement);
            if (sourceElement.expression.type !== Syntax.Literal) {
                // this is not directive
                break;
            }
            directive = source.slice(token.start + 1, token.end - 1);
            if (directive === 'use strict') {
                strict = true;
                if (firstRestricted) {
                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);
                }
            } else {
                if (!firstRestricted && token.octal) {
                    firstRestricted = token;
                }
            }
        }

        oldLabelSet = state.labelSet;
        oldInIteration = state.inIteration;
        oldInSwitch = state.inSwitch;
        oldInFunctionBody = state.inFunctionBody;

        state.labelSet = {};
        state.inIteration = false;
        state.inSwitch = false;
        state.inFunctionBody = true;

        while (index < length) {
            if (match('}')) {
                break;
            }
            sourceElement = parseSourceElement();
            if (typeof sourceElement === 'undefined') {
                break;
            }
            sourceElements.push(sourceElement);
        }

        expect('}');

        state.labelSet = oldLabelSet;
        state.inIteration = oldInIteration;
        state.inSwitch = oldInSwitch;
        state.inFunctionBody = oldInFunctionBody;

        return delegate.markEnd(delegate.createBlockStatement(sourceElements), startToken);
    }

    function parseParams(firstRestricted) {
        var param, params = [], token, stricted, paramSet, key, message;
        expect('(');

        if (!match(')')) {
            paramSet = {};
            while (index < length) {
                token = lookahead;
                param = parseVariableIdentifier();
                key = '$' + token.value;
                if (strict) {
                    if (isRestrictedWord(token.value)) {
                        stricted = token;
                        message = Messages.StrictParamName;
                    }
                    if (Object.prototype.hasOwnProperty.call(paramSet, key)) {
                        stricted = token;
                        message = Messages.StrictParamDupe;
                    }
                } else if (!firstRestricted) {
                    if (isRestrictedWord(token.value)) {
                        firstRestricted = token;
                        message = Messages.StrictParamName;
                    } else if (isStrictModeReservedWord(token.value)) {
                        firstRestricted = token;
                        message = Messages.StrictReservedWord;
                    } else if (Object.prototype.hasOwnProperty.call(paramSet, key)) {
                        firstRestricted = token;
                        message = Messages.StrictParamDupe;
                    }
                }
                params.push(param);
                paramSet[key] = true;
                if (match(')')) {
                    break;
                }
                expect(',');
            }
        }

        expect(')');

        return {
            params: params,
            stricted: stricted,
            firstRestricted: firstRestricted,
            message: message
        };
    }

    function parseFunctionDeclaration() {
        var id, params = [], body, token, stricted, tmp, firstRestricted, message, previousStrict, startToken;

        startToken = lookahead;

        expectKeyword('function');
        token = lookahead;
        id = parseVariableIdentifier();
        if (strict) {
            if (isRestrictedWord(token.value)) {
                throwErrorTolerant(token, Messages.StrictFunctionName);
            }
        } else {
            if (isRestrictedWord(token.value)) {
                firstRestricted = token;
                message = Messages.StrictFunctionName;
            } else if (isStrictModeReservedWord(token.value)) {
                firstRestricted = token;
                message = Messages.StrictReservedWord;
            }
        }

        tmp = parseParams(firstRestricted);
        params = tmp.params;
        stricted = tmp.stricted;
        firstRestricted = tmp.firstRestricted;
        if (tmp.message) {
            message = tmp.message;
        }

        previousStrict = strict;
        body = parseFunctionSourceElements();
        if (strict && firstRestricted) {
            throwError(firstRestricted, message);
        }
        if (strict && stricted) {
            throwErrorTolerant(stricted, message);
        }
        strict = previousStrict;

        return delegate.markEnd(delegate.createFunctionDeclaration(id, params, [], body), startToken);
    }

    function parseFunctionExpression() {
        var token, id = null, stricted, firstRestricted, message, tmp, params = [], body, previousStrict, startToken;

        startToken = lookahead;
        expectKeyword('function');

        if (!match('(')) {
            token = lookahead;
            id = parseVariableIdentifier();
            if (strict) {
                if (isRestrictedWord(token.value)) {
                    throwErrorTolerant(token, Messages.StrictFunctionName);
                }
            } else {
                if (isRestrictedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictFunctionName;
                } else if (isStrictModeReservedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictReservedWord;
                }
            }
        }

        tmp = parseParams(firstRestricted);
        params = tmp.params;
        stricted = tmp.stricted;
        firstRestricted = tmp.firstRestricted;
        if (tmp.message) {
            message = tmp.message;
        }

        previousStrict = strict;
        body = parseFunctionSourceElements();
        if (strict && firstRestricted) {
            throwError(firstRestricted, message);
        }
        if (strict && stricted) {
            throwErrorTolerant(stricted, message);
        }
        strict = previousStrict;

        return delegate.markEnd(delegate.createFunctionExpression(id, params, [], body), startToken);
    }

    // 14 Program

    function parseSourceElement() {
        if (lookahead.type === Token.Keyword) {
            switch (lookahead.value) {
            case 'const':
            case 'let':
                return parseConstLetDeclaration(lookahead.value);
            case 'function':
                return parseFunctionDeclaration();
            default:
                return parseStatement();
            }
        }

        if (lookahead.type !== Token.EOF) {
            return parseStatement();
        }
    }

    function parseSourceElements() {
        var sourceElement, sourceElements = [], token, directive, firstRestricted;

        while (index < length) {
            token = lookahead;
            if (token.type !== Token.StringLiteral) {
                break;
            }

            sourceElement = parseSourceElement();
            sourceElements.push(sourceElement);
            if (sourceElement.expression.type !== Syntax.Literal) {
                // this is not directive
                break;
            }
            directive = source.slice(token.start + 1, token.end - 1);
            if (directive === 'use strict') {
                strict = true;
                if (firstRestricted) {
                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);
                }
            } else {
                if (!firstRestricted && token.octal) {
                    firstRestricted = token;
                }
            }
        }

        while (index < length) {
            sourceElement = parseSourceElement();
            /* istanbul ignore if */
            if (typeof sourceElement === 'undefined') {
                break;
            }
            sourceElements.push(sourceElement);
        }
        return sourceElements;
    }

    function parseProgram() {
        var body, startToken;

        skipComment();
        peek();
        startToken = lookahead;
        strict = false;

        body = parseSourceElements();
        return delegate.markEnd(delegate.createProgram(body), startToken);
    }

    function filterTokenLocation() {
        var i, entry, token, tokens = [];

        for (i = 0; i < extra.tokens.length; ++i) {
            entry = extra.tokens[i];
            token = {
                type: entry.type,
                value: entry.value
            };
            if (extra.range) {
                token.range = entry.range;
            }
            if (extra.loc) {
                token.loc = entry.loc;
            }
            tokens.push(token);
        }

        extra.tokens = tokens;
    }

    function tokenize(code, options) {
        var toString,
            token,
            tokens;

        toString = String;
        if (typeof code !== 'string' && !(code instanceof String)) {
            code = toString(code);
        }

        delegate = SyntaxTreeDelegate;
        source = code;
        index = 0;
        lineNumber = (source.length > 0) ? 1 : 0;
        lineStart = 0;
        length = source.length;
        lookahead = null;
        state = {
            allowIn: true,
            labelSet: {},
            inFunctionBody: false,
            inIteration: false,
            inSwitch: false,
            lastCommentStart: -1
        };

        extra = {};

        // Options matching.
        options = options || {};

        // Of course we collect tokens here.
        options.tokens = true;
        extra.tokens = [];
        extra.tokenize = true;
        // The following two fields are necessary to compute the Regex tokens.
        extra.openParenToken = -1;
        extra.openCurlyToken = -1;

        extra.range = (typeof options.range === 'boolean') && options.range;
        extra.loc = (typeof options.loc === 'boolean') && options.loc;

        if (typeof options.comment === 'boolean' && options.comment) {
            extra.comments = [];
        }
        if (typeof options.tolerant === 'boolean' && options.tolerant) {
            extra.errors = [];
        }

        try {
            peek();
            if (lookahead.type === Token.EOF) {
                return extra.tokens;
            }

            token = lex();
            while (lookahead.type !== Token.EOF) {
                try {
                    token = lex();
                } catch (lexError) {
                    token = lookahead;
                    if (extra.errors) {
                        extra.errors.push(lexError);
                        // We have to break on the first error
                        // to avoid infinite loops.
                        break;
                    } else {
                        throw lexError;
                    }
                }
            }

            filterTokenLocation();
            tokens = extra.tokens;
            if (typeof extra.comments !== 'undefined') {
                tokens.comments = extra.comments;
            }
            if (typeof extra.errors !== 'undefined') {
                tokens.errors = extra.errors;
            }
        } catch (e) {
            throw e;
        } finally {
            extra = {};
        }
        return tokens;
    }

    function parse(code, options) {
        var program, toString;

        toString = String;
        if (typeof code !== 'string' && !(code instanceof String)) {
            code = toString(code);
        }

        delegate = SyntaxTreeDelegate;
        source = code;
        index = 0;
        lineNumber = (source.length > 0) ? 1 : 0;
        lineStart = 0;
        length = source.length;
        lookahead = null;
        state = {
            allowIn: true,
            labelSet: {},
            inFunctionBody: false,
            inIteration: false,
            inSwitch: false,
            lastCommentStart: -1
        };

        extra = {};
        if (typeof options !== 'undefined') {
            extra.range = (typeof options.range === 'boolean') && options.range;
            extra.loc = (typeof options.loc === 'boolean') && options.loc;
            extra.attachComment = (typeof options.attachComment === 'boolean') && options.attachComment;

            if (extra.loc && options.source !== null && options.source !== undefined) {
                extra.source = toString(options.source);
            }

            if (typeof options.tokens === 'boolean' && options.tokens) {
                extra.tokens = [];
            }
            if (typeof options.comment === 'boolean' && options.comment) {
                extra.comments = [];
            }
            if (typeof options.tolerant === 'boolean' && options.tolerant) {
                extra.errors = [];
            }
            if (extra.attachComment) {
                extra.range = true;
                extra.comments = [];
                extra.bottomRightStack = [];
                extra.trailingComments = [];
                extra.leadingComments = [];
            }
        }

        try {
            program = parseProgram();
            if (typeof extra.comments !== 'undefined') {
                program.comments = extra.comments;
            }
            if (typeof extra.tokens !== 'undefined') {
                filterTokenLocation();
                program.tokens = extra.tokens;
            }
            if (typeof extra.errors !== 'undefined') {
                program.errors = extra.errors;
            }
        } catch (e) {
            throw e;
        } finally {
            extra = {};
        }

        return program;
    }

    // Sync with *.json manifests.
    exports.version = '1.2.5';

    exports.tokenize = tokenize;

    exports.parse = parse;

    // Deep copy.
   /* istanbul ignore next */
    exports.Syntax = (function () {
        var name, types = {};

        if (typeof Object.create === 'function') {
            types = Object.create(null);
        }

        for (name in Syntax) {
            if (Syntax.hasOwnProperty(name)) {
                types[name] = Syntax[name];
            }
        }

        if (typeof Object.freeze === 'function') {
            Object.freeze(types);
        }

        return types;
    }());

}));
/* vim: set sw=4 ts=4 et tw=80 : */

},{}],61:[function(require,module,exports){
/*
  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
/*jslint vars:false, bitwise:true*/
/*jshint indent:4*/
/*global exports:true*/
(function clone(exports) {
    'use strict';

    var Syntax,
        isArray,
        VisitorOption,
        VisitorKeys,
        objectCreate,
        objectKeys,
        BREAK,
        SKIP,
        REMOVE;

    function ignoreJSHintError() { }

    isArray = Array.isArray;
    if (!isArray) {
        isArray = function isArray(array) {
            return Object.prototype.toString.call(array) === '[object Array]';
        };
    }

    function deepCopy(obj) {
        var ret = {}, key, val;
        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                val = obj[key];
                if (typeof val === 'object' && val !== null) {
                    ret[key] = deepCopy(val);
                } else {
                    ret[key] = val;
                }
            }
        }
        return ret;
    }

    function shallowCopy(obj) {
        var ret = {}, key;
        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                ret[key] = obj[key];
            }
        }
        return ret;
    }
    ignoreJSHintError(shallowCopy);

    // based on LLVM libc++ upper_bound / lower_bound
    // MIT License

    function upperBound(array, func) {
        var diff, len, i, current;

        len = array.length;
        i = 0;

        while (len) {
            diff = len >>> 1;
            current = i + diff;
            if (func(array[current])) {
                len = diff;
            } else {
                i = current + 1;
                len -= diff + 1;
            }
        }
        return i;
    }

    function lowerBound(array, func) {
        var diff, len, i, current;

        len = array.length;
        i = 0;

        while (len) {
            diff = len >>> 1;
            current = i + diff;
            if (func(array[current])) {
                i = current + 1;
                len -= diff + 1;
            } else {
                len = diff;
            }
        }
        return i;
    }
    ignoreJSHintError(lowerBound);

    objectCreate = Object.create || (function () {
        function F() { }

        return function (o) {
            F.prototype = o;
            return new F();
        };
    })();

    objectKeys = Object.keys || function (o) {
        var keys = [], key;
        for (key in o) {
            keys.push(key);
        }
        return keys;
    };

    function extend(to, from) {
        var keys = objectKeys(from), key, i, len;
        for (i = 0, len = keys.length; i < len; i += 1) {
            key = keys[i];
            to[key] = from[key];
        }
        return to;
    }

    Syntax = {
        AssignmentExpression: 'AssignmentExpression',
        AssignmentPattern: 'AssignmentPattern',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        AwaitExpression: 'AwaitExpression', // CAUTION: It's deferred to ES7.
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ComprehensionBlock: 'ComprehensionBlock',  // CAUTION: It's deferred to ES7.
        ComprehensionExpression: 'ComprehensionExpression',  // CAUTION: It's deferred to ES7.
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DebuggerStatement: 'DebuggerStatement',
        DirectiveStatement: 'DirectiveStatement',
        DoWhileStatement: 'DoWhileStatement',
        EmptyStatement: 'EmptyStatement',
        ExportAllDeclaration: 'ExportAllDeclaration',
        ExportDefaultDeclaration: 'ExportDefaultDeclaration',
        ExportNamedDeclaration: 'ExportNamedDeclaration',
        ExportSpecifier: 'ExportSpecifier',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForInStatement: 'ForInStatement',
        ForOfStatement: 'ForOfStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        GeneratorExpression: 'GeneratorExpression',  // CAUTION: It's deferred to ES7.
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportDeclaration: 'ImportDeclaration',
        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
        ImportSpecifier: 'ImportSpecifier',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MetaProperty: 'MetaProperty',
        MethodDefinition: 'MethodDefinition',
        ModuleSpecifier: 'ModuleSpecifier',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        Program: 'Program',
        Property: 'Property',
        RestElement: 'RestElement',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SpreadElement: 'SpreadElement',
        Super: 'Super',
        SwitchStatement: 'SwitchStatement',
        SwitchCase: 'SwitchCase',
        TaggedTemplateExpression: 'TaggedTemplateExpression',
        TemplateElement: 'TemplateElement',
        TemplateLiteral: 'TemplateLiteral',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression'
    };

    VisitorKeys = {
        AssignmentExpression: ['left', 'right'],
        AssignmentPattern: ['left', 'right'],
        ArrayExpression: ['elements'],
        ArrayPattern: ['elements'],
        ArrowFunctionExpression: ['params', 'body'],
        AwaitExpression: ['argument'], // CAUTION: It's deferred to ES7.
        BlockStatement: ['body'],
        BinaryExpression: ['left', 'right'],
        BreakStatement: ['label'],
        CallExpression: ['callee', 'arguments'],
        CatchClause: ['param', 'body'],
        ClassBody: ['body'],
        ClassDeclaration: ['id', 'superClass', 'body'],
        ClassExpression: ['id', 'superClass', 'body'],
        ComprehensionBlock: ['left', 'right'],  // CAUTION: It's deferred to ES7.
        ComprehensionExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.
        ConditionalExpression: ['test', 'consequent', 'alternate'],
        ContinueStatement: ['label'],
        DebuggerStatement: [],
        DirectiveStatement: [],
        DoWhileStatement: ['body', 'test'],
        EmptyStatement: [],
        ExportAllDeclaration: ['source'],
        ExportDefaultDeclaration: ['declaration'],
        ExportNamedDeclaration: ['declaration', 'specifiers', 'source'],
        ExportSpecifier: ['exported', 'local'],
        ExpressionStatement: ['expression'],
        ForStatement: ['init', 'test', 'update', 'body'],
        ForInStatement: ['left', 'right', 'body'],
        ForOfStatement: ['left', 'right', 'body'],
        FunctionDeclaration: ['id', 'params', 'body'],
        FunctionExpression: ['id', 'params', 'body'],
        GeneratorExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.
        Identifier: [],
        IfStatement: ['test', 'consequent', 'alternate'],
        ImportDeclaration: ['specifiers', 'source'],
        ImportDefaultSpecifier: ['local'],
        ImportNamespaceSpecifier: ['local'],
        ImportSpecifier: ['imported', 'local'],
        Literal: [],
        LabeledStatement: ['label', 'body'],
        LogicalExpression: ['left', 'right'],
        MemberExpression: ['object', 'property'],
        MetaProperty: ['meta', 'property'],
        MethodDefinition: ['key', 'value'],
        ModuleSpecifier: [],
        NewExpression: ['callee', 'arguments'],
        ObjectExpression: ['properties'],
        ObjectPattern: ['properties'],
        Program: ['body'],
        Property: ['key', 'value'],
        RestElement: [ 'argument' ],
        ReturnStatement: ['argument'],
        SequenceExpression: ['expressions'],
        SpreadElement: ['argument'],
        Super: [],
        SwitchStatement: ['discriminant', 'cases'],
        SwitchCase: ['test', 'consequent'],
        TaggedTemplateExpression: ['tag', 'quasi'],
        TemplateElement: [],
        TemplateLiteral: ['quasis', 'expressions'],
        ThisExpression: [],
        ThrowStatement: ['argument'],
        TryStatement: ['block', 'handler', 'finalizer'],
        UnaryExpression: ['argument'],
        UpdateExpression: ['argument'],
        VariableDeclaration: ['declarations'],
        VariableDeclarator: ['id', 'init'],
        WhileStatement: ['test', 'body'],
        WithStatement: ['object', 'body'],
        YieldExpression: ['argument']
    };

    // unique id
    BREAK = {};
    SKIP = {};
    REMOVE = {};

    VisitorOption = {
        Break: BREAK,
        Skip: SKIP,
        Remove: REMOVE
    };

    function Reference(parent, key) {
        this.parent = parent;
        this.key = key;
    }

    Reference.prototype.replace = function replace(node) {
        this.parent[this.key] = node;
    };

    Reference.prototype.remove = function remove() {
        if (isArray(this.parent)) {
            this.parent.splice(this.key, 1);
            return true;
        } else {
            this.replace(null);
            return false;
        }
    };

    function Element(node, path, wrap, ref) {
        this.node = node;
        this.path = path;
        this.wrap = wrap;
        this.ref = ref;
    }

    function Controller() { }

    // API:
    // return property path array from root to current node
    Controller.prototype.path = function path() {
        var i, iz, j, jz, result, element;

        function addToPath(result, path) {
            if (isArray(path)) {
                for (j = 0, jz = path.length; j < jz; ++j) {
                    result.push(path[j]);
                }
            } else {
                result.push(path);
            }
        }

        // root node
        if (!this.__current.path) {
            return null;
        }

        // first node is sentinel, second node is root element
        result = [];
        for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {
            element = this.__leavelist[i];
            addToPath(result, element.path);
        }
        addToPath(result, this.__current.path);
        return result;
    };

    // API:
    // return type of current node
    Controller.prototype.type = function () {
        var node = this.current();
        return node.type || this.__current.wrap;
    };

    // API:
    // return array of parent elements
    Controller.prototype.parents = function parents() {
        var i, iz, result;

        // first node is sentinel
        result = [];
        for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {
            result.push(this.__leavelist[i].node);
        }

        return result;
    };

    // API:
    // return current node
    Controller.prototype.current = function current() {
        return this.__current.node;
    };

    Controller.prototype.__execute = function __execute(callback, element) {
        var previous, result;

        result = undefined;

        previous  = this.__current;
        this.__current = element;
        this.__state = null;
        if (callback) {
            result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);
        }
        this.__current = previous;

        return result;
    };

    // API:
    // notify control skip / break
    Controller.prototype.notify = function notify(flag) {
        this.__state = flag;
    };

    // API:
    // skip child nodes of current node
    Controller.prototype.skip = function () {
        this.notify(SKIP);
    };

    // API:
    // break traversals
    Controller.prototype['break'] = function () {
        this.notify(BREAK);
    };

    // API:
    // remove node
    Controller.prototype.remove = function () {
        this.notify(REMOVE);
    };

    Controller.prototype.__initialize = function(root, visitor) {
        this.visitor = visitor;
        this.root = root;
        this.__worklist = [];
        this.__leavelist = [];
        this.__current = null;
        this.__state = null;
        this.__fallback = visitor.fallback === 'iteration';
        this.__keys = VisitorKeys;
        if (visitor.keys) {
            this.__keys = extend(objectCreate(this.__keys), visitor.keys);
        }
    };

    function isNode(node) {
        if (node == null) {
            return false;
        }
        return typeof node === 'object' && typeof node.type === 'string';
    }

    function isProperty(nodeType, key) {
        return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === key;
    }

    Controller.prototype.traverse = function traverse(root, visitor) {
        var worklist,
            leavelist,
            element,
            node,
            nodeType,
            ret,
            key,
            current,
            current2,
            candidates,
            candidate,
            sentinel;

        this.__initialize(root, visitor);

        sentinel = {};

        // reference
        worklist = this.__worklist;
        leavelist = this.__leavelist;

        // initialize
        worklist.push(new Element(root, null, null, null));
        leavelist.push(new Element(null, null, null, null));

        while (worklist.length) {
            element = worklist.pop();

            if (element === sentinel) {
                element = leavelist.pop();

                ret = this.__execute(visitor.leave, element);

                if (this.__state === BREAK || ret === BREAK) {
                    return;
                }
                continue;
            }

            if (element.node) {

                ret = this.__execute(visitor.enter, element);

                if (this.__state === BREAK || ret === BREAK) {
                    return;
                }

                worklist.push(sentinel);
                leavelist.push(element);

                if (this.__state === SKIP || ret === SKIP) {
                    continue;
                }

                node = element.node;
                nodeType = node.type || element.wrap;
                candidates = this.__keys[nodeType];
                if (!candidates) {
                    if (this.__fallback) {
                        candidates = objectKeys(node);
                    } else {
                        throw new Error('Unknown node type ' + nodeType + '.');
                    }
                }

                current = candidates.length;
                while ((current -= 1) >= 0) {
                    key = candidates[current];
                    candidate = node[key];
                    if (!candidate) {
                        continue;
                    }

                    if (isArray(candidate)) {
                        current2 = candidate.length;
                        while ((current2 -= 1) >= 0) {
                            if (!candidate[current2]) {
                                continue;
                            }
                            if (isProperty(nodeType, candidates[current])) {
                                element = new Element(candidate[current2], [key, current2], 'Property', null);
                            } else if (isNode(candidate[current2])) {
                                element = new Element(candidate[current2], [key, current2], null, null);
                            } else {
                                continue;
                            }
                            worklist.push(element);
                        }
                    } else if (isNode(candidate)) {
                        worklist.push(new Element(candidate, key, null, null));
                    }
                }
            }
        }
    };

    Controller.prototype.replace = function replace(root, visitor) {
        function removeElem(element) {
            var i,
                key,
                nextElem,
                parent;

            if (element.ref.remove()) {
                // When the reference is an element of an array.
                key = element.ref.key;
                parent = element.ref.parent;

                // If removed from array, then decrease following items' keys.
                i = worklist.length;
                while (i--) {
                    nextElem = worklist[i];
                    if (nextElem.ref && nextElem.ref.parent === parent) {
                        if  (nextElem.ref.key < key) {
                            break;
                        }
                        --nextElem.ref.key;
                    }
                }
            }
        }

        var worklist,
            leavelist,
            node,
            nodeType,
            target,
            element,
            current,
            current2,
            candidates,
            candidate,
            sentinel,
            outer,
            key;

        this.__initialize(root, visitor);

        sentinel = {};

        // reference
        worklist = this.__worklist;
        leavelist = this.__leavelist;

        // initialize
        outer = {
            root: root
        };
        element = new Element(root, null, null, new Reference(outer, 'root'));
        worklist.push(element);
        leavelist.push(element);

        while (worklist.length) {
            element = worklist.pop();

            if (element === sentinel) {
                element = leavelist.pop();

                target = this.__execute(visitor.leave, element);

                // node may be replaced with null,
                // so distinguish between undefined and null in this place
                if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
                    // replace
                    element.ref.replace(target);
                }

                if (this.__state === REMOVE || target === REMOVE) {
                    removeElem(element);
                }

                if (this.__state === BREAK || target === BREAK) {
                    return outer.root;
                }
                continue;
            }

            target = this.__execute(visitor.enter, element);

            // node may be replaced with null,
            // so distinguish between undefined and null in this place
            if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
                // replace
                element.ref.replace(target);
                element.node = target;
            }

            if (this.__state === REMOVE || target === REMOVE) {
                removeElem(element);
                element.node = null;
            }

            if (this.__state === BREAK || target === BREAK) {
                return outer.root;
            }

            // node may be null
            node = element.node;
            if (!node) {
                continue;
            }

            worklist.push(sentinel);
            leavelist.push(element);

            if (this.__state === SKIP || target === SKIP) {
                continue;
            }

            nodeType = node.type || element.wrap;
            candidates = this.__keys[nodeType];
            if (!candidates) {
                if (this.__fallback) {
                    candidates = objectKeys(node);
                } else {
                    throw new Error('Unknown node type ' + nodeType + '.');
                }
            }

            current = candidates.length;
            while ((current -= 1) >= 0) {
                key = candidates[current];
                candidate = node[key];
                if (!candidate) {
                    continue;
                }

                if (isArray(candidate)) {
                    current2 = candidate.length;
                    while ((current2 -= 1) >= 0) {
                        if (!candidate[current2]) {
                            continue;
                        }
                        if (isProperty(nodeType, candidates[current])) {
                            element = new Element(candidate[current2], [key, current2], 'Property', new Reference(candidate, current2));
                        } else if (isNode(candidate[current2])) {
                            element = new Element(candidate[current2], [key, current2], null, new Reference(candidate, current2));
                        } else {
                            continue;
                        }
                        worklist.push(element);
                    }
                } else if (isNode(candidate)) {
                    worklist.push(new Element(candidate, key, null, new Reference(node, key)));
                }
            }
        }

        return outer.root;
    };

    function traverse(root, visitor) {
        var controller = new Controller();
        return controller.traverse(root, visitor);
    }

    function replace(root, visitor) {
        var controller = new Controller();
        return controller.replace(root, visitor);
    }

    function extendCommentRange(comment, tokens) {
        var target;

        target = upperBound(tokens, function search(token) {
            return token.range[0] > comment.range[0];
        });

        comment.extendedRange = [comment.range[0], comment.range[1]];

        if (target !== tokens.length) {
            comment.extendedRange[1] = tokens[target].range[0];
        }

        target -= 1;
        if (target >= 0) {
            comment.extendedRange[0] = tokens[target].range[1];
        }

        return comment;
    }

    function attachComments(tree, providedComments, tokens) {
        // At first, we should calculate extended comment ranges.
        var comments = [], comment, len, i, cursor;

        if (!tree.range) {
            throw new Error('attachComments needs range information');
        }

        // tokens array is empty, we attach comments to tree as 'leadingComments'
        if (!tokens.length) {
            if (providedComments.length) {
                for (i = 0, len = providedComments.length; i < len; i += 1) {
                    comment = deepCopy(providedComments[i]);
                    comment.extendedRange = [0, tree.range[0]];
                    comments.push(comment);
                }
                tree.leadingComments = comments;
            }
            return tree;
        }

        for (i = 0, len = providedComments.length; i < len; i += 1) {
            comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));
        }

        // This is based on John Freeman's implementation.
        cursor = 0;
        traverse(tree, {
            enter: function (node) {
                var comment;

                while (cursor < comments.length) {
                    comment = comments[cursor];
                    if (comment.extendedRange[1] > node.range[0]) {
                        break;
                    }

                    if (comment.extendedRange[1] === node.range[0]) {
                        if (!node.leadingComments) {
                            node.leadingComments = [];
                        }
                        node.leadingComments.push(comment);
                        comments.splice(cursor, 1);
                    } else {
                        cursor += 1;
                    }
                }

                // already out of owned node
                if (cursor === comments.length) {
                    return VisitorOption.Break;
                }

                if (comments[cursor].extendedRange[0] > node.range[1]) {
                    return VisitorOption.Skip;
                }
            }
        });

        cursor = 0;
        traverse(tree, {
            leave: function (node) {
                var comment;

                while (cursor < comments.length) {
                    comment = comments[cursor];
                    if (node.range[1] < comment.extendedRange[0]) {
                        break;
                    }

                    if (node.range[1] === comment.extendedRange[0]) {
                        if (!node.trailingComments) {
                            node.trailingComments = [];
                        }
                        node.trailingComments.push(comment);
                        comments.splice(cursor, 1);
                    } else {
                        cursor += 1;
                    }
                }

                // already out of owned node
                if (cursor === comments.length) {
                    return VisitorOption.Break;
                }

                if (comments[cursor].extendedRange[0] > node.range[1]) {
                    return VisitorOption.Skip;
                }
            }
        });

        return tree;
    }

    exports.version = require('./package.json').version;
    exports.Syntax = Syntax;
    exports.traverse = traverse;
    exports.replace = replace;
    exports.attachComments = attachComments;
    exports.VisitorKeys = VisitorKeys;
    exports.VisitorOption = VisitorOption;
    exports.Controller = Controller;
    exports.cloneEnvironment = function () { return clone({}); };

    return exports;
}(exports));
/* vim: set sw=4 ts=4 et tw=80 : */

},{"./package.json":62}],62:[function(require,module,exports){
module.exports={
  "_args": [
    [
      "estraverse@4.1.1",
      "/Users/jan/development/shadejs"
    ]
  ],
  "_from": "estraverse@4.1.1",
  "_id": "estraverse@4.1.1",
  "_inCache": true,
  "_location": "/estraverse",
  "_nodeVersion": "4.1.1",
  "_npmUser": {
    "email": "utatane.tea@gmail.com",
    "name": "constellation"
  },
  "_npmVersion": "2.14.4",
  "_phantomChildren": {},
  "_requested": {
    "name": "estraverse",
    "raw": "estraverse@4.1.1",
    "rawSpec": "4.1.1",
    "scope": null,
    "spec": "4.1.1",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.1.1.tgz",
  "_shasum": "f6caca728933a850ef90661d0e17982ba47111a2",
  "_shrinkwrap": null,
  "_spec": "estraverse@4.1.1",
  "_where": "/Users/jan/development/shadejs",
  "bugs": {
    "url": "https://github.com/estools/estraverse/issues"
  },
  "dependencies": {},
  "description": "ECMAScript JS AST traversal functions",
  "devDependencies": {
    "chai": "^2.1.1",
    "coffee-script": "^1.8.0",
    "espree": "^1.11.0",
    "gulp": "^3.8.10",
    "gulp-bump": "^0.2.2",
    "gulp-filter": "^2.0.0",
    "gulp-git": "^1.0.1",
    "gulp-tag-version": "^1.2.1",
    "jshint": "^2.5.6",
    "mocha": "^2.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "f6caca728933a850ef90661d0e17982ba47111a2",
    "tarball": "http://registry.npmjs.org/estraverse/-/estraverse-4.1.1.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "bbcccbfe98296585e4311c8755e1d00dcd581e3c",
  "homepage": "https://github.com/estools/estraverse",
  "installable": true,
  "license": "BSD-2-Clause",
  "main": "estraverse.js",
  "maintainers": [
    {
      "name": "constellation",
      "email": "utatane.tea@gmail.com"
    },
    {
      "name": "michaelficarra",
      "email": "npm@michael.ficarra.me"
    },
    {
      "name": "nzakas",
      "email": "nicholas@nczconsulting.com"
    }
  ],
  "name": "estraverse",
  "optionalDependencies": {},
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/estools/estraverse.git"
  },
  "scripts": {
    "lint": "jshint estraverse.js",
    "test": "npm run-script lint && npm run-script unit-test",
    "unit-test": "mocha --compilers coffee:coffee-script/register"
  },
  "version": "4.1.1"
}

},{}],63:[function(require,module,exports){
/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

(function () {
    'use strict';

    function isExpression(node) {
        if (node == null) { return false; }
        switch (node.type) {
            case 'ArrayExpression':
            case 'AssignmentExpression':
            case 'BinaryExpression':
            case 'CallExpression':
            case 'ConditionalExpression':
            case 'FunctionExpression':
            case 'Identifier':
            case 'Literal':
            case 'LogicalExpression':
            case 'MemberExpression':
            case 'NewExpression':
            case 'ObjectExpression':
            case 'SequenceExpression':
            case 'ThisExpression':
            case 'UnaryExpression':
            case 'UpdateExpression':
                return true;
        }
        return false;
    }

    function isIterationStatement(node) {
        if (node == null) { return false; }
        switch (node.type) {
            case 'DoWhileStatement':
            case 'ForInStatement':
            case 'ForStatement':
            case 'WhileStatement':
                return true;
        }
        return false;
    }

    function isStatement(node) {
        if (node == null) { return false; }
        switch (node.type) {
            case 'BlockStatement':
            case 'BreakStatement':
            case 'ContinueStatement':
            case 'DebuggerStatement':
            case 'DoWhileStatement':
            case 'EmptyStatement':
            case 'ExpressionStatement':
            case 'ForInStatement':
            case 'ForStatement':
            case 'IfStatement':
            case 'LabeledStatement':
            case 'ReturnStatement':
            case 'SwitchStatement':
            case 'ThrowStatement':
            case 'TryStatement':
            case 'VariableDeclaration':
            case 'WhileStatement':
            case 'WithStatement':
                return true;
        }
        return false;
    }

    function isSourceElement(node) {
      return isStatement(node) || node != null && node.type === 'FunctionDeclaration';
    }

    function trailingStatement(node) {
        switch (node.type) {
        case 'IfStatement':
            if (node.alternate != null) {
                return node.alternate;
            }
            return node.consequent;

        case 'LabeledStatement':
        case 'ForStatement':
        case 'ForInStatement':
        case 'WhileStatement':
        case 'WithStatement':
            return node.body;
        }
        return null;
    }

    function isProblematicIfStatement(node) {
        var current;

        if (node.type !== 'IfStatement') {
            return false;
        }
        if (node.alternate == null) {
            return false;
        }
        current = node.consequent;
        do {
            if (current.type === 'IfStatement') {
                if (current.alternate == null)  {
                    return true;
                }
            }
            current = trailingStatement(current);
        } while (current);

        return false;
    }

    module.exports = {
        isExpression: isExpression,
        isStatement: isStatement,
        isIterationStatement: isIterationStatement,
        isSourceElement: isSourceElement,
        isProblematicIfStatement: isProblematicIfStatement,

        trailingStatement: trailingStatement
    };
}());
/* vim: set sw=4 ts=4 et tw=80 : */

},{}],64:[function(require,module,exports){
/*
  Copyright (C) 2013-2014 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

(function () {
    'use strict';

    var Regex, NON_ASCII_WHITESPACES;

    // See `tools/generate-identifier-regex.js`.
    Regex = {
        NonAsciiIdentifierStart: new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]'),
        NonAsciiIdentifierPart: new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0\u08A2-\u08AC\u08E4-\u08FE\u0900-\u0963\u0966-\u096F\u0971-\u0977\u0979-\u097F\u0981-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C82\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D02\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191C\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1D00-\u1DE6\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA697\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7B\uAA80-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE26\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]')
    };

    function isDecimalDigit(ch) {
        return (ch >= 48 && ch <= 57);   // 0..9
    }

    function isHexDigit(ch) {
        return isDecimalDigit(ch) ||    // 0..9
            (97 <= ch && ch <= 102) ||  // a..f
            (65 <= ch && ch <= 70);     // A..F
    }

    function isOctalDigit(ch) {
        return (ch >= 48 && ch <= 55);   // 0..7
    }

    // 7.2 White Space

    NON_ASCII_WHITESPACES = [
        0x1680, 0x180E,
        0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A,
        0x202F, 0x205F,
        0x3000,
        0xFEFF
    ];

    function isWhiteSpace(ch) {
        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||
            (ch >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0);
    }

    // 7.3 Line Terminators

    function isLineTerminator(ch) {
        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);
    }

    // 7.6 Identifier Names and Identifiers

    function isIdentifierStart(ch) {
        return (ch >= 97 && ch <= 122) ||     // a..z
            (ch >= 65 && ch <= 90) ||         // A..Z
            (ch === 36) || (ch === 95) ||     // $ (dollar) and _ (underscore)
            (ch === 92) ||                    // \ (backslash)
            ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(String.fromCharCode(ch)));
    }

    function isIdentifierPart(ch) {
        return (ch >= 97 && ch <= 122) ||     // a..z
            (ch >= 65 && ch <= 90) ||         // A..Z
            (ch >= 48 && ch <= 57) ||         // 0..9
            (ch === 36) || (ch === 95) ||     // $ (dollar) and _ (underscore)
            (ch === 92) ||                    // \ (backslash)
            ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(String.fromCharCode(ch)));
    }

    module.exports = {
        isDecimalDigit: isDecimalDigit,
        isHexDigit: isHexDigit,
        isOctalDigit: isOctalDigit,
        isWhiteSpace: isWhiteSpace,
        isLineTerminator: isLineTerminator,
        isIdentifierStart: isIdentifierStart,
        isIdentifierPart: isIdentifierPart
    };
}());
/* vim: set sw=4 ts=4 et tw=80 : */

},{}],65:[function(require,module,exports){
/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

(function () {
    'use strict';

    var code = require('./code');

    function isStrictModeReservedWordES6(id) {
        switch (id) {
        case 'implements':
        case 'interface':
        case 'package':
        case 'private':
        case 'protected':
        case 'public':
        case 'static':
        case 'let':
            return true;
        default:
            return false;
        }
    }

    function isKeywordES5(id, strict) {
        // yield should not be treated as keyword under non-strict mode.
        if (!strict && id === 'yield') {
            return false;
        }
        return isKeywordES6(id, strict);
    }

    function isKeywordES6(id, strict) {
        if (strict && isStrictModeReservedWordES6(id)) {
            return true;
        }

        switch (id.length) {
        case 2:
            return (id === 'if') || (id === 'in') || (id === 'do');
        case 3:
            return (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');
        case 4:
            return (id === 'this') || (id === 'else') || (id === 'case') ||
                (id === 'void') || (id === 'with') || (id === 'enum');
        case 5:
            return (id === 'while') || (id === 'break') || (id === 'catch') ||
                (id === 'throw') || (id === 'const') || (id === 'yield') ||
                (id === 'class') || (id === 'super');
        case 6:
            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
                (id === 'switch') || (id === 'export') || (id === 'import');
        case 7:
            return (id === 'default') || (id === 'finally') || (id === 'extends');
        case 8:
            return (id === 'function') || (id === 'continue') || (id === 'debugger');
        case 10:
            return (id === 'instanceof');
        default:
            return false;
        }
    }

    function isReservedWordES5(id, strict) {
        return id === 'null' || id === 'true' || id === 'false' || isKeywordES5(id, strict);
    }

    function isReservedWordES6(id, strict) {
        return id === 'null' || id === 'true' || id === 'false' || isKeywordES6(id, strict);
    }

    function isRestrictedWord(id) {
        return id === 'eval' || id === 'arguments';
    }

    function isIdentifierName(id) {
        var i, iz, ch;

        if (id.length === 0) {
            return false;
        }

        ch = id.charCodeAt(0);
        if (!code.isIdentifierStart(ch) || ch === 92) {  // \ (backslash)
            return false;
        }

        for (i = 1, iz = id.length; i < iz; ++i) {
            ch = id.charCodeAt(i);
            if (!code.isIdentifierPart(ch) || ch === 92) {  // \ (backslash)
                return false;
            }
        }
        return true;
    }

    function isIdentifierES5(id, strict) {
        return isIdentifierName(id) && !isReservedWordES5(id, strict);
    }

    function isIdentifierES6(id, strict) {
        return isIdentifierName(id) && !isReservedWordES6(id, strict);
    }

    module.exports = {
        isKeywordES5: isKeywordES5,
        isKeywordES6: isKeywordES6,
        isReservedWordES5: isReservedWordES5,
        isReservedWordES6: isReservedWordES6,
        isRestrictedWord: isRestrictedWord,
        isIdentifierName: isIdentifierName,
        isIdentifierES5: isIdentifierES5,
        isIdentifierES6: isIdentifierES6
    };
}());
/* vim: set sw=4 ts=4 et tw=80 : */

},{"./code":64}],66:[function(require,module,exports){
/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


(function () {
    'use strict';

    exports.ast = require('./ast');
    exports.code = require('./code');
    exports.keyword = require('./keyword');
}());
/* vim: set sw=4 ts=4 et tw=80 : */

},{"./ast":63,"./code":64,"./keyword":65}],67:[function(require,module,exports){
/**
 * @fileoverview gl-matrix - High performance matrix and vector operations
 * @author Brandon Jones
 * @author Colin MacKenzie IV
 * @version 2.3.0
 */

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */
// END HEADER

exports.glMatrix = require("./gl-matrix/common.js");
exports.mat2 = require("./gl-matrix/mat2.js");
exports.mat2d = require("./gl-matrix/mat2d.js");
exports.mat3 = require("./gl-matrix/mat3.js");
exports.mat4 = require("./gl-matrix/mat4.js");
exports.quat = require("./gl-matrix/quat.js");
exports.vec2 = require("./gl-matrix/vec2.js");
exports.vec3 = require("./gl-matrix/vec3.js");
exports.vec4 = require("./gl-matrix/vec4.js");
},{"./gl-matrix/common.js":68,"./gl-matrix/mat2.js":69,"./gl-matrix/mat2d.js":70,"./gl-matrix/mat3.js":71,"./gl-matrix/mat4.js":72,"./gl-matrix/quat.js":73,"./gl-matrix/vec2.js":74,"./gl-matrix/vec3.js":75,"./gl-matrix/vec4.js":76}],68:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

/**
 * @class Common utilities
 * @name glMatrix
 */
var glMatrix = {};

// Constants
glMatrix.EPSILON = 0.000001;
glMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
glMatrix.RANDOM = Math.random;

/**
 * Sets the type of array used when creating new vectors and matrices
 *
 * @param {Type} type Array type, such as Float32Array or Array
 */
glMatrix.setMatrixArrayType = function(type) {
    GLMAT_ARRAY_TYPE = type;
}

var degree = Math.PI / 180;

/**
* Convert Degree To Radian
*
* @param {Number} Angle in Degrees
*/
glMatrix.toRadian = function(a){
     return a * degree;
}

module.exports = glMatrix;

},{}],69:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");

/**
 * @class 2x2 Matrix
 * @name mat2
 */
var mat2 = {};

/**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */
mat2.create = function() {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {mat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */
mat2.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */
mat2.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a1 = a[1];
        out[1] = a[2];
        out[2] = a1;
    } else {
        out[0] = a[0];
        out[1] = a[2];
        out[2] = a[1];
        out[3] = a[3];
    }
    
    return out;
};

/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.invert = function(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],

        // Calculate the determinant
        det = a0 * a3 - a2 * a1;

    if (!det) {
        return null;
    }
    det = 1.0 / det;
    
    out[0] =  a3 * det;
    out[1] = -a1 * det;
    out[2] = -a2 * det;
    out[3] =  a0 * det;

    return out;
};

/**
 * Calculates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.adjoint = function(out, a) {
    // Caching this value is nessecary if out == a
    var a0 = a[0];
    out[0] =  a[3];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] =  a0;

    return out;
};

/**
 * Calculates the determinant of a mat2
 *
 * @param {mat2} a the source matrix
 * @returns {Number} determinant of a
 */
mat2.determinant = function (a) {
    return a[0] * a[3] - a[2] * a[1];
};

/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
mat2.multiply = function (out, a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = a0 * b0 + a2 * b1;
    out[1] = a1 * b0 + a3 * b1;
    out[2] = a0 * b2 + a2 * b3;
    out[3] = a1 * b2 + a3 * b3;
    return out;
};

/**
 * Alias for {@link mat2.multiply}
 * @function
 */
mat2.mul = mat2.multiply;

/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */
mat2.rotate = function (out, a, rad) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = a0 *  c + a2 * s;
    out[1] = a1 *  c + a3 * s;
    out[2] = a0 * -s + a2 * c;
    out[3] = a1 * -s + a3 * c;
    return out;
};

/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/
mat2.scale = function(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        v0 = v[0], v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a2 * v1;
    out[3] = a3 * v1;
    return out;
};

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.rotate(dest, dest, rad);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */
mat2.fromRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = -s;
    out[3] = c;
    return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.scale(dest, dest, vec);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2} out
 */
mat2.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = v[1];
    return out;
}

/**
 * Returns a string representation of a mat2
 *
 * @param {mat2} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat2.str = function (a) {
    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

/**
 * Returns Frobenius norm of a mat2
 *
 * @param {mat2} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
mat2.frob = function (a) {
    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))
};

/**
 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
 * @param {mat2} L the lower triangular matrix 
 * @param {mat2} D the diagonal matrix 
 * @param {mat2} U the upper triangular matrix 
 * @param {mat2} a the input matrix to factorize
 */

mat2.LDU = function (L, D, U, a) { 
    L[2] = a[2]/a[0]; 
    U[0] = a[0]; 
    U[1] = a[1]; 
    U[3] = a[3] - L[2] * U[1]; 
    return [L, D, U];       
}; 


module.exports = mat2;

},{"./common.js":68}],70:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");

/**
 * @class 2x3 Matrix
 * @name mat2d
 * 
 * @description 
 * A mat2d contains six elements defined as:
 * <pre>
 * [a, c, tx,
 *  b, d, ty]
 * </pre>
 * This is a short form for the 3x3 matrix:
 * <pre>
 * [a, c, tx,
 *  b, d, ty,
 *  0, 0, 1]
 * </pre>
 * The last row is ignored so the array is shorter and operations are faster.
 */
var mat2d = {};

/**
 * Creates a new identity mat2d
 *
 * @returns {mat2d} a new 2x3 matrix
 */
mat2d.create = function() {
    var out = new glMatrix.ARRAY_TYPE(6);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
};

/**
 * Creates a new mat2d initialized with values from an existing matrix
 *
 * @param {mat2d} a matrix to clone
 * @returns {mat2d} a new 2x3 matrix
 */
mat2d.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(6);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
};

/**
 * Copy the values from one mat2d to another
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
mat2d.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
};

/**
 * Set a mat2d to the identity matrix
 *
 * @param {mat2d} out the receiving matrix
 * @returns {mat2d} out
 */
mat2d.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
};

/**
 * Inverts a mat2d
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
mat2d.invert = function(out, a) {
    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],
        atx = a[4], aty = a[5];

    var det = aa * ad - ab * ac;
    if(!det){
        return null;
    }
    det = 1.0 / det;

    out[0] = ad * det;
    out[1] = -ab * det;
    out[2] = -ac * det;
    out[3] = aa * det;
    out[4] = (ac * aty - ad * atx) * det;
    out[5] = (ab * atx - aa * aty) * det;
    return out;
};

/**
 * Calculates the determinant of a mat2d
 *
 * @param {mat2d} a the source matrix
 * @returns {Number} determinant of a
 */
mat2d.determinant = function (a) {
    return a[0] * a[3] - a[1] * a[2];
};

/**
 * Multiplies two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
mat2d.multiply = function (out, a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
    out[0] = a0 * b0 + a2 * b1;
    out[1] = a1 * b0 + a3 * b1;
    out[2] = a0 * b2 + a2 * b3;
    out[3] = a1 * b2 + a3 * b3;
    out[4] = a0 * b4 + a2 * b5 + a4;
    out[5] = a1 * b4 + a3 * b5 + a5;
    return out;
};

/**
 * Alias for {@link mat2d.multiply}
 * @function
 */
mat2d.mul = mat2d.multiply;

/**
 * Rotates a mat2d by the given angle
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */
mat2d.rotate = function (out, a, rad) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
        s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = a0 *  c + a2 * s;
    out[1] = a1 *  c + a3 * s;
    out[2] = a0 * -s + a2 * c;
    out[3] = a1 * -s + a3 * c;
    out[4] = a4;
    out[5] = a5;
    return out;
};

/**
 * Scales the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2d} out
 **/
mat2d.scale = function(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
        v0 = v[0], v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a2 * v1;
    out[3] = a3 * v1;
    out[4] = a4;
    out[5] = a5;
    return out;
};

/**
 * Translates the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to translate the matrix by
 * @returns {mat2d} out
 **/
mat2d.translate = function(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
        v0 = v[0], v1 = v[1];
    out[0] = a0;
    out[1] = a1;
    out[2] = a2;
    out[3] = a3;
    out[4] = a0 * v0 + a2 * v1 + a4;
    out[5] = a1 * v0 + a3 * v1 + a5;
    return out;
};

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.rotate(dest, dest, rad);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */
mat2d.fromRotation = function(out, rad) {
    var s = Math.sin(rad), c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = -s;
    out[3] = c;
    out[4] = 0;
    out[5] = 0;
    return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.scale(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2d} out
 */
mat2d.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = v[1];
    out[4] = 0;
    out[5] = 0;
    return out;
}

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.translate(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat2d} out
 */
mat2d.fromTranslation = function(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = v[0];
    out[5] = v[1];
    return out;
}

/**
 * Returns a string representation of a mat2d
 *
 * @param {mat2d} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat2d.str = function (a) {
    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + 
                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';
};

/**
 * Returns Frobenius norm of a mat2d
 *
 * @param {mat2d} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
mat2d.frob = function (a) { 
    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))
}; 

module.exports = mat2d;

},{"./common.js":68}],71:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");

/**
 * @class 3x3 Matrix
 * @name mat3
 */
var mat3 = {};

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */
mat3.create = function() {
    var out = new glMatrix.ARRAY_TYPE(9);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
};

/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {mat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */
mat3.fromMat4 = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[4];
    out[4] = a[5];
    out[5] = a[6];
    out[6] = a[8];
    out[7] = a[9];
    out[8] = a[10];
    return out;
};

/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {mat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */
mat3.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(9);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */
mat3.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
};

/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a12 = a[5];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a01;
        out[5] = a[7];
        out[6] = a02;
        out[7] = a12;
    } else {
        out[0] = a[0];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a[1];
        out[4] = a[4];
        out[5] = a[7];
        out[6] = a[2];
        out[7] = a[5];
        out[8] = a[8];
    }
    
    return out;
};

/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.invert = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        b01 = a22 * a11 - a12 * a21,
        b11 = -a22 * a10 + a12 * a20,
        b21 = a21 * a10 - a11 * a20,

        // Calculate the determinant
        det = a00 * b01 + a01 * b11 + a02 * b21;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
};

/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.adjoint = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8];

    out[0] = (a11 * a22 - a12 * a21);
    out[1] = (a02 * a21 - a01 * a22);
    out[2] = (a01 * a12 - a02 * a11);
    out[3] = (a12 * a20 - a10 * a22);
    out[4] = (a00 * a22 - a02 * a20);
    out[5] = (a02 * a10 - a00 * a12);
    out[6] = (a10 * a21 - a11 * a20);
    out[7] = (a01 * a20 - a00 * a21);
    out[8] = (a00 * a11 - a01 * a10);
    return out;
};

/**
 * Calculates the determinant of a mat3
 *
 * @param {mat3} a the source matrix
 * @returns {Number} determinant of a
 */
mat3.determinant = function (a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8];

    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
};

/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
mat3.multiply = function (out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        b00 = b[0], b01 = b[1], b02 = b[2],
        b10 = b[3], b11 = b[4], b12 = b[5],
        b20 = b[6], b21 = b[7], b22 = b[8];

    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;

    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;

    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
};

/**
 * Alias for {@link mat3.multiply}
 * @function
 */
mat3.mul = mat3.multiply;

/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to translate
 * @param {vec2} v vector to translate by
 * @returns {mat3} out
 */
mat3.translate = function(out, a, v) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],
        x = v[0], y = v[1];

    out[0] = a00;
    out[1] = a01;
    out[2] = a02;

    out[3] = a10;
    out[4] = a11;
    out[5] = a12;

    out[6] = x * a00 + y * a10 + a20;
    out[7] = x * a01 + y * a11 + a21;
    out[8] = x * a02 + y * a12 + a22;
    return out;
};

/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
mat3.rotate = function (out, a, rad) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        s = Math.sin(rad),
        c = Math.cos(rad);

    out[0] = c * a00 + s * a10;
    out[1] = c * a01 + s * a11;
    out[2] = c * a02 + s * a12;

    out[3] = c * a10 - s * a00;
    out[4] = c * a11 - s * a01;
    out[5] = c * a12 - s * a02;

    out[6] = a20;
    out[7] = a21;
    out[8] = a22;
    return out;
};

/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/
mat3.scale = function(out, a, v) {
    var x = v[0], y = v[1];

    out[0] = x * a[0];
    out[1] = x * a[1];
    out[2] = x * a[2];

    out[3] = y * a[3];
    out[4] = y * a[4];
    out[5] = y * a[5];

    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat3} out
 */
mat3.fromTranslation = function(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = v[0];
    out[7] = v[1];
    out[8] = 1;
    return out;
}

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
mat3.fromRotation = function(out, rad) {
    var s = Math.sin(rad), c = Math.cos(rad);

    out[0] = c;
    out[1] = s;
    out[2] = 0;

    out[3] = -s;
    out[4] = c;
    out[5] = 0;

    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat3} out
 */
mat3.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;

    out[3] = 0;
    out[4] = v[1];
    out[5] = 0;

    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
}

/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat2d} a the matrix to copy
 * @returns {mat3} out
 **/
mat3.fromMat2d = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = 0;

    out[3] = a[2];
    out[4] = a[3];
    out[5] = 0;

    out[6] = a[4];
    out[7] = a[5];
    out[8] = 1;
    return out;
};

/**
* Calculates a 3x3 matrix from the given quaternion
*
* @param {mat3} out mat3 receiving operation result
* @param {quat} q Quaternion to create matrix from
*
* @returns {mat3} out
*/
mat3.fromQuat = function (out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        yx = y * x2,
        yy = y * y2,
        zx = z * x2,
        zy = z * y2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - yy - zz;
    out[3] = yx - wz;
    out[6] = zx + wy;

    out[1] = yx + wz;
    out[4] = 1 - xx - zz;
    out[7] = zy - wx;

    out[2] = zx - wy;
    out[5] = zy + wx;
    out[8] = 1 - xx - yy;

    return out;
};

/**
* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
*
* @param {mat3} out mat3 receiving operation result
* @param {mat4} a Mat4 to derive the normal matrix from
*
* @returns {mat3} out
*/
mat3.normalFromMat4 = function (out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;

    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;

    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;

    return out;
};

/**
 * Returns a string representation of a mat3
 *
 * @param {mat3} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat3.str = function (a) {
    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + 
                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + 
                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';
};

/**
 * Returns Frobenius norm of a mat3
 *
 * @param {mat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
mat3.frob = function (a) {
    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))
};


module.exports = mat3;

},{"./common.js":68}],72:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");

/**
 * @class 4x4 Matrix
 * @name mat4
 */
var mat4 = {};

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */
mat4.create = function() {
    var out = new glMatrix.ARRAY_TYPE(16);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */
mat4.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */
mat4.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a03 = a[3],
            a12 = a[6], a13 = a[7],
            a23 = a[11];

        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
    } else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
    }
    
    return out;
};

/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.invert = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

    return out;
};

/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.adjoint = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
    return out;
};

/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */
mat4.determinant = function (a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32;

    // Calculate the determinant
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
};

/**
 * Multiplies two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
mat4.multiply = function (out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    // Cache only the current line of the second matrix
    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  
    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
    return out;
};

/**
 * Alias for {@link mat4.multiply}
 * @function
 */
mat4.mul = mat4.multiply;

/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
mat4.translate = function (out, a, v) {
    var x = v[0], y = v[1], z = v[2],
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23;

    if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }

    return out;
};

/**
 * Scales the mat4 by the dimensions in the given vec3
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
mat4.scale = function(out, a, v) {
    var x = v[0], y = v[1], z = v[2];

    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
mat4.rotate = function (out, a, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s, c, t,
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23,
        b00, b01, b02,
        b10, b11, b12,
        b20, b21, b22;

    if (Math.abs(len) < glMatrix.EPSILON) { return null; }
    
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;

    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;

    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

    // Construct the elements of the rotation matrix
    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;

    // Perform rotation-specific matrix multiplication
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    return out;
};

/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.rotateX = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[0]  = a[0];
        out[1]  = a[1];
        out[2]  = a[2];
        out[3]  = a[3];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
};

/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.rotateY = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[4]  = a[4];
        out[5]  = a[5];
        out[6]  = a[6];
        out[7]  = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
};

/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.rotateZ = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[8]  = a[8];
        out[9]  = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
};

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
mat4.fromTranslation = function(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Scaling vector
 * @returns {mat4} out
 */
mat4.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = v[1];
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = v[2];
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
mat4.fromRotation = function(out, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s, c, t;
    
    if (Math.abs(len) < glMatrix.EPSILON) { return null; }
    
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;
    
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;
    
    // Perform rotation-specific matrix multiplication
    out[0] = x * x * t + c;
    out[1] = y * x * t + z * s;
    out[2] = z * x * t - y * s;
    out[3] = 0;
    out[4] = x * y * t - z * s;
    out[5] = y * y * t + c;
    out[6] = z * y * t + x * s;
    out[7] = 0;
    out[8] = x * z * t + y * s;
    out[9] = y * z * t - x * s;
    out[10] = z * z * t + c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.fromXRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    
    // Perform axis-specific matrix multiplication
    out[0]  = 1;
    out[1]  = 0;
    out[2]  = 0;
    out[3]  = 0;
    out[4] = 0;
    out[5] = c;
    out[6] = s;
    out[7] = 0;
    out[8] = 0;
    out[9] = -s;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.fromYRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    
    // Perform axis-specific matrix multiplication
    out[0]  = c;
    out[1]  = 0;
    out[2]  = -s;
    out[3]  = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = s;
    out[9] = 0;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.fromZRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    
    // Perform axis-specific matrix multiplication
    out[0]  = c;
    out[1]  = s;
    out[2]  = 0;
    out[3]  = 0;
    out[4] = -s;
    out[5] = c;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
mat4.fromRotationTranslation = function (out, q, v) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    
    return out;
};

/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @returns {mat4} out
 */
mat4.fromRotationTranslationScale = function (out, q, v, s) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2,
        sx = s[0],
        sy = s[1],
        sz = s[2];

    out[0] = (1 - (yy + zz)) * sx;
    out[1] = (xy + wz) * sx;
    out[2] = (xz - wy) * sx;
    out[3] = 0;
    out[4] = (xy - wz) * sy;
    out[5] = (1 - (xx + zz)) * sy;
    out[6] = (yz + wx) * sy;
    out[7] = 0;
    out[8] = (xz + wy) * sz;
    out[9] = (yz - wx) * sz;
    out[10] = (1 - (xx + yy)) * sz;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    
    return out;
};

/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @param {vec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */
mat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {
  // Quaternion math
  var x = q[0], y = q[1], z = q[2], w = q[3],
      x2 = x + x,
      y2 = y + y,
      z2 = z + z,

      xx = x * x2,
      xy = x * y2,
      xz = x * z2,
      yy = y * y2,
      yz = y * z2,
      zz = z * z2,
      wx = w * x2,
      wy = w * y2,
      wz = w * z2,
      
      sx = s[0],
      sy = s[1],
      sz = s[2],

      ox = o[0],
      oy = o[1],
      oz = o[2];
      
  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);
  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);
  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);
  out[15] = 1;
        
  return out;
};

mat4.fromQuat = function (out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        yx = y * x2,
        yy = y * y2,
        zx = z * x2,
        zy = z * y2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;

    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;

    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;

    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;

    return out;
};

/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.frustum = function (out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left),
        tb = 1 / (top - bottom),
        nf = 1 / (near - far);
    out[0] = (near * 2) * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = (near * 2) * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (far * near * 2) * nf;
    out[15] = 0;
    return out;
};

/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.perspective = function (out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2),
        nf = 1 / (near - far);
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (2 * far * near) * nf;
    out[15] = 0;
    return out;
};

/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.perspectiveFromFieldOfView = function (out, fov, near, far) {
    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),
        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),
        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),
        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),
        xScale = 2.0 / (leftTan + rightTan),
        yScale = 2.0 / (upTan + downTan);

    out[0] = xScale;
    out[1] = 0.0;
    out[2] = 0.0;
    out[3] = 0.0;
    out[4] = 0.0;
    out[5] = yScale;
    out[6] = 0.0;
    out[7] = 0.0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = ((upTan - downTan) * yScale * 0.5);
    out[10] = far / (near - far);
    out[11] = -1.0;
    out[12] = 0.0;
    out[13] = 0.0;
    out[14] = (far * near) / (near - far);
    out[15] = 0.0;
    return out;
}

/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.ortho = function (out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right),
        bt = 1 / (bottom - top),
        nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
};

/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
mat4.lookAt = function (out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
        eyex = eye[0],
        eyey = eye[1],
        eyez = eye[2],
        upx = up[0],
        upy = up[1],
        upz = up[2],
        centerx = center[0],
        centery = center[1],
        centerz = center[2];

    if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&
        Math.abs(eyey - centery) < glMatrix.EPSILON &&
        Math.abs(eyez - centerz) < glMatrix.EPSILON) {
        return mat4.identity(out);
    }

    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;

    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;

    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
    } else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }

    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;

    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
    } else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
    }

    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;

    return out;
};

/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat4.str = function (a) {
    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + 
                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
};

/**
 * Returns Frobenius norm of a mat4
 *
 * @param {mat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
mat4.frob = function (a) {
    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))
};


module.exports = mat4;

},{"./common.js":68}],73:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");
var mat3 = require("./mat3.js");
var vec3 = require("./vec3.js");
var vec4 = require("./vec4.js");

/**
 * @class Quaternion
 * @name quat
 */
var quat = {};

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */
quat.create = function() {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {vec3} a the initial vector
 * @param {vec3} b the destination vector
 * @returns {quat} out
 */
quat.rotationTo = (function() {
    var tmpvec3 = vec3.create();
    var xUnitVec3 = vec3.fromValues(1,0,0);
    var yUnitVec3 = vec3.fromValues(0,1,0);

    return function(out, a, b) {
        var dot = vec3.dot(a, b);
        if (dot < -0.999999) {
            vec3.cross(tmpvec3, xUnitVec3, a);
            if (vec3.length(tmpvec3) < 0.000001)
                vec3.cross(tmpvec3, yUnitVec3, a);
            vec3.normalize(tmpvec3, tmpvec3);
            quat.setAxisAngle(out, tmpvec3, Math.PI);
            return out;
        } else if (dot > 0.999999) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            return out;
        } else {
            vec3.cross(tmpvec3, a, b);
            out[0] = tmpvec3[0];
            out[1] = tmpvec3[1];
            out[2] = tmpvec3[2];
            out[3] = 1 + dot;
            return quat.normalize(out, out);
        }
    };
})();

/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {vec3} view  the vector representing the viewing direction
 * @param {vec3} right the vector representing the local "right" direction
 * @param {vec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */
quat.setAxes = (function() {
    var matr = mat3.create();

    return function(out, view, right, up) {
        matr[0] = right[0];
        matr[3] = right[1];
        matr[6] = right[2];

        matr[1] = up[0];
        matr[4] = up[1];
        matr[7] = up[2];

        matr[2] = -view[0];
        matr[5] = -view[1];
        matr[8] = -view[2];

        return quat.normalize(out, quat.fromMat3(out, matr));
    };
})();

/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {quat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */
quat.clone = vec4.clone;

/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */
quat.fromValues = vec4.fromValues;

/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the source quaternion
 * @returns {quat} out
 * @function
 */
quat.copy = vec4.copy;

/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */
quat.set = vec4.set;

/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */
quat.identity = function(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {vec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/
quat.setAxisAngle = function(out, axis, rad) {
    rad = rad * 0.5;
    var s = Math.sin(rad);
    out[0] = s * axis[0];
    out[1] = s * axis[1];
    out[2] = s * axis[2];
    out[3] = Math.cos(rad);
    return out;
};

/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 * @function
 */
quat.add = vec4.add;

/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 */
quat.multiply = function(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = b[0], by = b[1], bz = b[2], bw = b[3];

    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
};

/**
 * Alias for {@link quat.multiply}
 * @function
 */
quat.mul = quat.multiply;

/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {quat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */
quat.scale = vec4.scale;

/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateX = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
};

/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateY = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        by = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
};

/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateZ = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bz = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
};

/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate W component of
 * @returns {quat} out
 */
quat.calculateW = function (out, a) {
    var x = a[0], y = a[1], z = a[2];

    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
    return out;
};

/**
 * Calculates the dot product of two quat's
 *
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */
quat.dot = vec4.dot;

/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 * @function
 */
quat.lerp = vec4.lerp;

/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 */
quat.slerp = function (out, a, b, t) {
    // benchmarks:
    //    http://jsperf.com/quaternion-slerp-implementations

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = b[0], by = b[1], bz = b[2], bw = b[3];

    var        omega, cosom, sinom, scale0, scale1;

    // calc cosine
    cosom = ax * bx + ay * by + az * bz + aw * bw;
    // adjust signs (if necessary)
    if ( cosom < 0.0 ) {
        cosom = -cosom;
        bx = - bx;
        by = - by;
        bz = - bz;
        bw = - bw;
    }
    // calculate coefficients
    if ( (1.0 - cosom) > 0.000001 ) {
        // standard case (slerp)
        omega  = Math.acos(cosom);
        sinom  = Math.sin(omega);
        scale0 = Math.sin((1.0 - t) * omega) / sinom;
        scale1 = Math.sin(t * omega) / sinom;
    } else {        
        // "from" and "to" quaternions are very close 
        //  ... so we can do a linear interpolation
        scale0 = 1.0 - t;
        scale1 = t;
    }
    // calculate final values
    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    
    return out;
};

/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {quat} c the third operand
 * @param {quat} d the fourth operand
 * @param {Number} t interpolation amount
 * @returns {quat} out
 */
quat.sqlerp = (function () {
  var temp1 = quat.create();
  var temp2 = quat.create();
  
  return function (out, a, b, c, d, t) {
    quat.slerp(temp1, a, d, t);
    quat.slerp(temp2, b, c, t);
    quat.slerp(out, temp1, temp2, 2 * t * (1 - t));
    
    return out;
  };
}());

/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate inverse of
 * @returns {quat} out
 */
quat.invert = function(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,
        invDot = dot ? 1.0/dot : 0;
    
    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

    out[0] = -a0*invDot;
    out[1] = -a1*invDot;
    out[2] = -a2*invDot;
    out[3] = a3*invDot;
    return out;
};

/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate conjugate of
 * @returns {quat} out
 */
quat.conjugate = function (out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    return out;
};

/**
 * Calculates the length of a quat
 *
 * @param {quat} a vector to calculate length of
 * @returns {Number} length of a
 * @function
 */
quat.length = vec4.length;

/**
 * Alias for {@link quat.length}
 * @function
 */
quat.len = quat.length;

/**
 * Calculates the squared length of a quat
 *
 * @param {quat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */
quat.squaredLength = vec4.squaredLength;

/**
 * Alias for {@link quat.squaredLength}
 * @function
 */
quat.sqrLen = quat.squaredLength;

/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */
quat.normalize = vec4.normalize;

/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {mat3} m rotation matrix
 * @returns {quat} out
 * @function
 */
quat.fromMat3 = function(out, m) {
    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
    // article "Quaternion Calculus and Fast Animation".
    var fTrace = m[0] + m[4] + m[8];
    var fRoot;

    if ( fTrace > 0.0 ) {
        // |w| > 1/2, may as well choose w > 1/2
        fRoot = Math.sqrt(fTrace + 1.0);  // 2w
        out[3] = 0.5 * fRoot;
        fRoot = 0.5/fRoot;  // 1/(4w)
        out[0] = (m[5]-m[7])*fRoot;
        out[1] = (m[6]-m[2])*fRoot;
        out[2] = (m[1]-m[3])*fRoot;
    } else {
        // |w| <= 1/2
        var i = 0;
        if ( m[4] > m[0] )
          i = 1;
        if ( m[8] > m[i*3+i] )
          i = 2;
        var j = (i+1)%3;
        var k = (i+2)%3;
        
        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);
        out[i] = 0.5 * fRoot;
        fRoot = 0.5 / fRoot;
        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;
        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;
        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;
    }
    
    return out;
};

/**
 * Returns a string representation of a quatenion
 *
 * @param {quat} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
quat.str = function (a) {
    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

module.exports = quat;

},{"./common.js":68,"./mat3.js":71,"./vec3.js":75,"./vec4.js":76}],74:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");

/**
 * @class 2 Dimensional Vector
 * @name vec2
 */
var vec2 = {};

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */
vec2.create = function() {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = 0;
    out[1] = 0;
    return out;
};

/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {vec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */
vec2.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = a[0];
    out[1] = a[1];
    return out;
};

/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */
vec2.fromValues = function(x, y) {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = x;
    out[1] = y;
    return out;
};

/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the source vector
 * @returns {vec2} out
 */
vec2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    return out;
};

/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */
vec2.set = function(out, x, y) {
    out[0] = x;
    out[1] = y;
    return out;
};

/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    return out;
};

/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    return out;
};

/**
 * Alias for {@link vec2.subtract}
 * @function
 */
vec2.sub = vec2.subtract;

/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    return out;
};

/**
 * Alias for {@link vec2.multiply}
 * @function
 */
vec2.mul = vec2.multiply;

/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    return out;
};

/**
 * Alias for {@link vec2.divide}
 * @function
 */
vec2.div = vec2.divide;

/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    return out;
};

/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    return out;
};

/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */
vec2.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    return out;
};

/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */
vec2.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    return out;
};

/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} distance between a and b
 */
vec2.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return Math.sqrt(x*x + y*y);
};

/**
 * Alias for {@link vec2.distance}
 * @function
 */
vec2.dist = vec2.distance;

/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec2.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return x*x + y*y;
};

/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */
vec2.sqrDist = vec2.squaredDistance;

/**
 * Calculates the length of a vec2
 *
 * @param {vec2} a vector to calculate length of
 * @returns {Number} length of a
 */
vec2.length = function (a) {
    var x = a[0],
        y = a[1];
    return Math.sqrt(x*x + y*y);
};

/**
 * Alias for {@link vec2.length}
 * @function
 */
vec2.len = vec2.length;

/**
 * Calculates the squared length of a vec2
 *
 * @param {vec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec2.squaredLength = function (a) {
    var x = a[0],
        y = a[1];
    return x*x + y*y;
};

/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */
vec2.sqrLen = vec2.squaredLength;

/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to negate
 * @returns {vec2} out
 */
vec2.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    return out;
};

/**
 * Returns the inverse of the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to invert
 * @returns {vec2} out
 */
vec2.inverse = function(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  return out;
};

/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to normalize
 * @returns {vec2} out
 */
vec2.normalize = function(out, a) {
    var x = a[0],
        y = a[1];
    var len = x*x + y*y;
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} dot product of a and b
 */
vec2.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1];
};

/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec3} out
 */
vec2.cross = function(out, a, b) {
    var z = a[0] * b[1] - a[1] * b[0];
    out[0] = out[1] = 0;
    out[2] = z;
    return out;
};

/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec2} out
 */
vec2.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    return out;
};

/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */
vec2.random = function (out, scale) {
    scale = scale || 1.0;
    var r = glMatrix.RANDOM() * 2.0 * Math.PI;
    out[0] = Math.cos(r) * scale;
    out[1] = Math.sin(r) * scale;
    return out;
};

/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat2 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[2] * y;
    out[1] = m[1] * x + m[3] * y;
    return out;
};

/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2d} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat2d = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[2] * y + m[4];
    out[1] = m[1] * x + m[3] * y + m[5];
    return out;
};

/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat3} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat3 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[3] * y + m[6];
    out[1] = m[1] * x + m[4] * y + m[7];
    return out;
};

/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat4 = function(out, a, m) {
    var x = a[0], 
        y = a[1];
    out[0] = m[0] * x + m[4] * y + m[12];
    out[1] = m[1] * x + m[5] * y + m[13];
    return out;
};

/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec2.forEach = (function() {
    var vec = vec2.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 2;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1];
        }
        
        return a;
    };
})();

/**
 * Returns a string representation of a vector
 *
 * @param {vec2} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec2.str = function (a) {
    return 'vec2(' + a[0] + ', ' + a[1] + ')';
};

module.exports = vec2;

},{"./common.js":68}],75:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");

/**
 * @class 3 Dimensional Vector
 * @name vec3
 */
var vec3 = {};

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */
vec3.create = function() {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    return out;
};

/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {vec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */
vec3.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
};

/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */
vec3.fromValues = function(x, y, z) {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
};

/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the source vector
 * @returns {vec3} out
 */
vec3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
};

/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */
vec3.set = function(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
};

/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    return out;
};

/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    return out;
};

/**
 * Alias for {@link vec3.subtract}
 * @function
 */
vec3.sub = vec3.subtract;

/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    return out;
};

/**
 * Alias for {@link vec3.multiply}
 * @function
 */
vec3.mul = vec3.multiply;

/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    return out;
};

/**
 * Alias for {@link vec3.divide}
 * @function
 */
vec3.div = vec3.divide;

/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    return out;
};

/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    return out;
};

/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */
vec3.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    return out;
};

/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */
vec3.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    return out;
};

/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} distance between a and b
 */
vec3.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2];
    return Math.sqrt(x*x + y*y + z*z);
};

/**
 * Alias for {@link vec3.distance}
 * @function
 */
vec3.dist = vec3.distance;

/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec3.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2];
    return x*x + y*y + z*z;
};

/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */
vec3.sqrDist = vec3.squaredDistance;

/**
 * Calculates the length of a vec3
 *
 * @param {vec3} a vector to calculate length of
 * @returns {Number} length of a
 */
vec3.length = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    return Math.sqrt(x*x + y*y + z*z);
};

/**
 * Alias for {@link vec3.length}
 * @function
 */
vec3.len = vec3.length;

/**
 * Calculates the squared length of a vec3
 *
 * @param {vec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec3.squaredLength = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    return x*x + y*y + z*z;
};

/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */
vec3.sqrLen = vec3.squaredLength;

/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to negate
 * @returns {vec3} out
 */
vec3.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    return out;
};

/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to invert
 * @returns {vec3} out
 */
vec3.inverse = function(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  return out;
};

/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to normalize
 * @returns {vec3} out
 */
vec3.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    var len = x*x + y*y + z*z;
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        out[2] = a[2] * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} dot product of a and b
 */
vec3.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
};

/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.cross = function(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2],
        bx = b[0], by = b[1], bz = b[2];

    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
};

/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
vec3.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    return out;
};

/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
vec3.hermite = function (out, a, b, c, d, t) {
  var factorTimes2 = t * t,
      factor1 = factorTimes2 * (2 * t - 3) + 1,
      factor2 = factorTimes2 * (t - 2) + t,
      factor3 = factorTimes2 * (t - 1),
      factor4 = factorTimes2 * (3 - 2 * t);
  
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  
  return out;
};

/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
vec3.bezier = function (out, a, b, c, d, t) {
  var inverseFactor = 1 - t,
      inverseFactorTimesTwo = inverseFactor * inverseFactor,
      factorTimes2 = t * t,
      factor1 = inverseFactorTimesTwo * inverseFactor,
      factor2 = 3 * t * inverseFactorTimesTwo,
      factor3 = 3 * factorTimes2 * inverseFactor,
      factor4 = factorTimes2 * t;
  
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  
  return out;
};

/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */
vec3.random = function (out, scale) {
    scale = scale || 1.0;

    var r = glMatrix.RANDOM() * 2.0 * Math.PI;
    var z = (glMatrix.RANDOM() * 2.0) - 1.0;
    var zScale = Math.sqrt(1.0-z*z) * scale;

    out[0] = Math.cos(r) * zScale;
    out[1] = Math.sin(r) * zScale;
    out[2] = z * scale;
    return out;
};

/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec3} out
 */
vec3.transformMat4 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2],
        w = m[3] * x + m[7] * y + m[11] * z + m[15];
    w = w || 1.0;
    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
    return out;
};

/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */
vec3.transformMat3 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = x * m[0] + y * m[3] + z * m[6];
    out[1] = x * m[1] + y * m[4] + z * m[7];
    out[2] = x * m[2] + y * m[5] + z * m[8];
    return out;
};

/**
 * Transforms the vec3 with a quat
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec3} out
 */
vec3.transformQuat = function(out, a, q) {
    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations

    var x = a[0], y = a[1], z = a[2],
        qx = q[0], qy = q[1], qz = q[2], qw = q[3],

        // calculate quat * vec
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;

    // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return out;
};

/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
vec3.rotateX = function(out, a, b, c){
   var p = [], r=[];
	  //Translate point to the origin
	  p[0] = a[0] - b[0];
	  p[1] = a[1] - b[1];
  	p[2] = a[2] - b[2];

	  //perform rotation
	  r[0] = p[0];
	  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);
	  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);

	  //translate to correct position
	  out[0] = r[0] + b[0];
	  out[1] = r[1] + b[1];
	  out[2] = r[2] + b[2];

  	return out;
};

/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
vec3.rotateY = function(out, a, b, c){
  	var p = [], r=[];
  	//Translate point to the origin
  	p[0] = a[0] - b[0];
  	p[1] = a[1] - b[1];
  	p[2] = a[2] - b[2];
  
  	//perform rotation
  	r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);
  	r[1] = p[1];
  	r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);
  
  	//translate to correct position
  	out[0] = r[0] + b[0];
  	out[1] = r[1] + b[1];
  	out[2] = r[2] + b[2];
  
  	return out;
};

/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
vec3.rotateZ = function(out, a, b, c){
  	var p = [], r=[];
  	//Translate point to the origin
  	p[0] = a[0] - b[0];
  	p[1] = a[1] - b[1];
  	p[2] = a[2] - b[2];
  
  	//perform rotation
  	r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);
  	r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);
  	r[2] = p[2];
  
  	//translate to correct position
  	out[0] = r[0] + b[0];
  	out[1] = r[1] + b[1];
  	out[2] = r[2] + b[2];
  
  	return out;
};

/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec3.forEach = (function() {
    var vec = vec3.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 3;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];
        }
        
        return a;
    };
})();

/**
 * Get the angle between two 3D vectors
 * @param {vec3} a The first operand
 * @param {vec3} b The second operand
 * @returns {Number} The angle in radians
 */
vec3.angle = function(a, b) {
   
    var tempA = vec3.fromValues(a[0], a[1], a[2]);
    var tempB = vec3.fromValues(b[0], b[1], b[2]);
 
    vec3.normalize(tempA, tempA);
    vec3.normalize(tempB, tempB);
 
    var cosine = vec3.dot(tempA, tempB);

    if(cosine > 1.0){
        return 0;
    } else {
        return Math.acos(cosine);
    }     
};

/**
 * Returns a string representation of a vector
 *
 * @param {vec3} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec3.str = function (a) {
    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
};

module.exports = vec3;

},{"./common.js":68}],76:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");

/**
 * @class 4 Dimensional Vector
 * @name vec4
 */
var vec4 = {};

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */
vec4.create = function() {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    return out;
};

/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {vec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */
vec4.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */
vec4.fromValues = function(x, y, z, w) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
};

/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the source vector
 * @returns {vec4} out
 */
vec4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */
vec4.set = function(out, x, y, z, w) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
};

/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
};

/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
};

/**
 * Alias for {@link vec4.subtract}
 * @function
 */
vec4.sub = vec4.subtract;

/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    out[3] = a[3] * b[3];
    return out;
};

/**
 * Alias for {@link vec4.multiply}
 * @function
 */
vec4.mul = vec4.multiply;

/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    out[3] = a[3] / b[3];
    return out;
};

/**
 * Alias for {@link vec4.divide}
 * @function
 */
vec4.div = vec4.divide;

/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    out[3] = Math.min(a[3], b[3]);
    return out;
};

/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    out[3] = Math.max(a[3], b[3]);
    return out;
};

/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */
vec4.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
};

/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */
vec4.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    out[3] = a[3] + (b[3] * scale);
    return out;
};

/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} distance between a and b
 */
vec4.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2],
        w = b[3] - a[3];
    return Math.sqrt(x*x + y*y + z*z + w*w);
};

/**
 * Alias for {@link vec4.distance}
 * @function
 */
vec4.dist = vec4.distance;

/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec4.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2],
        w = b[3] - a[3];
    return x*x + y*y + z*z + w*w;
};

/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */
vec4.sqrDist = vec4.squaredDistance;

/**
 * Calculates the length of a vec4
 *
 * @param {vec4} a vector to calculate length of
 * @returns {Number} length of a
 */
vec4.length = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    return Math.sqrt(x*x + y*y + z*z + w*w);
};

/**
 * Alias for {@link vec4.length}
 * @function
 */
vec4.len = vec4.length;

/**
 * Calculates the squared length of a vec4
 *
 * @param {vec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec4.squaredLength = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    return x*x + y*y + z*z + w*w;
};

/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */
vec4.sqrLen = vec4.squaredLength;

/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to negate
 * @returns {vec4} out
 */
vec4.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = -a[3];
    return out;
};

/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to invert
 * @returns {vec4} out
 */
vec4.inverse = function(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  out[3] = 1.0 / a[3];
  return out;
};

/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to normalize
 * @returns {vec4} out
 */
vec4.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    var len = x*x + y*y + z*z + w*w;
    if (len > 0) {
        len = 1 / Math.sqrt(len);
        out[0] = x * len;
        out[1] = y * len;
        out[2] = z * len;
        out[3] = w * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} dot product of a and b
 */
vec4.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
};

/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec4} out
 */
vec4.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    out[3] = aw + t * (b[3] - aw);
    return out;
};

/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec4} out
 */
vec4.random = function (out, scale) {
    scale = scale || 1.0;

    //TODO: This is a pretty awful way of doing this. Find something better.
    out[0] = glMatrix.RANDOM();
    out[1] = glMatrix.RANDOM();
    out[2] = glMatrix.RANDOM();
    out[3] = glMatrix.RANDOM();
    vec4.normalize(out, out);
    vec4.scale(out, out, scale);
    return out;
};

/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec4} out
 */
vec4.transformMat4 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
    return out;
};

/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec4} out
 */
vec4.transformQuat = function(out, a, q) {
    var x = a[0], y = a[1], z = a[2],
        qx = q[0], qy = q[1], qz = q[2], qw = q[3],

        // calculate quat * vec
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;

    // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    out[3] = a[3];
    return out;
};

/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec4.forEach = (function() {
    var vec = vec4.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 4;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];
        }
        
        return a;
    };
})();

/**
 * Returns a string representation of a vector
 *
 * @param {vec4} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec4.str = function (a) {
    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

module.exports = vec4;

},{"./common.js":68}],77:[function(require,module,exports){
/**
 * lodash 3.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/**
 * A specialized version of `_.forEach` for arrays without support for callback
 * shorthands or `this` binding.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;

},{}],78:[function(require,module,exports){
/**
 * lodash 3.0.3 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/**
 * The base implementation of `baseForIn` and `baseForOwn` which iterates
 * over `object` properties returned by `keysFunc` invoking `iteratee` for
 * each property. Iteratee functions may exit iteration early by explicitly
 * returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * Creates a base function for methods like `_.forIn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = baseFor;

},{}],79:[function(require,module,exports){
(function (global){
/**
 * lodash 4.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** `Object#toString` result references. */
var funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/** Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns). */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari > 5). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/** Used for built-in method references. */
var arrayProto = global.Array.prototype,
    objectProto = global.Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = global.Function.prototype.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var splice = arrayProto.splice;

/* Built-in method references that are verified to be native. */
var Map = getNative(global, 'Map'),
    nativeCreate = getNative(Object, 'create');

/**
 * Creates an hash object.
 *
 * @private
 * @returns {Object} Returns the new hash object.
 */
function Hash() {}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(hash, key) {
  return hashHas(hash, key) && delete hash[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @param {Object} hash The hash to query.
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(hash, key) {
  if (nativeCreate) {
    var result = hash[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(hash, key) ? hash[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @param {Object} hash The hash to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(hash, key) {
  return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 */
function hashSet(hash, key, value) {
  hash[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
}

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @param {Array} [values] The values to cache.
 */
function MapCache(values) {
  var index = -1,
      length = values ? values.length : 0;

  this.clear();
  while (++index < length) {
    var entry = values[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapClear() {
  this.__data__ = { 'hash': new Hash, 'map': Map ? new Map : [], 'string': new Hash };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapDelete(key) {
  var data = this.__data__;
  if (isKeyable(key)) {
    return hashDelete(typeof key == 'string' ? data.string : data.hash, key);
  }
  return Map ? data.map['delete'](key) : assocDelete(data.map, key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapGet(key) {
  var data = this.__data__;
  if (isKeyable(key)) {
    return hashGet(typeof key == 'string' ? data.string : data.hash, key);
  }
  return Map ? data.map.get(key) : assocGet(data.map, key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapHas(key) {
  var data = this.__data__;
  if (isKeyable(key)) {
    return hashHas(typeof key == 'string' ? data.string : data.hash, key);
  }
  return Map ? data.map.has(key) : assocHas(data.map, key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache object.
 */
function mapSet(key, value) {
  var data = this.__data__;
  if (isKeyable(key)) {
    hashSet(typeof key == 'string' ? data.string : data.hash, key, value);
  } else if (Map) {
    data.map.set(key, value);
  } else {
    assocSet(data.map, key, value);
  }
  return this;
}

/**
 * Removes `key` and its value from the associative array.
 *
 * @private
 * @param {Array} array The array to query.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function assocDelete(array, key) {
  var index = assocIndexOf(array, key);
  if (index < 0) {
    return false;
  }
  var lastIndex = array.length - 1;
  if (index == lastIndex) {
    array.pop();
  } else {
    splice.call(array, index, 1);
  }
  return true;
}

/**
 * Gets the associative array value for `key`.
 *
 * @private
 * @param {Array} array The array to query.
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function assocGet(array, key) {
  var index = assocIndexOf(array, key);
  return index < 0 ? undefined : array[index][1];
}

/**
 * Checks if an associative array value for `key` exists.
 *
 * @private
 * @param {Array} array The array to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function assocHas(array, key) {
  return assocIndexOf(array, key) > -1;
}

/**
 * Gets the index at which the first occurrence of `key` is found in `array`
 * of key-value pairs.
 *
 * @private
 * @param {Array} array The array to search.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * Sets the associative array `key` to `value`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 */
function assocSet(array, key, value) {
  var index = assocIndexOf(array, key);
  if (index < 0) {
    array.push([key, value]);
  } else {
    array[index][1] = value;
  }
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = object == null ? undefined : object[key];
  return isNative(value) ? value : undefined;
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return type == 'number' || type == 'boolean' ||
    (type == 'string' && value !== '__proto__') || value == null;
}

/**
 * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'user': 'fred' };
 * var other = { 'user': 'fred' };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8 which returns 'object' for typed array constructors, and
  // PhantomJS 1.9 which returns 'function' for `NodeList` instances.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is a native function.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
 * @example
 *
 * _.isNative(Array.prototype.push);
 * // => true
 *
 * _.isNative(_);
 * // => false
 */
function isNative(value) {
  if (value == null) {
    return false;
  }
  if (isFunction(value)) {
    return reIsNative.test(funcToString.call(value));
  }
  return isObjectLike(value) &&
    (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
}

// Avoid inheriting from `Object.prototype` when possible.
Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;

// Add functions to the `MapCache`.
MapCache.prototype.clear = mapClear;
MapCache.prototype['delete'] = mapDelete;
MapCache.prototype.get = mapGet;
MapCache.prototype.has = mapHas;
MapCache.prototype.set = mapSet;

module.exports = MapCache;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],80:[function(require,module,exports){
(function (global){
/**
 * lodash 4.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
var MapCache = require('lodash._mapcache');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used for built-in method references. */
var arrayProto = global.Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @param {Array} [values] The values to cache.
 */
function Stack(values) {
  var index = -1,
      length = values ? values.length : 0;

  this.clear();
  while (++index < length) {
    var entry = values[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = { 'array': [], 'map': null };
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      array = data.array;

  return array ? assocDelete(array, key) : data.map['delete'](key);
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  var data = this.__data__,
      array = data.array;

  return array ? assocGet(array, key) : data.map.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  var data = this.__data__,
      array = data.array;

  return array ? assocHas(array, key) : data.map.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache object.
 */
function stackSet(key, value) {
  var data = this.__data__,
      array = data.array;

  if (array) {
    if (array.length < (LARGE_ARRAY_SIZE - 1)) {
      assocSet(array, key, value);
    } else {
      data.array = null;
      data.map = new MapCache(array);
    }
  }
  var map = data.map;
  if (map) {
    map.set(key, value);
  }
  return this;
}

/**
 * Removes `key` and its value from the associative array.
 *
 * @private
 * @param {Array} array The array to query.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function assocDelete(array, key) {
  var index = assocIndexOf(array, key);
  if (index < 0) {
    return false;
  }
  var lastIndex = array.length - 1;
  if (index == lastIndex) {
    array.pop();
  } else {
    splice.call(array, index, 1);
  }
  return true;
}

/**
 * Gets the associative array value for `key`.
 *
 * @private
 * @param {Array} array The array to query.
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function assocGet(array, key) {
  var index = assocIndexOf(array, key);
  return index < 0 ? undefined : array[index][1];
}

/**
 * Checks if an associative array value for `key` exists.
 *
 * @private
 * @param {Array} array The array to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function assocHas(array, key) {
  return assocIndexOf(array, key) > -1;
}

/**
 * Gets the index at which the first occurrence of `key` is found in `array`
 * of key-value pairs.
 *
 * @private
 * @param {Array} array The array to search.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * Sets the associative array `key` to `value`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 */
function assocSet(array, key, value) {
  var index = assocIndexOf(array, key);
  if (index < 0) {
    array.push([key, value]);
  } else {
    array[index][1] = value;
  }
}

/**
 * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'user': 'fred' };
 * var other = { 'user': 'fred' };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

// Add functions to the `Stack` cache.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"lodash._mapcache":79}],81:[function(require,module,exports){
(function (global){
/**
 * lodash 4.0.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
var keys = require('lodash.keys'),
    rest = require('lodash.rest');

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
  length = length == null ? MAX_SAFE_INTEGER : length;
  return value > -1 && value % 1 == 0 && value < length;
}

/** Used for built-in method references. */
var objectProto = global.Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if ((!eq(objValue, value) ||
        (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) ||
      (value === undefined && !(key in object))) {
    object[key] = value;
  }
}

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property names to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object) {
  return copyObjectWith(source, props, object);
}

/**
 * This function is like `copyObject` except that it accepts a function to
 * customize copied values.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property names to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObjectWith(source, props, object, customizer) {
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index],
        newValue = customizer ? customizer(object[key], source[key], key, object, source) : source[key];

    assignValue(object, key, newValue);
  }
  return object;
}

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return rest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = typeof customizer == 'function' ? (length--, customizer) : undefined;
    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

/**
 * Gets the "length" property value of `object`.
 *
 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
 * that affects Safari on at least iOS 8.1-8.3 ARM64.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {*} Returns the "length" value.
 */
var getLength = baseProperty('length');

/**
 * Checks if the provided arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
      ? (isArrayLike(object) && isIndex(index, object.length))
      : (type == 'string' && index in object)) {
    return eq(object[index], value);
  }
  return false;
}

/**
 * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'user': 'fred' };
 * var other = { 'user': 'fred' };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @type Function
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null &&
    !(typeof value == 'function' && isFunction(value)) && isLength(getLength(value));
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8 which returns 'object' for typed array constructors, and
  // PhantomJS 1.9 which returns 'function' for `NodeList` instances.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Assigns own enumerable properties of source objects to the destination
 * object. Source objects are applied from left to right. Subsequent sources
 * overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object` and is loosely based on
 * [`Object.assign`](https://mdn.io/Object/assign).
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * function Foo() {
 *   this.c = 3;
 * }
 *
 * function Bar() {
 *   this.e = 5;
 * }
 *
 * Foo.prototype.d = 4;
 * Bar.prototype.f = 6;
 *
 * _.assign({ 'a': 1 }, new Foo, new Bar);
 * // => { 'a': 1, 'c': 3, 'e': 5 }
 */
var assign = createAssigner(function(object, source) {
  copyObject(source, keys(source), object);
});

module.exports = assign;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"lodash.keys":83,"lodash.rest":84}],82:[function(require,module,exports){
(function (global){
/**
 * lodash 4.0.2 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
var Stack = require('lodash._stack'),
    arrayEach = require('lodash._arrayeach'),
    baseFor = require('lodash._basefor'),
    keys = require('lodash.keys');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns). */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/** Used to detect host constructors (Safari > 5). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
cloneableTags[dateTag] = cloneableTags[float32Tag] =
cloneableTags[float64Tag] = cloneableTags[int8Tag] =
cloneableTags[int16Tag] = cloneableTags[int32Tag] =
cloneableTags[mapTag] = cloneableTags[numberTag] =
cloneableTags[objectTag] = cloneableTags[regexpTag] =
cloneableTags[setTag] = cloneableTags[stringTag] =
cloneableTags[symbolTag] = cloneableTags[uint8Tag] =
cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] =
cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * Adds the key-value `pair` to `map`.
 *
 * @private
 * @param {Object} map The map to modify.
 * @param {Array} pair The key-value pair to add.
 * @returns {Object} Returns `map`.
 */
function addMapEntry(map, pair) {
  map.set(pair[0], pair[1]);
  return map;
}

/**
 * Adds `value` to `set`.
 *
 * @private
 * @param {Object} set The set to modify.
 * @param {*} value The value to add.
 * @returns {Object} Returns `set`.
 */
function addSetEntry(set, value) {
  set.add(value);
  return set;
}

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `map` to an array.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the converted array.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Converts `set` to an array.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the converted array.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var objectProto = global.Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = global.Function.prototype.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Symbol = global.Symbol,
    Uint8Array = global.Uint8Array,
    getOwnPropertySymbols = Object.getOwnPropertySymbols;

/* Built-in method references that are verified to be native. */
var Map = getNative(global, 'Map'),
    Set = getNative(global, 'Set');

/** Used to detect maps and sets. */
var mapCtorString = Map ? funcToString.call(Map) : '',
    setCtorString = Set ? funcToString.call(Set) : '';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = Symbol ? symbolProto.valueOf : undefined;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if ((!eq(objValue, value) ||
        (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) ||
      (value === undefined && !(key in object))) {
    object[key] = value;
  }
}

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, isDeep, customizer, key, object, stack) {
  var result;
  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      if (isHostObject(value)) {
        return object ? value : {};
      }
      result = initCloneObject(isFunc ? {} : value);
      if (!isDeep) {
        return copySymbols(value, baseAssign(result, value));
      }
    } else {
      return cloneableTags[tag]
        ? initCloneByTag(value, tag, isDeep)
        : (object ? value : {});
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  // Recursively populate clone (susceptible to call stack limits).
  (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
    assignValue(result, key, baseClone(subValue, isDeep, customizer, key, value, stack));
  });
  return isArr ? result : copySymbols(value, result);
}

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} prototype The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(prototype) {
    if (isObject(prototype)) {
      object.prototype = prototype;
      var result = new object;
      object.prototype = undefined;
    }
    return result || {};
  };
}());

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

/**
 * Creates a clone of `buffer`.
 *
 * @private
 * @param {ArrayBuffer} buffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneBuffer(buffer) {
  var Ctor = buffer.constructor,
      result = new Ctor(buffer.byteLength),
      view = new Uint8Array(result);

  view.set(new Uint8Array(buffer));
  return result;
}

/**
 * Creates a clone of `map`.
 *
 * @private
 * @param {Object} map The map to clone.
 * @returns {Object} Returns the cloned map.
 */
function cloneMap(map) {
  var Ctor = map.constructor;
  return arrayReduce(mapToArray(map), addMapEntry, new Ctor);
}

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var Ctor = regexp.constructor,
      result = new Ctor(regexp.source, reFlags.exec(regexp));

  result.lastIndex = regexp.lastIndex;
  return result;
}

/**
 * Creates a clone of `set`.
 *
 * @private
 * @param {Object} set The set to clone.
 * @returns {Object} Returns the cloned set.
 */
function cloneSet(set) {
  var Ctor = set.constructor;
  return arrayReduce(setToArray(set), addSetEntry, new Ctor);
}

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return Symbol ? Object(symbolValueOf.call(symbol)) : {};
}

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = typedArray.buffer,
      Ctor = typedArray.constructor;

  return new Ctor(isDeep ? cloneBuffer(buffer) : buffer, typedArray.byteOffset, typedArray.length);
}

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property names to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object) {
  return copyObjectWith(source, props, object);
}

/**
 * This function is like `copyObject` except that it accepts a function to
 * customize copied values.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property names to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObjectWith(source, props, object, customizer) {
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index],
        newValue = customizer ? customizer(object[key], source[key], key, object, source) : source[key];

    assignValue(object, key, newValue);
  }
  return object;
}

/**
 * Copies own symbol properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = object == null ? undefined : object[key];
  return isNative(value) ? value : undefined;
}

/**
 * Creates an array of the own symbol properties of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = getOwnPropertySymbols || function() {
  return [];
};

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function getTag(value) {
  return objectToString.call(value);
}

// Fallback for IE 11 providing `toStringTag` values for maps and sets.
if ((Map && getTag(new Map) != mapTag) || (Set && getTag(new Set) != setTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : null,
        ctorString = typeof Ctor == 'function' ? funcToString.call(Ctor) : '';

    if (ctorString) {
      if (ctorString == mapCtorString) {
        return mapTag;
      }
      if (ctorString == setCtorString) {
        return setTag;
      }
    }
    return result;
  };
}

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  var Ctor = object.constructor;
  return baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
}

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return cloneMap(object);

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return cloneSet(object);

    case symbolTag:
      return cloneSymbol(object);
  }
}

/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */
function clone(value) {
  return baseClone(value);
}

/**
 * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'user': 'fred' };
 * var other = { 'user': 'fred' };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @type Function
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8 which returns 'object' for typed array constructors, and
  // PhantomJS 1.9 which returns 'function' for `NodeList` instances.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is a native function.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
 * @example
 *
 * _.isNative(Array.prototype.push);
 * // => true
 *
 * _.isNative(_);
 * // => false
 */
function isNative(value) {
  if (value == null) {
    return false;
  }
  if (isFunction(value)) {
    return reIsNative.test(funcToString.call(value));
  }
  return isObjectLike(value) &&
    (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
}

module.exports = clone;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"lodash._arrayeach":77,"lodash._basefor":78,"lodash._stack":80,"lodash.keys":83}],83:[function(require,module,exports){
(function (global){
/**
 * lodash 4.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    stringTag = '[object String]';

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
  length = length == null ? MAX_SAFE_INTEGER : length;
  return value > -1 && value % 1 == 0 && value < length;
}

/** Used for built-in method references. */
var objectProto = global.Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var getPrototypeOf = Object.getPrototypeOf,
    propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = Object.keys;

/**
 * The base implementation of `_.has` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHas(object, key) {
  // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
  // that are composed entirely of index properties, return `false` for
  // `hasOwnProperty` checks of them.
  return hasOwnProperty.call(object, key) ||
    (typeof object == 'object' && key in object && getPrototypeOf(object) === null);
}

/**
 * The base implementation of `_.keys` which doesn't skip the constructor
 * property of prototypes or treat sparse arrays as dense.
 *
 * @private
 * @type Function
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  return nativeKeys(Object(object));
}

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

/**
 * Gets the "length" property value of `object`.
 *
 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
 * that affects Safari on at least iOS 8.1-8.3 ARM64.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {*} Returns the "length" value.
 */
var getLength = baseProperty('length');

/**
 * Creates an array of index keys for `object` values of arrays,
 * `arguments` objects, and strings, otherwise `null` is returned.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array|null} Returns index keys, else `null`.
 */
function indexKeys(object) {
  var length = object ? object.length : undefined;
  return (isLength(length) && (isArray(object) || isString(object) || isArguments(object)))
    ? baseTimes(length, String)
    : null;
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @type Function
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @type Function
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null &&
    !(typeof value == 'function' && isFunction(value)) && isLength(getLength(value));
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @type Function
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8 which returns 'object' for typed array constructors, and
  // PhantomJS 1.9 which returns 'function' for `NodeList` instances.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  var isProto = isPrototype(object);
  if (!(isProto || isArrayLike(object))) {
    return baseKeys(object);
  }
  var indexes = indexKeys(object),
      skipIndexes = !!indexes,
      result = indexes || [],
      length = result.length;

  for (var key in object) {
    if (baseHas(object, key) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
        !(isProto && key == 'constructor')) {
      result.push(key);
    }
  }
  return result;
}

module.exports = keys;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],84:[function(require,module,exports){
(function (global){
/**
 * lodash 4.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308,
    NAN = 0 / 0;

/** `Object#toString` result references. */
var funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `global`. */
var freeParseInt = parseInt;

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {...*} [args] The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  var length = args ? args.length : 0;
  switch (length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/** Used for built-in method references. */
var objectProto = global.Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Creates a function that invokes `func` with the `this` binding of the
 * created function and arguments from `start` and beyond provided as an array.
 *
 * **Note:** This method is based on the [rest parameter](https://mdn.io/rest_parameters).
 *
 * @static
 * @memberOf _
 * @category Function
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var say = _.rest(function(what, names) {
 *   return what + ' ' + _.initial(names).join(', ') +
 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
 * });
 *
 * say('hello', 'fred', 'barney', 'pebbles');
 * // => 'hello fred, barney, & pebbles'
 */
function rest(func, start) {
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    switch (start) {
      case 0: return func.call(this, array);
      case 1: return func.call(this, args[0], array);
      case 2: return func.call(this, args[0], args[1], array);
    }
    var otherArgs = Array(start + 1);
    index = -1;
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = array;
    return apply(func, this, otherArgs);
  };
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8 which returns 'object' for typed array constructors, and
  // PhantomJS 1.9 which returns 'function' for `NodeList` instances.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Converts `value` to an integer.
 *
 * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3');
 * // => 3
 */
function toInteger(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  var remainder = value % 1;
  return value === value ? (remainder ? value - remainder : value) : 0;
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3);
 * // => 3
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3');
 * // => 3
 */
function toNumber(value) {
  if (isObject(value)) {
    var other = isFunction(value.valueOf) ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = rest;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],85:[function(require,module,exports){
/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
exports.SourceMapGenerator = require('./source-map/source-map-generator').SourceMapGenerator;
exports.SourceMapConsumer = require('./source-map/source-map-consumer').SourceMapConsumer;
exports.SourceNode = require('./source-map/source-node').SourceNode;

},{"./source-map/source-map-consumer":91,"./source-map/source-map-generator":92,"./source-map/source-node":93}],86:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var util = require('./util');

  /**
   * A data structure which is a combination of an array and a set. Adding a new
   * member is O(1), testing for membership is O(1), and finding the index of an
   * element is O(1). Removing elements from the set is not supported. Only
   * strings are supported for membership.
   */
  function ArraySet() {
    this._array = [];
    this._set = {};
  }

  /**
   * Static method for creating ArraySet instances from an existing array.
   */
  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
    var set = new ArraySet();
    for (var i = 0, len = aArray.length; i < len; i++) {
      set.add(aArray[i], aAllowDuplicates);
    }
    return set;
  };

  /**
   * Add the given string to this set.
   *
   * @param String aStr
   */
  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
    var isDuplicate = this.has(aStr);
    var idx = this._array.length;
    if (!isDuplicate || aAllowDuplicates) {
      this._array.push(aStr);
    }
    if (!isDuplicate) {
      this._set[util.toSetString(aStr)] = idx;
    }
  };

  /**
   * Is the given string a member of this set?
   *
   * @param String aStr
   */
  ArraySet.prototype.has = function ArraySet_has(aStr) {
    return Object.prototype.hasOwnProperty.call(this._set,
                                                util.toSetString(aStr));
  };

  /**
   * What is the index of the given string in the array?
   *
   * @param String aStr
   */
  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
    if (this.has(aStr)) {
      return this._set[util.toSetString(aStr)];
    }
    throw new Error('"' + aStr + '" is not in the set.');
  };

  /**
   * What is the element at the given index?
   *
   * @param Number aIdx
   */
  ArraySet.prototype.at = function ArraySet_at(aIdx) {
    if (aIdx >= 0 && aIdx < this._array.length) {
      return this._array[aIdx];
    }
    throw new Error('No element indexed by ' + aIdx);
  };

  /**
   * Returns the array representation of this set (which has the proper indices
   * indicated by indexOf). Note that this is a copy of the internal array used
   * for storing the members so that no one can mess with internal state.
   */
  ArraySet.prototype.toArray = function ArraySet_toArray() {
    return this._array.slice();
  };

  exports.ArraySet = ArraySet;

});

},{"./util":94,"amdefine":45}],87:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var base64 = require('./base64');

  // A single base 64 digit can contain 6 bits of data. For the base 64 variable
  // length quantities we use in the source map spec, the first bit is the sign,
  // the next four bits are the actual value, and the 6th bit is the
  // continuation bit. The continuation bit tells us whether there are more
  // digits in this value following this digit.
  //
  //   Continuation
  //   |    Sign
  //   |    |
  //   V    V
  //   101011

  var VLQ_BASE_SHIFT = 5;

  // binary: 100000
  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

  // binary: 011111
  var VLQ_BASE_MASK = VLQ_BASE - 1;

  // binary: 100000
  var VLQ_CONTINUATION_BIT = VLQ_BASE;

  /**
   * Converts from a two-complement value to a value where the sign bit is
   * placed in the least significant bit.  For example, as decimals:
   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
   */
  function toVLQSigned(aValue) {
    return aValue < 0
      ? ((-aValue) << 1) + 1
      : (aValue << 1) + 0;
  }

  /**
   * Converts to a two-complement value from a value where the sign bit is
   * placed in the least significant bit.  For example, as decimals:
   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
   */
  function fromVLQSigned(aValue) {
    var isNegative = (aValue & 1) === 1;
    var shifted = aValue >> 1;
    return isNegative
      ? -shifted
      : shifted;
  }

  /**
   * Returns the base 64 VLQ encoded value.
   */
  exports.encode = function base64VLQ_encode(aValue) {
    var encoded = "";
    var digit;

    var vlq = toVLQSigned(aValue);

    do {
      digit = vlq & VLQ_BASE_MASK;
      vlq >>>= VLQ_BASE_SHIFT;
      if (vlq > 0) {
        // There are still more digits in this value, so we must make sure the
        // continuation bit is marked.
        digit |= VLQ_CONTINUATION_BIT;
      }
      encoded += base64.encode(digit);
    } while (vlq > 0);

    return encoded;
  };

  /**
   * Decodes the next base 64 VLQ value from the given string and returns the
   * value and the rest of the string via the out parameter.
   */
  exports.decode = function base64VLQ_decode(aStr, aOutParam) {
    var i = 0;
    var strLen = aStr.length;
    var result = 0;
    var shift = 0;
    var continuation, digit;

    do {
      if (i >= strLen) {
        throw new Error("Expected more digits in base 64 VLQ value.");
      }
      digit = base64.decode(aStr.charAt(i++));
      continuation = !!(digit & VLQ_CONTINUATION_BIT);
      digit &= VLQ_BASE_MASK;
      result = result + (digit << shift);
      shift += VLQ_BASE_SHIFT;
    } while (continuation);

    aOutParam.value = fromVLQSigned(result);
    aOutParam.rest = aStr.slice(i);
  };

});

},{"./base64":88,"amdefine":45}],88:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var charToIntMap = {};
  var intToCharMap = {};

  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    .split('')
    .forEach(function (ch, index) {
      charToIntMap[ch] = index;
      intToCharMap[index] = ch;
    });

  /**
   * Encode an integer in the range of 0 to 63 to a single base 64 digit.
   */
  exports.encode = function base64_encode(aNumber) {
    if (aNumber in intToCharMap) {
      return intToCharMap[aNumber];
    }
    throw new TypeError("Must be between 0 and 63: " + aNumber);
  };

  /**
   * Decode a single base 64 digit to an integer.
   */
  exports.decode = function base64_decode(aChar) {
    if (aChar in charToIntMap) {
      return charToIntMap[aChar];
    }
    throw new TypeError("Not a valid base 64 digit: " + aChar);
  };

});

},{"amdefine":45}],89:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  /**
   * Recursive implementation of binary search.
   *
   * @param aLow Indices here and lower do not contain the needle.
   * @param aHigh Indices here and higher do not contain the needle.
   * @param aNeedle The element being searched for.
   * @param aHaystack The non-empty array being searched.
   * @param aCompare Function which takes two elements and returns -1, 0, or 1.
   */
  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare) {
    // This function terminates when one of the following is true:
    //
    //   1. We find the exact element we are looking for.
    //
    //   2. We did not find the exact element, but we can return the index of
    //      the next closest element that is less than that element.
    //
    //   3. We did not find the exact element, and there is no next-closest
    //      element which is less than the one we are searching for, so we
    //      return -1.
    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
    var cmp = aCompare(aNeedle, aHaystack[mid], true);
    if (cmp === 0) {
      // Found the element we are looking for.
      return mid;
    }
    else if (cmp > 0) {
      // aHaystack[mid] is greater than our needle.
      if (aHigh - mid > 1) {
        // The element is in the upper half.
        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare);
      }
      // We did not find an exact match, return the next closest one
      // (termination case 2).
      return mid;
    }
    else {
      // aHaystack[mid] is less than our needle.
      if (mid - aLow > 1) {
        // The element is in the lower half.
        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare);
      }
      // The exact needle element was not found in this haystack. Determine if
      // we are in termination case (2) or (3) and return the appropriate thing.
      return aLow < 0 ? -1 : aLow;
    }
  }

  /**
   * This is an implementation of binary search which will always try and return
   * the index of next lowest value checked if there is no exact hit. This is
   * because mappings between original and generated line/col pairs are single
   * points, and there is an implicit region between each of them, so a miss
   * just means that you aren't on the very start of a region.
   *
   * @param aNeedle The element you are looking for.
   * @param aHaystack The array that is being searched.
   * @param aCompare A function which takes the needle and an element in the
   *     array and returns -1, 0, or 1 depending on whether the needle is less
   *     than, equal to, or greater than the element, respectively.
   */
  exports.search = function search(aNeedle, aHaystack, aCompare) {
    if (aHaystack.length === 0) {
      return -1;
    }
    return recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare)
  };

});

},{"amdefine":45}],90:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var util = require('./util');

  /**
   * Determine whether mappingB is after mappingA with respect to generated
   * position.
   */
  function generatedPositionAfter(mappingA, mappingB) {
    // Optimized for most common case
    var lineA = mappingA.generatedLine;
    var lineB = mappingB.generatedLine;
    var columnA = mappingA.generatedColumn;
    var columnB = mappingB.generatedColumn;
    return lineB > lineA || lineB == lineA && columnB >= columnA ||
           util.compareByGeneratedPositions(mappingA, mappingB) <= 0;
  }

  /**
   * A data structure to provide a sorted view of accumulated mappings in a
   * performance conscious manner. It trades a neglibable overhead in general
   * case for a large speedup in case of mappings being added in order.
   */
  function MappingList() {
    this._array = [];
    this._sorted = true;
    // Serves as infimum
    this._last = {generatedLine: -1, generatedColumn: 0};
  }

  /**
   * Iterate through internal items. This method takes the same arguments that
   * `Array.prototype.forEach` takes.
   *
   * NOTE: The order of the mappings is NOT guaranteed.
   */
  MappingList.prototype.unsortedForEach =
    function MappingList_forEach(aCallback, aThisArg) {
      this._array.forEach(aCallback, aThisArg);
    };

  /**
   * Add the given source mapping.
   *
   * @param Object aMapping
   */
  MappingList.prototype.add = function MappingList_add(aMapping) {
    var mapping;
    if (generatedPositionAfter(this._last, aMapping)) {
      this._last = aMapping;
      this._array.push(aMapping);
    } else {
      this._sorted = false;
      this._array.push(aMapping);
    }
  };

  /**
   * Returns the flat, sorted array of mappings. The mappings are sorted by
   * generated position.
   *
   * WARNING: This method returns internal data without copying, for
   * performance. The return value must NOT be mutated, and should be treated as
   * an immutable borrow. If you want to take ownership, you must make your own
   * copy.
   */
  MappingList.prototype.toArray = function MappingList_toArray() {
    if (!this._sorted) {
      this._array.sort(util.compareByGeneratedPositions);
      this._sorted = true;
    }
    return this._array;
  };

  exports.MappingList = MappingList;

});

},{"./util":94,"amdefine":45}],91:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var util = require('./util');
  var binarySearch = require('./binary-search');
  var ArraySet = require('./array-set').ArraySet;
  var base64VLQ = require('./base64-vlq');

  /**
   * A SourceMapConsumer instance represents a parsed source map which we can
   * query for information about the original file positions by giving it a file
   * position in the generated source.
   *
   * The only parameter is the raw source map (either as a JSON string, or
   * already parsed to an object). According to the spec, source maps have the
   * following attributes:
   *
   *   - version: Which version of the source map spec this map is following.
   *   - sources: An array of URLs to the original source files.
   *   - names: An array of identifiers which can be referrenced by individual mappings.
   *   - sourceRoot: Optional. The URL root from which all sources are relative.
   *   - sourcesContent: Optional. An array of contents of the original source files.
   *   - mappings: A string of base64 VLQs which contain the actual mappings.
   *   - file: Optional. The generated file this source map is associated with.
   *
   * Here is an example source map, taken from the source map spec[0]:
   *
   *     {
   *       version : 3,
   *       file: "out.js",
   *       sourceRoot : "",
   *       sources: ["foo.js", "bar.js"],
   *       names: ["src", "maps", "are", "fun"],
   *       mappings: "AA,AB;;ABCDE;"
   *     }
   *
   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
   */
  function SourceMapConsumer(aSourceMap) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
    }

    var version = util.getArg(sourceMap, 'version');
    var sources = util.getArg(sourceMap, 'sources');
    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
    // requires the array) to play nice here.
    var names = util.getArg(sourceMap, 'names', []);
    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
    var mappings = util.getArg(sourceMap, 'mappings');
    var file = util.getArg(sourceMap, 'file', null);

    // Once again, Sass deviates from the spec and supplies the version as a
    // string rather than a number, so we use loose equality checking here.
    if (version != this._version) {
      throw new Error('Unsupported version: ' + version);
    }

    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    sources = sources.map(util.normalize);

    // Pass `true` below to allow duplicate names and sources. While source maps
    // are intended to be compressed and deduplicated, the TypeScript compiler
    // sometimes generates source maps with duplicates in them. See Github issue
    // #72 and bugzil.la/889492.
    this._names = ArraySet.fromArray(names, true);
    this._sources = ArraySet.fromArray(sources, true);

    this.sourceRoot = sourceRoot;
    this.sourcesContent = sourcesContent;
    this._mappings = mappings;
    this.file = file;
  }

  /**
   * Create a SourceMapConsumer from a SourceMapGenerator.
   *
   * @param SourceMapGenerator aSourceMap
   *        The source map that will be consumed.
   * @returns SourceMapConsumer
   */
  SourceMapConsumer.fromSourceMap =
    function SourceMapConsumer_fromSourceMap(aSourceMap) {
      var smc = Object.create(SourceMapConsumer.prototype);

      smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
      smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
      smc.sourceRoot = aSourceMap._sourceRoot;
      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                              smc.sourceRoot);
      smc.file = aSourceMap._file;

      smc.__generatedMappings = aSourceMap._mappings.toArray().slice();
      smc.__originalMappings = aSourceMap._mappings.toArray().slice()
        .sort(util.compareByOriginalPositions);

      return smc;
    };

  /**
   * The version of the source mapping spec that we are consuming.
   */
  SourceMapConsumer.prototype._version = 3;

  /**
   * The list of original sources.
   */
  Object.defineProperty(SourceMapConsumer.prototype, 'sources', {
    get: function () {
      return this._sources.toArray().map(function (s) {
        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
      }, this);
    }
  });

  // `__generatedMappings` and `__originalMappings` are arrays that hold the
  // parsed mapping coordinates from the source map's "mappings" attribute. They
  // are lazily instantiated, accessed via the `_generatedMappings` and
  // `_originalMappings` getters respectively, and we only parse the mappings
  // and create these arrays once queried for a source location. We jump through
  // these hoops because there can be many thousands of mappings, and parsing
  // them is expensive, so we only want to do it if we must.
  //
  // Each object in the arrays is of the form:
  //
  //     {
  //       generatedLine: The line number in the generated code,
  //       generatedColumn: The column number in the generated code,
  //       source: The path to the original source file that generated this
  //               chunk of code,
  //       originalLine: The line number in the original source that
  //                     corresponds to this chunk of generated code,
  //       originalColumn: The column number in the original source that
  //                       corresponds to this chunk of generated code,
  //       name: The name of the original symbol which generated this chunk of
  //             code.
  //     }
  //
  // All properties except for `generatedLine` and `generatedColumn` can be
  // `null`.
  //
  // `_generatedMappings` is ordered by the generated positions.
  //
  // `_originalMappings` is ordered by the original positions.

  SourceMapConsumer.prototype.__generatedMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
    get: function () {
      if (!this.__generatedMappings) {
        this.__generatedMappings = [];
        this.__originalMappings = [];
        this._parseMappings(this._mappings, this.sourceRoot);
      }

      return this.__generatedMappings;
    }
  });

  SourceMapConsumer.prototype.__originalMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
    get: function () {
      if (!this.__originalMappings) {
        this.__generatedMappings = [];
        this.__originalMappings = [];
        this._parseMappings(this._mappings, this.sourceRoot);
      }

      return this.__originalMappings;
    }
  });

  SourceMapConsumer.prototype._nextCharIsMappingSeparator =
    function SourceMapConsumer_nextCharIsMappingSeparator(aStr) {
      var c = aStr.charAt(0);
      return c === ";" || c === ",";
    };

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  SourceMapConsumer.prototype._parseMappings =
    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      var generatedLine = 1;
      var previousGeneratedColumn = 0;
      var previousOriginalLine = 0;
      var previousOriginalColumn = 0;
      var previousSource = 0;
      var previousName = 0;
      var str = aStr;
      var temp = {};
      var mapping;

      while (str.length > 0) {
        if (str.charAt(0) === ';') {
          generatedLine++;
          str = str.slice(1);
          previousGeneratedColumn = 0;
        }
        else if (str.charAt(0) === ',') {
          str = str.slice(1);
        }
        else {
          mapping = {};
          mapping.generatedLine = generatedLine;

          // Generated column.
          base64VLQ.decode(str, temp);
          mapping.generatedColumn = previousGeneratedColumn + temp.value;
          previousGeneratedColumn = mapping.generatedColumn;
          str = temp.rest;

          if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {
            // Original source.
            base64VLQ.decode(str, temp);
            mapping.source = this._sources.at(previousSource + temp.value);
            previousSource += temp.value;
            str = temp.rest;
            if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {
              throw new Error('Found a source, but no line and column');
            }

            // Original line.
            base64VLQ.decode(str, temp);
            mapping.originalLine = previousOriginalLine + temp.value;
            previousOriginalLine = mapping.originalLine;
            // Lines are stored 0-based
            mapping.originalLine += 1;
            str = temp.rest;
            if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {
              throw new Error('Found a source and line, but no column');
            }

            // Original column.
            base64VLQ.decode(str, temp);
            mapping.originalColumn = previousOriginalColumn + temp.value;
            previousOriginalColumn = mapping.originalColumn;
            str = temp.rest;

            if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {
              // Original name.
              base64VLQ.decode(str, temp);
              mapping.name = this._names.at(previousName + temp.value);
              previousName += temp.value;
              str = temp.rest;
            }
          }

          this.__generatedMappings.push(mapping);
          if (typeof mapping.originalLine === 'number') {
            this.__originalMappings.push(mapping);
          }
        }
      }

      this.__generatedMappings.sort(util.compareByGeneratedPositions);
      this.__originalMappings.sort(util.compareByOriginalPositions);
    };

  /**
   * Find the mapping that best matches the hypothetical "needle" mapping that
   * we are searching for in the given "haystack" of mappings.
   */
  SourceMapConsumer.prototype._findMapping =
    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                           aColumnName, aComparator) {
      // To return the position we are searching for, we must first find the
      // mapping for the given position and then return the opposite position it
      // points to. Because the mappings are sorted, we can use binary search to
      // find the best mapping.

      if (aNeedle[aLineName] <= 0) {
        throw new TypeError('Line must be greater than or equal to 1, got '
                            + aNeedle[aLineName]);
      }
      if (aNeedle[aColumnName] < 0) {
        throw new TypeError('Column must be greater than or equal to 0, got '
                            + aNeedle[aColumnName]);
      }

      return binarySearch.search(aNeedle, aMappings, aComparator);
    };

  /**
   * Compute the last column for each generated mapping. The last column is
   * inclusive.
   */
  SourceMapConsumer.prototype.computeColumnSpans =
    function SourceMapConsumer_computeColumnSpans() {
      for (var index = 0; index < this._generatedMappings.length; ++index) {
        var mapping = this._generatedMappings[index];

        // Mappings do not contain a field for the last generated columnt. We
        // can come up with an optimistic estimate, however, by assuming that
        // mappings are contiguous (i.e. given two consecutive mappings, the
        // first mapping ends where the second one starts).
        if (index + 1 < this._generatedMappings.length) {
          var nextMapping = this._generatedMappings[index + 1];

          if (mapping.generatedLine === nextMapping.generatedLine) {
            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
            continue;
          }
        }

        // The last mapping for each line spans the entire line.
        mapping.lastGeneratedColumn = Infinity;
      }
    };

  /**
   * Returns the original source, line, and column information for the generated
   * source's line and column positions provided. The only argument is an object
   * with the following properties:
   *
   *   - line: The line number in the generated source.
   *   - column: The column number in the generated source.
   *
   * and an object is returned with the following properties:
   *
   *   - source: The original source file, or null.
   *   - line: The line number in the original source, or null.
   *   - column: The column number in the original source, or null.
   *   - name: The original identifier, or null.
   */
  SourceMapConsumer.prototype.originalPositionFor =
    function SourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, 'line'),
        generatedColumn: util.getArg(aArgs, 'column')
      };

      var index = this._findMapping(needle,
                                    this._generatedMappings,
                                    "generatedLine",
                                    "generatedColumn",
                                    util.compareByGeneratedPositions);

      if (index >= 0) {
        var mapping = this._generatedMappings[index];

        if (mapping.generatedLine === needle.generatedLine) {
          var source = util.getArg(mapping, 'source', null);
          if (source != null && this.sourceRoot != null) {
            source = util.join(this.sourceRoot, source);
          }
          return {
            source: source,
            line: util.getArg(mapping, 'originalLine', null),
            column: util.getArg(mapping, 'originalColumn', null),
            name: util.getArg(mapping, 'name', null)
          };
        }
      }

      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    };

  /**
   * Returns the original source content. The only argument is the url of the
   * original source file. Returns null if no original source content is
   * availible.
   */
  SourceMapConsumer.prototype.sourceContentFor =
    function SourceMapConsumer_sourceContentFor(aSource) {
      if (!this.sourcesContent) {
        return null;
      }

      if (this.sourceRoot != null) {
        aSource = util.relative(this.sourceRoot, aSource);
      }

      if (this._sources.has(aSource)) {
        return this.sourcesContent[this._sources.indexOf(aSource)];
      }

      var url;
      if (this.sourceRoot != null
          && (url = util.urlParse(this.sourceRoot))) {
        // XXX: file:// URIs and absolute paths lead to unexpected behavior for
        // many users. We can help them out when they expect file:// URIs to
        // behave like it would if they were running a local HTTP server. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
        var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
        if (url.scheme == "file"
            && this._sources.has(fileUriAbsPath)) {
          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
        }

        if ((!url.path || url.path == "/")
            && this._sources.has("/" + aSource)) {
          return this.sourcesContent[this._sources.indexOf("/" + aSource)];
        }
      }

      throw new Error('"' + aSource + '" is not in the SourceMap.');
    };

  /**
   * Returns the generated line and column information for the original source,
   * line, and column positions provided. The only argument is an object with
   * the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.
   *   - column: The column number in the original source.
   *
   * and an object is returned with the following properties:
   *
   *   - line: The line number in the generated source, or null.
   *   - column: The column number in the generated source, or null.
   */
  SourceMapConsumer.prototype.generatedPositionFor =
    function SourceMapConsumer_generatedPositionFor(aArgs) {
      var needle = {
        source: util.getArg(aArgs, 'source'),
        originalLine: util.getArg(aArgs, 'line'),
        originalColumn: util.getArg(aArgs, 'column')
      };

      if (this.sourceRoot != null) {
        needle.source = util.relative(this.sourceRoot, needle.source);
      }

      var index = this._findMapping(needle,
                                    this._originalMappings,
                                    "originalLine",
                                    "originalColumn",
                                    util.compareByOriginalPositions);

      if (index >= 0) {
        var mapping = this._originalMappings[index];

        return {
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null),
          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
        };
      }

      return {
        line: null,
        column: null,
        lastColumn: null
      };
    };

  /**
   * Returns all generated line and column information for the original source
   * and line provided. The only argument is an object with the following
   * properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.
   *
   * and an array of objects is returned, each with the following properties:
   *
   *   - line: The line number in the generated source, or null.
   *   - column: The column number in the generated source, or null.
   */
  SourceMapConsumer.prototype.allGeneratedPositionsFor =
    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
      // When there is no exact match, SourceMapConsumer.prototype._findMapping
      // returns the index of the closest mapping less than the needle. By
      // setting needle.originalColumn to Infinity, we thus find the last
      // mapping for the given line, provided such a mapping exists.
      var needle = {
        source: util.getArg(aArgs, 'source'),
        originalLine: util.getArg(aArgs, 'line'),
        originalColumn: Infinity
      };

      if (this.sourceRoot != null) {
        needle.source = util.relative(this.sourceRoot, needle.source);
      }

      var mappings = [];

      var index = this._findMapping(needle,
                                    this._originalMappings,
                                    "originalLine",
                                    "originalColumn",
                                    util.compareByOriginalPositions);
      if (index >= 0) {
        var mapping = this._originalMappings[index];

        while (mapping && mapping.originalLine === needle.originalLine) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[--index];
        }
      }

      return mappings.reverse();
    };

  SourceMapConsumer.GENERATED_ORDER = 1;
  SourceMapConsumer.ORIGINAL_ORDER = 2;

  /**
   * Iterate over each mapping between an original source/line/column and a
   * generated line/column in this source map.
   *
   * @param Function aCallback
   *        The function that is called with each mapping.
   * @param Object aContext
   *        Optional. If specified, this object will be the value of `this` every
   *        time that `aCallback` is called.
   * @param aOrder
   *        Either `SourceMapConsumer.GENERATED_ORDER` or
   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
   *        iterate over the mappings sorted by the generated file's line/column
   *        order or the original's source/line/column order, respectively. Defaults to
   *        `SourceMapConsumer.GENERATED_ORDER`.
   */
  SourceMapConsumer.prototype.eachMapping =
    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
      var context = aContext || null;
      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

      var mappings;
      switch (order) {
      case SourceMapConsumer.GENERATED_ORDER:
        mappings = this._generatedMappings;
        break;
      case SourceMapConsumer.ORIGINAL_ORDER:
        mappings = this._originalMappings;
        break;
      default:
        throw new Error("Unknown order of iteration.");
      }

      var sourceRoot = this.sourceRoot;
      mappings.map(function (mapping) {
        var source = mapping.source;
        if (source != null && sourceRoot != null) {
          source = util.join(sourceRoot, source);
        }
        return {
          source: source,
          generatedLine: mapping.generatedLine,
          generatedColumn: mapping.generatedColumn,
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: mapping.name
        };
      }).forEach(aCallback, context);
    };

  exports.SourceMapConsumer = SourceMapConsumer;

});

},{"./array-set":86,"./base64-vlq":87,"./binary-search":89,"./util":94,"amdefine":45}],92:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var base64VLQ = require('./base64-vlq');
  var util = require('./util');
  var ArraySet = require('./array-set').ArraySet;
  var MappingList = require('./mapping-list').MappingList;

  /**
   * An instance of the SourceMapGenerator represents a source map which is
   * being built incrementally. You may pass an object with the following
   * properties:
   *
   *   - file: The filename of the generated source.
   *   - sourceRoot: A root for all relative URLs in this source map.
   */
  function SourceMapGenerator(aArgs) {
    if (!aArgs) {
      aArgs = {};
    }
    this._file = util.getArg(aArgs, 'file', null);
    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
    this._sources = new ArraySet();
    this._names = new ArraySet();
    this._mappings = new MappingList();
    this._sourcesContents = null;
  }

  SourceMapGenerator.prototype._version = 3;

  /**
   * Creates a new SourceMapGenerator based on a SourceMapConsumer
   *
   * @param aSourceMapConsumer The SourceMap.
   */
  SourceMapGenerator.fromSourceMap =
    function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
      var sourceRoot = aSourceMapConsumer.sourceRoot;
      var generator = new SourceMapGenerator({
        file: aSourceMapConsumer.file,
        sourceRoot: sourceRoot
      });
      aSourceMapConsumer.eachMapping(function (mapping) {
        var newMapping = {
          generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          }
        };

        if (mapping.source != null) {
          newMapping.source = mapping.source;
          if (sourceRoot != null) {
            newMapping.source = util.relative(sourceRoot, newMapping.source);
          }

          newMapping.original = {
            line: mapping.originalLine,
            column: mapping.originalColumn
          };

          if (mapping.name != null) {
            newMapping.name = mapping.name;
          }
        }

        generator.addMapping(newMapping);
      });
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          generator.setSourceContent(sourceFile, content);
        }
      });
      return generator;
    };

  /**
   * Add a single mapping from original source line and column to the generated
   * source's line and column for this source map being created. The mapping
   * object should have the following properties:
   *
   *   - generated: An object with the generated line and column positions.
   *   - original: An object with the original line and column positions.
   *   - source: The original source file (relative to the sourceRoot).
   *   - name: An optional original token name for this mapping.
   */
  SourceMapGenerator.prototype.addMapping =
    function SourceMapGenerator_addMapping(aArgs) {
      var generated = util.getArg(aArgs, 'generated');
      var original = util.getArg(aArgs, 'original', null);
      var source = util.getArg(aArgs, 'source', null);
      var name = util.getArg(aArgs, 'name', null);

      if (!this._skipValidation) {
        this._validateMapping(generated, original, source, name);
      }

      if (source != null && !this._sources.has(source)) {
        this._sources.add(source);
      }

      if (name != null && !this._names.has(name)) {
        this._names.add(name);
      }

      this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source: source,
        name: name
      });
    };

  /**
   * Set the source content for a source file.
   */
  SourceMapGenerator.prototype.setSourceContent =
    function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
      var source = aSourceFile;
      if (this._sourceRoot != null) {
        source = util.relative(this._sourceRoot, source);
      }

      if (aSourceContent != null) {
        // Add the source content to the _sourcesContents map.
        // Create a new _sourcesContents map if the property is null.
        if (!this._sourcesContents) {
          this._sourcesContents = {};
        }
        this._sourcesContents[util.toSetString(source)] = aSourceContent;
      } else if (this._sourcesContents) {
        // Remove the source file from the _sourcesContents map.
        // If the _sourcesContents map is empty, set the property to null.
        delete this._sourcesContents[util.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
          this._sourcesContents = null;
        }
      }
    };

  /**
   * Applies the mappings of a sub-source-map for a specific source file to the
   * source map being generated. Each mapping to the supplied source file is
   * rewritten using the supplied source map. Note: The resolution for the
   * resulting mappings is the minimium of this map and the supplied map.
   *
   * @param aSourceMapConsumer The source map to be applied.
   * @param aSourceFile Optional. The filename of the source file.
   *        If omitted, SourceMapConsumer's file property will be used.
   * @param aSourceMapPath Optional. The dirname of the path to the source map
   *        to be applied. If relative, it is relative to the SourceMapConsumer.
   *        This parameter is needed when the two source maps aren't in the same
   *        directory, and the source map to be applied contains relative source
   *        paths. If so, those relative source paths need to be rewritten
   *        relative to the SourceMapGenerator.
   */
  SourceMapGenerator.prototype.applySourceMap =
    function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
      var sourceFile = aSourceFile;
      // If aSourceFile is omitted, we will use the file property of the SourceMap
      if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) {
          throw new Error(
            'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
            'or the source map\'s "file" property. Both were omitted.'
          );
        }
        sourceFile = aSourceMapConsumer.file;
      }
      var sourceRoot = this._sourceRoot;
      // Make "sourceFile" relative if an absolute Url is passed.
      if (sourceRoot != null) {
        sourceFile = util.relative(sourceRoot, sourceFile);
      }
      // Applying the SourceMap can add and remove items from the sources and
      // the names array.
      var newSources = new ArraySet();
      var newNames = new ArraySet();

      // Find mappings for the "sourceFile"
      this._mappings.unsortedForEach(function (mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
          // Check if it can be mapped by the source map, then update the mapping.
          var original = aSourceMapConsumer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
          });
          if (original.source != null) {
            // Copy mapping
            mapping.source = original.source;
            if (aSourceMapPath != null) {
              mapping.source = util.join(aSourceMapPath, mapping.source)
            }
            if (sourceRoot != null) {
              mapping.source = util.relative(sourceRoot, mapping.source);
            }
            mapping.originalLine = original.line;
            mapping.originalColumn = original.column;
            if (original.name != null) {
              mapping.name = original.name;
            }
          }
        }

        var source = mapping.source;
        if (source != null && !newSources.has(source)) {
          newSources.add(source);
        }

        var name = mapping.name;
        if (name != null && !newNames.has(name)) {
          newNames.add(name);
        }

      }, this);
      this._sources = newSources;
      this._names = newNames;

      // Copy sourcesContents of applied map.
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aSourceMapPath != null) {
            sourceFile = util.join(aSourceMapPath, sourceFile);
          }
          if (sourceRoot != null) {
            sourceFile = util.relative(sourceRoot, sourceFile);
          }
          this.setSourceContent(sourceFile, content);
        }
      }, this);
    };

  /**
   * A mapping can have one of the three levels of data:
   *
   *   1. Just the generated position.
   *   2. The Generated position, original position, and original source.
   *   3. Generated and original position, original source, as well as a name
   *      token.
   *
   * To maintain consistency, we validate that any new mapping being added falls
   * in to one of these categories.
   */
  SourceMapGenerator.prototype._validateMapping =
    function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                                aName) {
      if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
          && aGenerated.line > 0 && aGenerated.column >= 0
          && !aOriginal && !aSource && !aName) {
        // Case 1.
        return;
      }
      else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
               && aOriginal && 'line' in aOriginal && 'column' in aOriginal
               && aGenerated.line > 0 && aGenerated.column >= 0
               && aOriginal.line > 0 && aOriginal.column >= 0
               && aSource) {
        // Cases 2 and 3.
        return;
      }
      else {
        throw new Error('Invalid mapping: ' + JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName
        }));
      }
    };

  /**
   * Serialize the accumulated mappings in to the stream of base 64 VLQs
   * specified by the source map format.
   */
  SourceMapGenerator.prototype._serializeMappings =
    function SourceMapGenerator_serializeMappings() {
      var previousGeneratedColumn = 0;
      var previousGeneratedLine = 1;
      var previousOriginalColumn = 0;
      var previousOriginalLine = 0;
      var previousName = 0;
      var previousSource = 0;
      var result = '';
      var mapping;

      var mappings = this._mappings.toArray();

      for (var i = 0, len = mappings.length; i < len; i++) {
        mapping = mappings[i];

        if (mapping.generatedLine !== previousGeneratedLine) {
          previousGeneratedColumn = 0;
          while (mapping.generatedLine !== previousGeneratedLine) {
            result += ';';
            previousGeneratedLine++;
          }
        }
        else {
          if (i > 0) {
            if (!util.compareByGeneratedPositions(mapping, mappings[i - 1])) {
              continue;
            }
            result += ',';
          }
        }

        result += base64VLQ.encode(mapping.generatedColumn
                                   - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;

        if (mapping.source != null) {
          result += base64VLQ.encode(this._sources.indexOf(mapping.source)
                                     - previousSource);
          previousSource = this._sources.indexOf(mapping.source);

          // lines are stored 0-based in SourceMap spec version 3
          result += base64VLQ.encode(mapping.originalLine - 1
                                     - previousOriginalLine);
          previousOriginalLine = mapping.originalLine - 1;

          result += base64VLQ.encode(mapping.originalColumn
                                     - previousOriginalColumn);
          previousOriginalColumn = mapping.originalColumn;

          if (mapping.name != null) {
            result += base64VLQ.encode(this._names.indexOf(mapping.name)
                                       - previousName);
            previousName = this._names.indexOf(mapping.name);
          }
        }
      }

      return result;
    };

  SourceMapGenerator.prototype._generateSourcesContent =
    function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
      return aSources.map(function (source) {
        if (!this._sourcesContents) {
          return null;
        }
        if (aSourceRoot != null) {
          source = util.relative(aSourceRoot, source);
        }
        var key = util.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents,
                                                    key)
          ? this._sourcesContents[key]
          : null;
      }, this);
    };

  /**
   * Externalize the source map.
   */
  SourceMapGenerator.prototype.toJSON =
    function SourceMapGenerator_toJSON() {
      var map = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      if (this._file != null) {
        map.file = this._file;
      }
      if (this._sourceRoot != null) {
        map.sourceRoot = this._sourceRoot;
      }
      if (this._sourcesContents) {
        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
      }

      return map;
    };

  /**
   * Render the source map being generated to a string.
   */
  SourceMapGenerator.prototype.toString =
    function SourceMapGenerator_toString() {
      return JSON.stringify(this);
    };

  exports.SourceMapGenerator = SourceMapGenerator;

});

},{"./array-set":86,"./base64-vlq":87,"./mapping-list":90,"./util":94,"amdefine":45}],93:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;
  var util = require('./util');

  // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
  // operating systems these days (capturing the result).
  var REGEX_NEWLINE = /(\r?\n)/;

  // Newline character code for charCodeAt() comparisons
  var NEWLINE_CODE = 10;

  // Private symbol for identifying `SourceNode`s when multiple versions of
  // the source-map library are loaded. This MUST NOT CHANGE across
  // versions!
  var isSourceNode = "$$$isSourceNode$$$";

  /**
   * SourceNodes provide a way to abstract over interpolating/concatenating
   * snippets of generated JavaScript source code while maintaining the line and
   * column information associated with the original source code.
   *
   * @param aLine The original line number.
   * @param aColumn The original column number.
   * @param aSource The original source's filename.
   * @param aChunks Optional. An array of strings which are snippets of
   *        generated JS, or other SourceNodes.
   * @param aName The original identifier.
   */
  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
    this.children = [];
    this.sourceContents = {};
    this.line = aLine == null ? null : aLine;
    this.column = aColumn == null ? null : aColumn;
    this.source = aSource == null ? null : aSource;
    this.name = aName == null ? null : aName;
    this[isSourceNode] = true;
    if (aChunks != null) this.add(aChunks);
  }

  /**
   * Creates a SourceNode from generated code and a SourceMapConsumer.
   *
   * @param aGeneratedCode The generated code
   * @param aSourceMapConsumer The SourceMap for the generated code
   * @param aRelativePath Optional. The path that relative sources in the
   *        SourceMapConsumer should be relative to.
   */
  SourceNode.fromStringWithSourceMap =
    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
      // The SourceNode we want to fill with the generated code
      // and the SourceMap
      var node = new SourceNode();

      // All even indices of this array are one line of the generated code,
      // while all odd indices are the newlines between two adjacent lines
      // (since `REGEX_NEWLINE` captures its match).
      // Processed fragments are removed from this array, by calling `shiftNextLine`.
      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
      var shiftNextLine = function() {
        var lineContents = remainingLines.shift();
        // The last line of a file might not have a newline.
        var newLine = remainingLines.shift() || "";
        return lineContents + newLine;
      };

      // We need to remember the position of "remainingLines"
      var lastGeneratedLine = 1, lastGeneratedColumn = 0;

      // The generate SourceNodes we need a code range.
      // To extract it current and last mapping is used.
      // Here we store the last mapping.
      var lastMapping = null;

      aSourceMapConsumer.eachMapping(function (mapping) {
        if (lastMapping !== null) {
          // We add the code from "lastMapping" to "mapping":
          // First check if there is a new line in between.
          if (lastGeneratedLine < mapping.generatedLine) {
            var code = "";
            // Associate first line with "lastMapping"
            addMappingWithCode(lastMapping, shiftNextLine());
            lastGeneratedLine++;
            lastGeneratedColumn = 0;
            // The remaining code is added without mapping
          } else {
            // There is no new line in between.
            // Associate the code between "lastGeneratedColumn" and
            // "mapping.generatedColumn" with "lastMapping"
            var nextLine = remainingLines[0];
            var code = nextLine.substr(0, mapping.generatedColumn -
                                          lastGeneratedColumn);
            remainingLines[0] = nextLine.substr(mapping.generatedColumn -
                                                lastGeneratedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
            addMappingWithCode(lastMapping, code);
            // No more remaining code, continue
            lastMapping = mapping;
            return;
          }
        }
        // We add the generated code until the first mapping
        // to the SourceNode without any mapping.
        // Each line is added as separate string.
        while (lastGeneratedLine < mapping.generatedLine) {
          node.add(shiftNextLine());
          lastGeneratedLine++;
        }
        if (lastGeneratedColumn < mapping.generatedColumn) {
          var nextLine = remainingLines[0];
          node.add(nextLine.substr(0, mapping.generatedColumn));
          remainingLines[0] = nextLine.substr(mapping.generatedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
      }, this);
      // We have processed all mappings.
      if (remainingLines.length > 0) {
        if (lastMapping) {
          // Associate the remaining code in the current line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
        }
        // and add the remaining lines without any mapping
        node.add(remainingLines.join(""));
      }

      // Copy sourcesContent into SourceNode
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aRelativePath != null) {
            sourceFile = util.join(aRelativePath, sourceFile);
          }
          node.setSourceContent(sourceFile, content);
        }
      });

      return node;

      function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === undefined) {
          node.add(code);
        } else {
          var source = aRelativePath
            ? util.join(aRelativePath, mapping.source)
            : mapping.source;
          node.add(new SourceNode(mapping.originalLine,
                                  mapping.originalColumn,
                                  source,
                                  code,
                                  mapping.name));
        }
      }
    };

  /**
   * Add a chunk of generated JS to this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  SourceNode.prototype.add = function SourceNode_add(aChunk) {
    if (Array.isArray(aChunk)) {
      aChunk.forEach(function (chunk) {
        this.add(chunk);
      }, this);
    }
    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      if (aChunk) {
        this.children.push(aChunk);
      }
    }
    else {
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
      );
    }
    return this;
  };

  /**
   * Add a chunk of generated JS to the beginning of this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
    if (Array.isArray(aChunk)) {
      for (var i = aChunk.length-1; i >= 0; i--) {
        this.prepend(aChunk[i]);
      }
    }
    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      this.children.unshift(aChunk);
    }
    else {
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
      );
    }
    return this;
  };

  /**
   * Walk over the tree of JS snippets in this node and its children. The
   * walking function is called once for each snippet of JS and is passed that
   * snippet and the its original associated source's line/column location.
   *
   * @param aFn The traversal function.
   */
  SourceNode.prototype.walk = function SourceNode_walk(aFn) {
    var chunk;
    for (var i = 0, len = this.children.length; i < len; i++) {
      chunk = this.children[i];
      if (chunk[isSourceNode]) {
        chunk.walk(aFn);
      }
      else {
        if (chunk !== '') {
          aFn(chunk, { source: this.source,
                       line: this.line,
                       column: this.column,
                       name: this.name });
        }
      }
    }
  };

  /**
   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
   * each of `this.children`.
   *
   * @param aSep The separator.
   */
  SourceNode.prototype.join = function SourceNode_join(aSep) {
    var newChildren;
    var i;
    var len = this.children.length;
    if (len > 0) {
      newChildren = [];
      for (i = 0; i < len-1; i++) {
        newChildren.push(this.children[i]);
        newChildren.push(aSep);
      }
      newChildren.push(this.children[i]);
      this.children = newChildren;
    }
    return this;
  };

  /**
   * Call String.prototype.replace on the very right-most source snippet. Useful
   * for trimming whitespace from the end of a source node, etc.
   *
   * @param aPattern The pattern to replace.
   * @param aReplacement The thing to replace the pattern with.
   */
  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
    var lastChild = this.children[this.children.length - 1];
    if (lastChild[isSourceNode]) {
      lastChild.replaceRight(aPattern, aReplacement);
    }
    else if (typeof lastChild === 'string') {
      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
    }
    else {
      this.children.push(''.replace(aPattern, aReplacement));
    }
    return this;
  };

  /**
   * Set the source content for a source file. This will be added to the SourceMapGenerator
   * in the sourcesContent field.
   *
   * @param aSourceFile The filename of the source file
   * @param aSourceContent The content of the source file
   */
  SourceNode.prototype.setSourceContent =
    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
    };

  /**
   * Walk over the tree of SourceNodes. The walking function is called for each
   * source file content and is passed the filename and source content.
   *
   * @param aFn The traversal function.
   */
  SourceNode.prototype.walkSourceContents =
    function SourceNode_walkSourceContents(aFn) {
      for (var i = 0, len = this.children.length; i < len; i++) {
        if (this.children[i][isSourceNode]) {
          this.children[i].walkSourceContents(aFn);
        }
      }

      var sources = Object.keys(this.sourceContents);
      for (var i = 0, len = sources.length; i < len; i++) {
        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
      }
    };

  /**
   * Return the string representation of this source node. Walks over the tree
   * and concatenates all the various snippets together to one string.
   */
  SourceNode.prototype.toString = function SourceNode_toString() {
    var str = "";
    this.walk(function (chunk) {
      str += chunk;
    });
    return str;
  };

  /**
   * Returns the string representation of this source node along with a source
   * map.
   */
  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
    var generated = {
      code: "",
      line: 1,
      column: 0
    };
    var map = new SourceMapGenerator(aArgs);
    var sourceMappingActive = false;
    var lastOriginalSource = null;
    var lastOriginalLine = null;
    var lastOriginalColumn = null;
    var lastOriginalName = null;
    this.walk(function (chunk, original) {
      generated.code += chunk;
      if (original.source !== null
          && original.line !== null
          && original.column !== null) {
        if(lastOriginalSource !== original.source
           || lastOriginalLine !== original.line
           || lastOriginalColumn !== original.column
           || lastOriginalName !== original.name) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
        lastOriginalSource = original.source;
        lastOriginalLine = original.line;
        lastOriginalColumn = original.column;
        lastOriginalName = original.name;
        sourceMappingActive = true;
      } else if (sourceMappingActive) {
        map.addMapping({
          generated: {
            line: generated.line,
            column: generated.column
          }
        });
        lastOriginalSource = null;
        sourceMappingActive = false;
      }
      for (var idx = 0, length = chunk.length; idx < length; idx++) {
        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
          generated.line++;
          generated.column = 0;
          // Mappings end at eol
          if (idx + 1 === length) {
            lastOriginalSource = null;
            sourceMappingActive = false;
          } else if (sourceMappingActive) {
            map.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
        } else {
          generated.column++;
        }
      }
    });
    this.walkSourceContents(function (sourceFile, sourceContent) {
      map.setSourceContent(sourceFile, sourceContent);
    });

    return { code: generated.code, map: map };
  };

  exports.SourceNode = SourceNode;

});

},{"./source-map-generator":92,"./util":94,"amdefine":45}],94:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  /**
   * This is a helper function for getting values from parameter/options
   * objects.
   *
   * @param args The object we are extracting values from
   * @param name The name of the property we are getting.
   * @param defaultValue An optional value to return if the property is missing
   * from the object. If this is not specified and the property is missing, an
   * error will be thrown.
   */
  function getArg(aArgs, aName, aDefaultValue) {
    if (aName in aArgs) {
      return aArgs[aName];
    } else if (arguments.length === 3) {
      return aDefaultValue;
    } else {
      throw new Error('"' + aName + '" is a required argument.');
    }
  }
  exports.getArg = getArg;

  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
  var dataUrlRegexp = /^data:.+\,.+$/;

  function urlParse(aUrl) {
    var match = aUrl.match(urlRegexp);
    if (!match) {
      return null;
    }
    return {
      scheme: match[1],
      auth: match[2],
      host: match[3],
      port: match[4],
      path: match[5]
    };
  }
  exports.urlParse = urlParse;

  function urlGenerate(aParsedUrl) {
    var url = '';
    if (aParsedUrl.scheme) {
      url += aParsedUrl.scheme + ':';
    }
    url += '//';
    if (aParsedUrl.auth) {
      url += aParsedUrl.auth + '@';
    }
    if (aParsedUrl.host) {
      url += aParsedUrl.host;
    }
    if (aParsedUrl.port) {
      url += ":" + aParsedUrl.port
    }
    if (aParsedUrl.path) {
      url += aParsedUrl.path;
    }
    return url;
  }
  exports.urlGenerate = urlGenerate;

  /**
   * Normalizes a path, or the path portion of a URL:
   *
   * - Replaces consequtive slashes with one slash.
   * - Removes unnecessary '.' parts.
   * - Removes unnecessary '<dir>/..' parts.
   *
   * Based on code in the Node.js 'path' core module.
   *
   * @param aPath The path or url to normalize.
   */
  function normalize(aPath) {
    var path = aPath;
    var url = urlParse(aPath);
    if (url) {
      if (!url.path) {
        return aPath;
      }
      path = url.path;
    }
    var isAbsolute = (path.charAt(0) === '/');

    var parts = path.split(/\/+/);
    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
      part = parts[i];
      if (part === '.') {
        parts.splice(i, 1);
      } else if (part === '..') {
        up++;
      } else if (up > 0) {
        if (part === '') {
          // The first part is blank if the path is absolute. Trying to go
          // above the root is a no-op. Therefore we can remove all '..' parts
          // directly after the root.
          parts.splice(i + 1, up);
          up = 0;
        } else {
          parts.splice(i, 2);
          up--;
        }
      }
    }
    path = parts.join('/');

    if (path === '') {
      path = isAbsolute ? '/' : '.';
    }

    if (url) {
      url.path = path;
      return urlGenerate(url);
    }
    return path;
  }
  exports.normalize = normalize;

  /**
   * Joins two paths/URLs.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be joined with the root.
   *
   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
   *   first.
   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
   *   is updated with the result and aRoot is returned. Otherwise the result
   *   is returned.
   *   - If aPath is absolute, the result is aPath.
   *   - Otherwise the two paths are joined with a slash.
   * - Joining for example 'http://' and 'www.example.com' is also supported.
   */
  function join(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }
    if (aPath === "") {
      aPath = ".";
    }
    var aPathUrl = urlParse(aPath);
    var aRootUrl = urlParse(aRoot);
    if (aRootUrl) {
      aRoot = aRootUrl.path || '/';
    }

    // `join(foo, '//www.example.org')`
    if (aPathUrl && !aPathUrl.scheme) {
      if (aRootUrl) {
        aPathUrl.scheme = aRootUrl.scheme;
      }
      return urlGenerate(aPathUrl);
    }

    if (aPathUrl || aPath.match(dataUrlRegexp)) {
      return aPath;
    }

    // `join('http://', 'www.example.com')`
    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
      aRootUrl.host = aPath;
      return urlGenerate(aRootUrl);
    }

    var joined = aPath.charAt(0) === '/'
      ? aPath
      : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

    if (aRootUrl) {
      aRootUrl.path = joined;
      return urlGenerate(aRootUrl);
    }
    return joined;
  }
  exports.join = join;

  /**
   * Make a path relative to a URL or another path.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be made relative to aRoot.
   */
  function relative(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }

    aRoot = aRoot.replace(/\/$/, '');

    // XXX: It is possible to remove this block, and the tests still pass!
    var url = urlParse(aRoot);
    if (aPath.charAt(0) == "/" && url && url.path == "/") {
      return aPath.slice(1);
    }

    return aPath.indexOf(aRoot + '/') === 0
      ? aPath.substr(aRoot.length + 1)
      : aPath;
  }
  exports.relative = relative;

  /**
   * Because behavior goes wacky when you set `__proto__` on objects, we
   * have to prefix all the strings in our set with an arbitrary character.
   *
   * See https://github.com/mozilla/source-map/pull/31 and
   * https://github.com/mozilla/source-map/issues/30
   *
   * @param String aStr
   */
  function toSetString(aStr) {
    return '$' + aStr;
  }
  exports.toSetString = toSetString;

  function fromSetString(aStr) {
    return aStr.substr(1);
  }
  exports.fromSetString = fromSetString;

  function strcmp(aStr1, aStr2) {
    var s1 = aStr1 || "";
    var s2 = aStr2 || "";
    return (s1 > s2) - (s1 < s2);
  }

  /**
   * Comparator between two mappings where the original positions are compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same original source/line/column, but different generated
   * line and column the same. Useful when searching for a mapping with a
   * stubbed out mapping.
   */
  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
    var cmp;

    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp || onlyCompareOriginal) {
      return cmp;
    }

    cmp = strcmp(mappingA.name, mappingB.name);
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp) {
      return cmp;
    }

    return mappingA.generatedColumn - mappingB.generatedColumn;
  };
  exports.compareByOriginalPositions = compareByOriginalPositions;

  /**
   * Comparator between two mappings where the generated positions are
   * compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same generated line and column, but different
   * source/name/original line and column the same. Useful when searching for a
   * mapping with a stubbed out mapping.
   */
  function compareByGeneratedPositions(mappingA, mappingB, onlyCompareGenerated) {
    var cmp;

    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp || onlyCompareGenerated) {
      return cmp;
    }

    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp) {
      return cmp;
    }

    return strcmp(mappingA.name, mappingB.name);
  };
  exports.compareByGeneratedPositions = compareByGeneratedPositions;

});

},{"amdefine":45}],95:[function(require,module,exports){
arguments[4][46][0].apply(exports,arguments)
},{"./lib":96,"dup":46}],96:[function(require,module,exports){

module.exports = walker;

function walker(astNode, functionTable, offset) {
	function stop() { throw stop; }
	var recurse = function (astNode) {
		if (!astNode || typeof astNode !== 'object' || !astNode.type)
			return astNode;
		// range based recursion: only recurse when the astNode is in range
		if (offset !== undefined && astNode.range &&
		    (astNode.range[0] > offset || astNode.range[1] < offset))
			return astNode;
		
		var fn = functionTable[astNode.type] || functionTable.default || checkProps;
		return fn.call(astNode, recurse, stop);
	}
	var ret;
	try {
		ret = recurse(astNode);
	} catch (e) {
		if (e !== stop)
			throw e;
	}
	return ret;
}

function checkProps(recurse) {
	var self = this;
	var mapped = {};
	Object.keys(self).forEach(function (key) {
		var prop = self[key];
		var ret = prop;
		if (Array.isArray(prop))
			ret = prop.map(recurse);
		else
			ret = recurse(prop);
		mapped[key] = ret;
	});
	return mapped;
}

walker.checkProps = checkProps;

},{}],97:[function(require,module,exports){
"use strict";

var Scope = require("../utils/scope");
var annotate = require("../utils/annotate");
var tojavaScript = require("../utils/to_javascript");
var inference = require("./typeinference/typeinference");
var Types = require("../interfaces").TYPES;
var staticTransformer = require("./constants/staticTransformer");
var determineReturnType = require("./determine_return_type");
var insertBufferAccessors = require("./insert_buffer_accessors");
var TypeInfo = require("../type-system/typeinfo");
var esprima = require("esprima");

function Analyzer(context, options) {
    this._context = context;
    this._options = options;
}

Analyzer.prototype.injectMainFunction = function (name, injectParameters) {
    if (!this._context.getScope().declares(name))
        return;

    // First parameter is set as global _env object to be accessible form BRDFs
    // This is a big hack, need better injection mechanism
    if (injectParameters[0] && injectParameters[0].extra) {
        var envAnnotation = new TypeInfo(injectParameters[0].extra);
        this._context.getScope().declare("_env");
        this._context.getScope().updateTypeInfo("_env", envAnnotation);
        var properties = injectParameters[0].extra.properties;
        var self = this;
        Object.keys(properties).forEach(function (property) {
            var accessors = properties[property].accessors;
            var kind = properties[property].kind;
            if (accessors) {
                if (accessors.get) {
                    var name = property + "_get";
                    self._context.getScope().declare(name);
                    self._context.getScope().updateTypeInfo(name, new TypeInfo({
                        type: "function"
                    }));
                    var ast = esprima.parse(accessors.get).body[0];
                    var scopedName = self._context.getScope().getIdentifier(name);
                    var safeName = scopedName.replace(/\./g, '_');
                    ast.id.name = safeName;
                    self._context.addSpecializedFunction(name, {
                        ast: ast,
                        info: {
                            extra: {
                                type: "object",
                                kind: "Vec3"
                            },
                            newName: self._context.getSafeUniqueName(safeName)
                        }
                    });
                    accessors.get = name;
                    // var name = property + "_get";
                    // self._context.getScope().declare(name);
                    // self._context.getScope().updateTypeInfo(name, new TypeInfo({
                    //     type: "function"
                    // }));
                    // var ast = esprima.parse(accessors.get);
                    // self._context.addFunctionTemplate(self._context.getScope().getIdentifier(name), ast.body[0]);
                    // self.specializeFunction(name, [new TypeInfo({
                    //     type: "array",
                    //     elements: {
                    //         extra: {
                    //             type: "float"
                    //         }
                    //     }
                    // }), kind === "Texture" ? new TypeInfo({type: "object", kind: "Vec2"}) : new TypeInfo({
                    //     type: "int"
                    // })]);
                    // accessors.get = name;
                }
                if (accessors.set) {
                    var name = property + "_set";
                    self._context.getScope().declare(name);
                    self._context.getScope().updateTypeInfo(name, new TypeInfo({
                        type: "function"
                    }));
                    var ast = esprima.parse(accessors.set);
                    self._context.addFunctionTemplate(self._context.getScope().getIdentifier(name), ast.body[0]);
                    self.specializeFunction(name, [new TypeInfo({
                        type: "array",
                        elements: {
                            extra: {
                                type: "float"
                            }
                        }
                    }), new TypeInfo({
                        type: "int"
                    }), new TypeInfo(properties[property].elements.extra)]);
                    accessors.set = name;
                }
            }
        });
    }

    this._context.root.globalParameters[name] = injectParameters;
    this.specializeFunction(name, injectParameters.map(function (parameter) {
        return new TypeInfo(parameter.extra)
    }), name);
};

Analyzer.prototype.specializeFunction = function (name, parameters, uniqueName) {
    var scopedIdentifier = this._context.getScope().getIdentifier(name);
    var signature = this.createSignature(scopedIdentifier, parameters);

    if (this._context.hasSpecializedFunction(signature))
        return this._context.getSpecializedFunction(signature).info;

    if (this._context.hasFunctionTemplate(scopedIdentifier)) {
        var template = this._context.getFunctionTemplate(scopedIdentifier);
        var globalUniqueName = uniqueName || this._context.getSafeUniqueName(scopedIdentifier.replace(/\./g, '_'));
        var specializedFunction = {};
        var templateCopy = JSON.parse(JSON.stringify(template));
        specializedFunction.ast = this.analyzeFunction(templateCopy, parameters);
        specializedFunction.info = specializedFunction.ast.extra.returnInfo;
        specializedFunction.info.newName = specializedFunction.ast.id.name = globalUniqueName;
        this._context.addSpecializedFunction(signature, specializedFunction);
        return specializedFunction.info;
    }

    throw new Error("Could not resolve function " + name);
};

Analyzer.prototype.createSignature = function (functionName, parameters) {
    return parameters.reduce(function(signature, parameter) {
        return signature + parameter.getTypeString();
    }, functionName);
};

Analyzer.prototype.analyzeFunction = function (functionAst, parameterTypeInfos) {
    var functionScope
        = new Scope(functionAst, this._context.getScope(), {name: functionAst.id.name});
    var functionAnnotation = annotate(functionAst);

    functionAst.params.forEach(function (parameter, idx) {
        var annotation = annotate(parameter);
        if (idx < parameterTypeInfos.length) {
            annotation.copyFrom(parameterTypeInfos[idx]);
            annotation.setDynamicValue();
        } else {
            annotation.setType(Types.UNDEFINED);
        }
    });

    functionScope.declareParameters(functionAst.params);

    this._context.pushScope(functionScope);

    functionAst.body = this.analyzeAst(functionAst.body);
    functionAst.params = functionAst.params.filter(function (param) {
        var annotation = annotate(param);
        return !annotation.isUndefined();
    });

    functionAnnotation.setReturnInfo(determineReturnType(functionAst.body));
    this._context.popScope();

    return functionAst;
};

Analyzer.prototype.analyzeAst = function (ast) {
    ast = inference.infer(ast, this._context, this._options, this);

    // Remove/Replace dead code and static expressions
    ast = staticTransformer.transform(ast, this._options);
    //functionASt.body = extractCapturedVariables(functionASt.body, this._context, this._options);

    // ast = this._options.extractUniformExpressions ? uniformAnalysis.extract(ast, this._options) : ast;

    //fnAstNode.body = options.semanticAnalysis ? semantics(fnAstNode.body, options) : fnAstNode.body;
    ast = insertBufferAccessors(this._context, ast);
    return ast;
};

Analyzer.prototype.injectMemory = function (ast, memory) {
    var memAnnotation = new TypeInfo(memory.extra);
    this._context.getScope().declare("__mem");
    this._context.getScope().updateTypeInfo("__mem", memAnnotation);
    this._context.root.globalParameters["__mem"] = memory;

    var properties = memory.extra.properties;
    var self = this;
    Object.keys(properties).forEach(function (property) {
        var accessors = properties[property].accessors;
        if (accessors) {
            if (accessors.get) {
                var name = property + "_get";
                self._context.getScope().declare(name);
                self._context.getScope().updateTypeInfo(name, new TypeInfo({
                    type: "function"
                }));
                var ast = esprima.parse(accessors.get).body[0];
                var scopedName = self._context.getScope().getIdentifier(name);
                var safeName = scopedName.replace(/\./g, '_');
                ast.id.name = safeName;
                self._context.addSpecializedFunction(name, {
                    ast: ast,
                    info: {
                        extra: {
                            type: "object",
                            kind: "Vec3"
                        },
                        newName: self._context.getSafeUniqueName(safeName)
                    }
                });
                accessors.get = name;
            }
            if (accessors.set) {
                var name = property + "_set";
                self._context.getScope().declare(name);
                self._context.getScope().updateTypeInfo(name, new TypeInfo({
                    type: "function"
                }));
                var ast = esprima.parse(accessors.set).body[0];
                var scopedName = self._context.getScope().getIdentifier(name);
                var safeName = scopedName.replace(/\./g, '_');
                ast.id.name = safeName;
                self._context.addSpecializedFunction(name, {
                    ast: ast,
                    info: {
                        extra: {
                            type: "object",
                            kind: "Vec3"
                        },
                        newName: self._context.getSafeUniqueName(safeName)
                    }
                });
                accessors.set = name;
            }
        }
    });
    var self = this;
    ast.body = ast.body.map(function (ast) {
        if (ast.type === "FunctionDeclaration" && ast.id.name === "evaluate") {
            var functionScope
                = new Scope(ast, self._context.getScope(), {name: ast.id.name});
            self._context.pushScope(functionScope);
            ast.params[ast.params.length] = {
                type: "Identifier",
                name: "__mem",
                extra: memory.extra
            };
            ast.body = self.analyzeAst(ast.body);
            // ast.body = insertBufferAccessors(self._context, ast.body);
            self._context.popScope();
        }
        return ast;

    });

    return this._context.getResult();
};

exports = module.exports = Analyzer;


},{"../interfaces":188,"../type-system/typeinfo":203,"../utils/annotate":204,"../utils/scope":207,"../utils/to_javascript":209,"./constants/staticTransformer":99,"./determine_return_type":102,"./insert_buffer_accessors":107,"./typeinference/typeinference":132,"esprima":60}],98:[function(require,module,exports){
(function(ns){

    var Syntax = require('estraverse').Syntax,
        annotate = require("../../utils").annotate;
        Shade = require("../../interfaces.js");


    var UnaryFunctions = {
        "!": function(a) { return !a; },
        "-": function(a) { return -a; },
        "+": function(a) { return +a; },
        "typeof": function(a) { return typeof a; },
        "void": function(a) { return void a; },
        "delete": function(a) { return true; }

    };

    var BinaryFunctions = {
        "+" : function(a,b) { return a + b; },
        "-" : function(a,b) { return a - b; },
        "/" : function(a,b) { return a / b; },
        "*" : function(a,b) { return a * b; },
        "%" : function(a,b) { return a % b; },

        "==" : function(a,b) { return a == b; },
        "!=" : function(a,b) { return a != b; },
        "===" : function(a,b) { return a === b; },
        "!==" : function(a,b) { return a !== b; },
        "<" : function(a,b) { return a < b; },
        "<=" : function(a,b) { return a <= b; },
        ">" : function(a,b) { return a > b; },
        ">=" : function(a,b) { return a >= b; }
    };


    /**
     *
     * @param node
     */
    function getConstantValue(node) {
        if (node.type === Syntax.Literal) {
            var value = node.raw !== undefined ? node.raw : node.value;
            var number = parseFloat(value);
            if (!isNaN(number))
                return number;
            value = node.value;
            switch(value) {
                case "true": return true;
                case "false": return false;
                case "null": return null;
                default: return value;
            }
        }
        if (node.type == Syntax.MemberExpression || node.type == Syntax.CallExpression  || node.type == Syntax.Identifier || node.type == Syntax.NewExpression || node.type == Syntax.LogicalExpression) {
            return annotate(node).getConstantValue();
        }
        if (node.type === Syntax.UnaryExpression) {
            if (node.operator == "typeof") {
                return annotate(node).getTypeString();
            }
            if(UnaryFunctions.hasOwnProperty(node.operator)) {
                return UnaryFunctions[node.operator](getConstantValue(node.argument));
            }
            Shade.throwError(node, "Unknown unary operator: " + node.operator);
        }
        if (node.type === Syntax.BinaryExpression) {
            if(BinaryFunctions.hasOwnProperty(node.operator)) {
                return BinaryFunctions[node.operator](getConstantValue(node.left), getConstantValue(node.right));
            }
            Shade.throwError(node, "Unknown binary operator: " + node.operator);
        }
        Shade.throwError(node, "Evaluating static value for node type: " + node.type);
    };


    function getConstantTruthValue(node) {
        var aNode = annotate(node);

        // !!undefined == false;
        if (aNode.isNullOrUndefined())
            return false;
        // !!{} == true
        if (aNode.isObject() || this.isFunction())
            return true;
        // In all other cases, it depends on the value,
        // thus we can only evaluate this for static objects
        if (aNode.hasConstantValue()) {
            return !!aNode.getConstantValue();
        }
        return undefined;
    }

    exports.getConstantValue = getConstantValue;
    exports.getConstantTruthValue = getConstantTruthValue;



}(exports));

},{"../../interfaces.js":188,"../../utils":206,"estraverse":61}],99:[function(require,module,exports){
(function (ns) {

    var common = require("../../base/common.js"),
        Shade = require("../../interfaces.js"),
        Base = require("../../base/index.js"),
        estraverse = require('estraverse');

    // var codegen = require('escodegen');

    var Syntax = common.Syntax,
        TYPES = Shade.TYPES,
        ANNO = common.ANNO;


    /**
     * Transform AST: Eliminate branches due to static conditions
     * and performs constant folding
     * @param {Object} ast
     * @returns Object
     */
    var transform = ns.transform = function (ast, opt) {
        var transformer = new Transformer(opt);
        return transformer.transform(ast);
    }

    var Transformer = function(opt) {
        opt = opt || {};

        this.foldConstants = opt.foldConstants !== undefined ? opt.foldConstants : true;

        this.controller = new estraverse.Controller();
    };

    Transformer.prototype = {
        transform: function (ast) {
            var that = this;
            return this.controller.replace(ast, {
                enter: function (node, parent) {
                    var typeInfo = ANNO(node);
                    if (!typeInfo.isValid()) {
                        return;
                    }

                    switch (node.type) {
                        case Syntax.IfStatement:
                            return that.handleIfStatement(node);
                        case Syntax.ConditionalExpression:
                            return that.handleConditionalExpression(node);
                        case Syntax.LogicalExpression:
                            return that.handleLogicalExpression(node);
                        case Syntax.AssignmentExpression:
                            return that.handleAssignmentExpression(node);
                        case Syntax.VariableDeclarator:
                            return that.handleVariableDeclarator(node);
                        case Syntax.NewExpression:
                            //case Syntax.CallExpression:
                            return that.handleNewExpression(node);
                        case Syntax.VariableDeclaration:
                            return that.handleVariableDeclaration(node);

                    }

                    if(that.foldConstants && isExpression(node.type, parent.type)) {
                        return that.foldConstantExpression(node);
                    }
                }
            });
        },


        handleIfStatement: function (node) {
            var test = ANNO(node.test);

            if (test.hasConstantValue() || test.canObject()) {
                this.controller.skip();
                var staticValue = test.getStaticTruthValue();
                if (staticValue === true) {
                    return transform(node.consequent);
                }
                if (staticValue === false) {
                    if (node.alternate) {
                        return this.transform(node.alternate);
                    }
                    return {
                        type: Syntax.EmptyStatement
                    }
                }
            }
        },


        handleConditionalExpression: function (node) {
            var test = ANNO(node.test);

            if (test.hasConstantValue() || test.canObject()) {
                this.controller.skip();
                var staticValue = test.getStaticTruthValue();
                if (staticValue === true) {
                    return this.transform(node.consequent);
                } else {
                    return this.transform(node.alternate);
                }
            }
        },

        handleLogicalExpression: function (node) {
            var left = ANNO(node.left);
            var right = ANNO(node.right);
            var leftBool = left.getStaticTruthValue();
            var rightBool = right.getStaticTruthValue();

            if (node.operator === "||") {
                if (leftBool === false) {
                    return node.right;
                }
                if (leftBool === true) {
                    return node.left;
                }
                // Left is dynamic, let's check right
                if (rightBool === false) {
                    return node.left;
                }
            } else if (node.operator === "&&") {
                if (leftBool === false) {
                    return node.left;
                }
                if (leftBool === true) {
                    return node.right;
                }
                // Left is dynamic, let's check right
                if (rightBool === true) {
                    // Now the result type is always the one of the left value
                    return node.left;
                }
                if (rightBool === false) {
                    // Now the result must be false
                    return {
                        type: Syntax.Literal,
                        value: "false",
                        extra: { type: "boolean"}
                    };
                }
            }
        },

        handleAssignmentExpression: function (node) {
            node.right = this.foldConstantExpression(node.right);
            return node;
        },
        handleNewExpression: function (node) {
            var args = node.arguments, newArgs = [];
            args.forEach(function (arg) {
                var typeInfo = ANNO(arg);
                if (isSimpleStatic(typeInfo)) {
                    newArgs.push(generateLiteralFromTypeInfo(typeInfo))
                } else {
                    newArgs.push(arg);
                }
            });
            node.arguments = newArgs;
            return node;
        },

        handleVariableDeclaration: function (node) {
            var declarations = node.declarations, newDeclarations = [], that = this;
            declarations.forEach(function (declaration) {
                var typeInfo = ANNO(declaration);
                if (!typeInfo.isUndefined()) {
                    newDeclarations.push(declaration);
                }
            });
            if (!newDeclarations.length) {
                return {
                    type: Syntax.EmptyStatement
                }
            }
            node.declarations = newDeclarations;
            return node;
        },
        handleVariableDeclarator: function (node) {
            if (node.init) {
                node.init = this.foldConstantExpression(node.init);
                return node;
            }
        },
        foldConstantExpression: function (node) {
            var anno = ANNO(node);
            if (this.foldConstants) {
                if (isSimpleStatic(anno)) {
                    return generateLiteralFromTypeInfo(anno);
                } else if (isStaticObject(anno)) {
                    return generateConstructorFromTypeInfo(anno);
                }
            }
            return node;
        }


    };

    function isSimpleStatic(typeInfo) {
        return typeInfo.hasConstantValue() && !(typeInfo.isObject() || typeInfo.isNullOrUndefined());
    }

     function isStaticObject(typeInfo) {
        return typeInfo.hasConstantValue() && typeInfo.isVector();
    }

    var c_expressions = [Syntax.BinaryExpression, Syntax.UnaryExpression, Syntax.MemberExpression];
    var c_parentLiteralExpressions = [Syntax.BinaryExpression, Syntax.ReturnStatement, Syntax.CallExpression];


    function isExpression(type, parentType) {
        if(type === Syntax.Identifier) {
            return c_parentLiteralExpressions.indexOf(parentType) !== -1;
        }
        return c_expressions.indexOf(type) !== -1;
    }


    function generateConstructorFromTypeInfo(typeInfo) {
        var value = typeInfo.getConstantValue(), size, name, arguments = [];
        switch(typeInfo.getKind()) {
            case "Vec2": size = 2; name = "Vec2"; break;
            case "Vec3": size = 3; name = "Vec3"; break;
            case "Vec4": size = 4; name = "Vec4"; break;
            default:
                throw new Error("Internal error in static transformation. Unknown kind: " + typeInfo.getKind());
        }


        for(var i = 0; i < size; ++i) {
            arguments.push(generateFloatLiteralFromValue(value.data[i]));
        }

        var result = {
            type: Syntax.NewExpression,
            callee: {
                type: Syntax.Identifier,
                name: name
            },
            arguments: arguments
        }
        ANNO(result).copyFrom(typeInfo);
        return result;
    }

    function generateFloatLiteralFromValue(value) {
        var needsSign = value < 0;

        var literal = { type: Syntax.Literal, value: needsSign ? -value : value };
        ANNO(literal).setType(Shade.TYPES.NUMBER);

        if (!needsSign)
            return literal;

        var expression = {
                type: Syntax.UnaryExpression,
                operator: "-",
                argument: literal
        }
        ANNO(expression).setType(Shade.TYPES.NUMBER);
        return expression;
    }

    function generateLiteralFromTypeInfo(typeInfo) {
        var value = typeInfo.getConstantValue();
        var isNegative = value < 0;

        var result = {
            type: Syntax.Literal,
            value: isNegative ? -value : value
        };
		var ti = ANNO(result);
		ti.copyFrom(typeInfo);

        if(isNegative) {
            result.extra.constantValue = -value;
            result = {
                type: Syntax.UnaryExpression,
                operator: "-",
                argument: result
            }
            ti = ANNO(result);
			ti.copyFrom(typeInfo);
        }
        return result;
    }









}(exports));

},{"../../base/common.js":140,"../../base/index.js":142,"../../interfaces.js":188,"estraverse":61}],100:[function(require,module,exports){
"use strict";

var util = require("util");

var Context = require("../base/context.js");
var common = require("../base/common.js");
var assert = require("assert");
var walk = require('estraverse');
var Shade = require("../interfaces.js");

// Shortcuts
var Syntax = common.Syntax;
var annotate = require("../utils/").annotate;

function AnalysisContext(program, options) {
	Context.call(this, program, options);

	assert.equal(program.type, Syntax.Program);

	this.root.globalParameters = {};
	this._functionTemplates = new Map();
	this._specializedFunctions = new Map();
	this.constants = null;
}

util.inherits(AnalysisContext, Context);

AnalysisContext.prototype.getFunctionTemplate = function (name) {
	return this._functionTemplates.get(name);
};

AnalysisContext.prototype.addFunctionTemplate = function (name, node) {
	this._functionTemplates.set(name, node);
};

AnalysisContext.prototype.hasFunctionTemplate = function (name) {
	return this._functionTemplates.has(name);
};

AnalysisContext.prototype.getSpecializedFunction = function (signature) {
	return this._specializedFunctions.get(signature);
};

AnalysisContext.prototype.addSpecializedFunction = function (signature, specializedFunction) {
	this._specializedFunctions.set(signature, specializedFunction);
};

AnalysisContext.prototype.hasSpecializedFunction = function (signature) {
	return this._specializedFunctions.has(signature);
};

AnalysisContext.prototype.getTypeInfo = function(node) {
	return common.getTypeInfo(node, this.getScope(), this.constants, true);
};

AnalysisContext.prototype.setConstants = function(c) {
	this.constants = c;
};

AnalysisContext.prototype.getResult = function() {
	// (Re-)add derived function to the program
	addDerivedMethods(this.root, this);
	return this.root;
};

AnalysisContext.prototype.declare = function(ast, inDeclaration) {
	var scope = this.getScope(), context = this;
	if (ast.type == Syntax.VariableDeclaration) {
		var declarations = ast.declarations;
		declarations.forEach(function(declaration) {
			var result = annotate(declaration);

			if (declaration.id.type != Syntax.Identifier) {
				throw new Error("Dynamic variable names are not yet supported");
			}
			var variableName = declaration.id.name;
			scope.declare(variableName, true, declaration);

			if (declaration.init) {
				var init = annotate(declaration.init);
				scope.updateTypeInfo(variableName, init, declaration);
				if (declaration.init.type == Syntax.AssignmentExpression) {
					context.declare(declaration.init, true);
				}
			} else {
				result.setType(Shade.TYPES.UNDEFINED);
			}
		})
	} else if (ast.type == Syntax.AssignmentExpression && inDeclaration) {
		var typeInfo = annotate(ast.right);

		if (ast.left.type != Syntax.Identifier) {
			throw new Error("Dynamic variable names are not yet supported");
		}
		var variableName = ast.left.name;
		scope.declare(variableName, true, annotate(ast));
		scope.updateTypeInfo(variableName, typeInfo, ast);
		if (ast.right.type == Syntax.AssignmentExpression) {
			context.declare(ast.right, true);
		}
	}
	return true;
};

function addDerivedMethods(program, context) {
	context._specializedFunctions.forEach(function (specializedFunction) {
		program.body.push(specializedFunction.ast);
	});

	walk.traverse(program, {
		enter: function(node) {
			if (node.type == Syntax.CallExpression) {
				if (node.extra && node.extra.newName) {
					node.callee.name = node.extra.newName;
				}
			}
		}
	});
}

exports = module.exports = AnalysisContext;

},{"../base/common.js":140,"../base/context.js":141,"../interfaces.js":188,"../utils/":206,"assert":25,"estraverse":61,"util":42}],101:[function(require,module,exports){
"use strict";

var Scope = require("../utils/scope");
var TypeSystem = require("../type-system/type-system.js");

exports = module.exports = function (ast) {
    var globalScope = new Scope(ast, null, {name: "global"});
    globalScope.declarePredefined("Math",
        TypeSystem.getPredefinedObject("Math"));
    globalScope.declarePredefined("Vec2",
        TypeSystem.getPredefinedObject("Vec2"));
    globalScope.declarePredefined("Vec3",
        TypeSystem.getPredefinedObject("Vec3"));
    globalScope.declarePredefined("Vec4",
        TypeSystem.getPredefinedObject("Vec4"));
    globalScope.declarePredefined("Mat3",
        TypeSystem.getPredefinedObject("Mat3"));
    globalScope.declarePredefined("Mat4",
        TypeSystem.getPredefinedObject("Mat4"));
    globalScope.declarePredefined("this",
        TypeSystem.getPredefinedObject("System"));
    globalScope.declarePredefined("Space",
        TypeSystem.getPredefinedObject("Space"));
    globalScope.declarePredefined("Object",
        TypeSystem.getPredefinedObject("Object"));
    globalScope.declarePredefined("Shade",
        TypeSystem.getPredefinedObject("Shade"));
    globalScope.declarePredefined("Array",
        TypeSystem.getPredefinedObject("Array"));
    globalScope.declarePredefined("Texture",
        TypeSystem.getPredefinedObject("Texture"));
    return globalScope;
};

},{"../type-system/type-system.js":202,"../utils/scope":207}],102:[function(require,module,exports){
"use strict";

var estraverse = require("estraverse");
var Syntax = estraverse.Syntax;

var Types = require("../interfaces").TYPES;

function determineReturnType(func, opt) {
    var returnType = {
        type: Types.UNDEFINED
    };
    estraverse.traverse(func, {
        enter: function (node) {
            if (node.type === Syntax.ReturnStatement) {
                if (returnType.type !== Types.UNDEFINED)
                    throwIfNotSameType(node.argument.extra, returnType);
                else
                    returnType = node.argument.extra;
            }
        }
    });
    return returnType;
}

function throwIfNotSameType(actual, expected) {
    if (actual.type !== expected.type || actual.kind !== expected.kind)
        throw new Error("Return statements with different types are not supported!");

    if (actual.type === Types.Object) {
        Object.keys(actual.properties).forEach(function (prop) {
            throwIfNotSameType(actual.properties[prop], expected.properties[prop]);
        });
    }
}

exports = module.exports = function (program, opt) {
    return determineReturnType(program);
};

},{"../interfaces":188,"estraverse":61}],103:[function(require,module,exports){
"use strict";

var estraverse = require("estraverse");
var Syntax = estraverse.Syntax;
var esgraph = require("esgraph");

var worklist = require("analyses");
var Set = worklist.Set;

var slicer = require("./slicer");
var Types = require("../interfaces").TYPES;
var utils = require("../utils");

function extractAllocationsInProgram(program) {
    var allocations = new Set();
    estraverse.traverse(program, {
        enter: function (node) {
            if (node.type === Syntax.FunctionDeclaration) {
                var localAllocations = extractAllocations(node, findAllocationsInFunction(node));
                allocations = Set.union(allocations, localAllocations);
            }
        }
    });

    return {
        ast: program,
        allocations: allocations
    }
}

function findAllocationsInFunction(node) {
    var allocations = new Set();
    var cfg = esgraph(node.body, {omitExceptions: true});
    cfg[2].forEach(function (cfgNode, idx) {
        if (cfgNode.type || !cfgNode.astNode)
            return;
        estraverse.traverse(cfgNode.astNode, {
            enter: function (astNode) {
                if (astNode.type === Syntax.AssignmentExpression) {
                    if (astNode.right.type === Syntax.NewExpression) {
                        if (astNode.right.callee.name === "Array") {
                            if (astNode.left.type === Syntax.Identifier)
                                allocations.add({
                                    cfgIndex: idx,
                                    astNode: astNode,
                                    varName: astNode.left.name,
                                    elementTypeInfo: JSON.parse(JSON.stringify(utils.annotate(astNode).getArrayElementType()))
                                });
                            if (astNode.left.computed) {
                                var node = astNode.left;
                                while (node.computed)
                                    node = node.object;
                                var allocation = allocations.values().find(function (allocation) {
                                    return allocation.varName === node.name;
                                });
                                node = astNode.left;
                                var subarrayInfo = allocation.elementTypeInfo;
                                while (node.computed) {
                                    subarrayInfo = subarrayInfo.extra.elements;
                                    node = node.object;
                                }
                                subarrayInfo.extra.astNode = astNode;
                            }
                        }
                        if (astNode.right.callee.name === "Texture") {
                            if (astNode.left.type === Syntax.Identifier)
                                allocations.add({
                                    cfgIndex: idx,
                                    astNode: astNode,
                                    varName: astNode.left.name,
                                    isTexture: true
                                });
                        }
                    }
                }
            }
        });
    });
    return allocations;
}

function extractAllocations(node, allocations) {
    var scope = new utils.Scope(node);
    return allocations.map(function (allocation) {
        var astCopy = JSON.parse(JSON.stringify(node));
        var cfg = esgraph(astCopy.body, {omitExceptions: true});
        var relevantNodes = slicer.slice(cfg, cfg[2][allocation.cfgIndex], allocation.varName);
        cfg[2].forEach(function (node) {
            if (node.type || !node.astNode)
                return;

            node.astNode._relevant = relevantNodes.has(node);
        });

        estraverse.replace(cfg[0].astNode, {
            enter: function (astNode, parent) {
                if (astNode.test && astNode.test._relevant === false)
                    this.remove();

                if (astNode.type === Syntax.ExpressionStatement
                    && astNode.expression._relevant === false)
                    this.remove();

                if (astNode._relevant === false)
                    this.remove();

                if (astNode === cfg[2][allocation.cfgIndex].astNode) {
                    if (utils.annotate(astNode).isTexture())
                        return {
                            type: Syntax.ReturnStatement,
                            argument: {
                                type: Syntax.ArrayExpression,
                                elements: astNode.right.arguments
                            }
                        };
                    return {
                        type: Syntax.ReturnStatement,
                        argument: astNode.right.arguments[0]
                    };
                }
            }
        });

        estraverse.replace(node, {
            enter: function (node) {
                if (node === allocation.astNode) {
                    if (node.right.type === Syntax.NewExpression) {
                        if (node.right.callee.name === "Array" || node.right.callee.name === "Texture") {
                            var propertyName = scope.getIdentifier(allocation.varName).replace(/\./g, '_');
                            var result = {
                                type: Syntax.MemberExpression,
                                object: {
                                    type: Syntax.Identifier,
                                    name: "__mem"
                                },
                                property: {
                                    type: Syntax.Identifier,
                                    name: propertyName
                                }
                            };
                            var anno = utils.annotate(result);
                            anno.setType(Types.OBJECT);
                            anno.setProperties({});
                            anno.setProperty(propertyName, utils.annotate(node.right).info);
                            node.right = result;
                            return node;
                        }
                    }
                }
            }
        });

        var envParamName = node.params.find(function (param) {
            if (param.extra.global)
                return true;
        });

        var extractParameters = require("./extract_parameters");

        // this is soooo bad! but necessary because extractParameters requires a program not a function due to global scope bs.
        var fakeProgram = {
            body: [astCopy],
            type: "Program"
        };

        return {
            propertyName: scope.getIdentifier(allocation.varName).replace(/\./g, '_'),
            elements: allocation.elementTypeInfo,
            isTexture: allocation.isTexture,
            dependencies: extractParameters(fakeProgram, {entry: astCopy.id.name}).shaderParameters,
            size: new Function(envParamName.name, utils.toJavaScript(astCopy.body))
        };
    });
}

exports = module.exports = function (program, opt) {
    opt = opt || {};
    return extractAllocationsInProgram(program);
};

},{"../interfaces":188,"../utils":206,"./extract_parameters":105,"./slicer":114,"analyses":46,"esgraph":58,"estraverse":61}],104:[function(require,module,exports){
"use strict";

var walk = require("estraverse");
var Syntax = walk.Syntax;

var annotate = require("../utils/annotate");
var Scope = require("../utils/scope");

// todo: I don't like using the context's scope stack here!
module.exports = exports = function(prg, context) {
    context.addFunctionTemplate("global", prg);
    function extractFunctions(ast) {
        walk.replace(ast, {
            enter: function(node) {
                if (node.type == Syntax.FunctionDeclaration
                    || node.type == Syntax.FunctionExpression) {
                    node.id = node.id || {
                            name: context.getSafeUniqueName("anonymousFunction")
                        };
                    var localName = node.id.name;
                    var parentScope = context.getScope();
                    var annotation = annotate(node);
                    annotation.setType(Shade.TYPES.FUNCTION);
                    annotation.setFunctionName(localName);
                    parentScope.declare(localName);
                    parentScope.updateTypeInfo(localName, annotation);

                    var newScope
                        = new Scope(node, parentScope, {name: localName});
                    context.addFunctionTemplate(newScope.toString(), node);
                    context.pushScope(newScope);
                    extractFunctions(node.body);
                }
            },
            leave: function(node) {
                if (node.type == Syntax.FunctionDeclaration) {
                    context.popScope();
                    return {type: Syntax.EmptyStatement};
                }

                if (node.type == Syntax.FunctionExpression) {
                    context.popScope();
                    return {type: Syntax.Identifier, name: node.id.name};
                }
            }
        });
        ast.body = ast.body.filter(function(a) {
            return a.type != Syntax.EmptyStatement;
        });
    }

    extractFunctions(prg);
};


},{"../utils/annotate":204,"../utils/scope":207,"estraverse":61}],105:[function(require,module,exports){
"use strict";

var walk = require('estraverse');
var Scope = require("./../utils/scope.js");
var Syntax = walk.Syntax;

var derivedSystemParameters = {
    normalizedCoords: ["coords"],
    height: ["coords"],
    width: ["coords"]
};

function merge(result, other) {
    var i, param;
    for (var container in result) {
        for(i = 0; i < other[container].length; i++) {
            param = other[container][i];
            if (result[container].indexOf(param) == -1) {
                result[container].push(param);
            }
        }
    }
}

function addSystemParameter(parameterName, container, parameterMap) {
    // Is parameter already in container?
    if (container.indexOf(parameterName) != -1)
        return;

    if (parameterMap && parameterMap.hasOwnProperty(parameterName)) {
        var requiredParameters = parameterMap[parameterName];
        requiredParameters.forEach(function (param) {
            addSystemParameter(param, container, parameterMap);
        });
        return;
    }
    container.push(parameterName);
}

var findParametersInFunction = function (functionName, program, environmentObjectPosition, analyzedCalls) {
    var scope = new Scope(program, null, {name: "global"});
    var scopeStack = [scope];

    var result = {
        shaderParameters: [],
        systemParameters: []
    };
    analyzedCalls = analyzedCalls || {};

    var activeParam = null;

    var controller = new walk.Controller();
    controller.traverse(program, {
        enter: function (node) {
            var scope;
            switch (node.type) {
                case Syntax.FunctionDeclaration:
                    var parentScope = scopeStack[scopeStack.length - 1];
                    parentScope.declare(node.id.name, false);
                    scope = new Scope(node, parentScope, {name: node.id.name });
                    scopeStack.push(scope);
                    if (parentScope.getIdentifier(node.id.name) === functionName) {
                        if (environmentObjectPosition !== -1 && node.params.length > environmentObjectPosition)
                            activeParam = node.params[environmentObjectPosition].name;
                    }
                    else {
                        if (!activeParam)
                            this.skip()
                    }
                    break;
                case Syntax.CallExpression:
                    var pos = node.arguments.reduce(function (prev, curr, index) {
                        if (curr.name && curr.name == activeParam)
                            return index;
                        return prev;
                    }, -1);
                    scope = scopeStack[scopeStack.length - 1];
                    var id = scope.getIdentifier(node.callee.name);
                    if (id && !analyzedCalls[id]) {
                        analyzedCalls[id] = true;
                        merge(result, findParametersInFunction(id, program, pos, analyzedCalls));
                    }
                    break;
                default:
            }
        },
        leave: function (node) {
            var type = node.type;
            switch (type) {
                case Syntax.FunctionDeclaration:
                    scopeStack.pop();
                    var parentScope = scopeStack[scopeStack.length - 1];
                    if (parentScope.getIdentifier(node.id.name) === functionName) {
                        activeParam = null;
                    }
                    break;
                case Syntax.MemberExpression:
                    var parameterName = node.property.name;
                    // In a specific parameter of the current method
                    if (activeParam && node.object.name == activeParam) {
                        addSystemParameter(parameterName, result.shaderParameters);
                    } // In 'this' is a system parameter
                    else if (node.object.type == Syntax.ThisExpression) {
                        addSystemParameter(parameterName, result.systemParameters, derivedSystemParameters);
                    } // In global variable '_env'
                    else if (node.object.name == "_env") {
                        addSystemParameter(parameterName, result.shaderParameters);
                    }
                    break;
            }
        }
    });

    return result;
};

exports = module.exports = function (program, opt) {
    opt = opt || {};
    var functionName = opt.entry ? "global." + opt.entry : "global.shade";
    var parameterPosition = opt.param || 0;

    return findParametersInFunction(functionName, program, parameterPosition);
};

},{"./../utils/scope.js":207,"estraverse":61}],106:[function(require,module,exports){
"use strict";

var sanitizer = require("./sanitizer/sanitizer.js");
var Analyzer = require("./analyzer");
var validate = require("./validation");

var resolver = require("../resolve/resolve.js");
var uniformAnalysis = require("./uniformExpressions/uniformAnalysis.js");
var AnalysisContext = require("./context.js");
var spaceTransformer
	= require("../generate/space/transform.js").SpaceTransformer;
var walk = require('estraverse');
var Syntax = walk.Syntax;
var resolve = require("./require/resolver");
var toJavaScript = require("../utils/to_javascript");

var extractFunctionTemplates = require("./extract_function_templates");
var createGlobalScope = require("./create_global_scope");

exports.analyze = function(ast, processingData, options) {
	options = options || {};
	processingData = processingData || {};

	ast = options.sanitize ? sanitizer.sanitize(ast, options) : ast;
	ast = resolve(ast);

	var context = new AnalysisContext(ast, options);
	context.pushScope(createGlobalScope(ast));
	extractFunctionTemplates(ast, context);
	var analyzer = new Analyzer(context, options);
	analyzer.analyzeAst(ast);

	if (options.entry)
		analyzer.injectMainFunction(
			options.entry,
			(options.inject && options.inject[options.entry]) || []);

	ast = context.getResult();

	if (options.extractAllocations) {
		var extractAllocations = require("./extract_allocations");
		var result = extractAllocations(ast);
		ast = result.ast;
		processingData.allocations = result.allocations;
	}
	
	// ast = options.implementation ?
	// 	resolver.resolveClosuresPostTypeInference(ast, options.implementation,
	// 		processingData, options) : ast;
    //

	// check for remaining code the completeness of annotations
	if (options.validate)
		validate(ast);

	if (options.transformSpaces)
		processingData.spaceInfo = spaceTransformer.transformAast(ast, options);

	return ast;
};

exports.injectMemory = function (ast, mem, options) {
	var context = new AnalysisContext(ast, options);
	context.pushScope(createGlobalScope(ast));
	// extractFunctionTemplates(ast, context);
	var analyzer = new Analyzer(context, options);
	// analyzer.analyzeAst(ast);
	// analyzer.injectMainFunction(
	// 	options.entry,
		// (options.inject && options.inject[options.entry]) || []);
	return analyzer.injectMemory(ast, mem);
};
},{"../generate/space/transform.js":181,"../resolve/resolve.js":193,"../utils/to_javascript":209,"./analyzer":97,"./context.js":100,"./create_global_scope":101,"./extract_allocations":103,"./extract_function_templates":104,"./require/resolver":108,"./sanitizer/sanitizer.js":111,"./uniformExpressions/uniformAnalysis.js":134,"./validation":139,"estraverse":61}],107:[function(require,module,exports){
"use strict";

var estraverse = require("estraverse");
var Syntax = estraverse.Syntax;
var ANNO = require("../utils/annotate");
var TypeInfo = require("../type-system/typeinfo");

exports = module.exports = function (context, ast) {
    return estraverse.replace(ast, {
        enter: function (parent) {
            var replacementNode = null;
            if (parent.type === Syntax.AssignmentExpression && parent.left.type === Syntax.MemberExpression) {
                var resultType = context.getTypeInfo(parent);
                estraverse.traverse(parent.left, {
                    leave: function (node) {
                        if (node.type === Syntax.MemberExpression) {
                            var objectAnnotation = context.getTypeInfo(node.object);
                            if (objectAnnotation.isArray()) {
                                estraverse.traverse(node, {
                                    leave: function (node) {
                                        var objectAnnotation = context.getTypeInfo(node.object);
                                        if (node.type === Syntax.MemberExpression && node.computed === true) {
                                            if (objectAnnotation.info.accessors && objectAnnotation.info.accessors.set) {
                                                var name = context.getScope().getIdentifier(objectAnnotation.info.accessors.set).replace(/\./g, '_');
                                                replacementNode = {
                                                    type: Syntax.CallExpression,
                                                    callee: {
                                                        type: Syntax.Identifier,
                                                        name: name
                                                    },
                                                    arguments: [node.object],
                                                    setter: true,
                                                    extra: resultType.info
                                                };
                                            }
                                            if (replacementNode)
                                                replacementNode.arguments.push(node.property);
                                        }
                                    }
                                });
                                if (replacementNode)
                                    replacementNode.arguments.push(parent.right);
                            }
                        }
                        this.skip();
                    }
                });
                if (replacementNode) {
                    this.skip();
                    return replacementNode;
                }
            } else {
                if (parent.type === Syntax.CallExpression && parent.callee.type === Syntax.MemberExpression) {
                    var objectAnnotation = context.getTypeInfo(parent.callee.object);
                    if (objectAnnotation.isTexture() && objectAnnotation.info.accessors && objectAnnotation.info.accessors.get) {
                        var name = context.getScope().getIdentifier(objectAnnotation.info.accessors.get).replace(/\./g, '_');
                        var resultType = context.getTypeInfo(parent);
                        replacementNode = {
                            type: Syntax.CallExpression,
                            callee: {
                                type: Syntax.Identifier,
                                name: name
                            },
                            getter: true,
                            arguments: [parent.callee.object, parent.arguments[0]],
                            extra: resultType.info
                        };
                    }

                } else {
                    var objectAnnotation = context.getTypeInfo(parent.object);
                    if (parent.type === Syntax.MemberExpression && objectAnnotation.isArray()) {
                        var resultType = context.getTypeInfo(parent);
                        var replacementNode = null;
                        estraverse.traverse(parent, {
                            leave: function (node) {
                                if (node.type === Syntax.MemberExpression) {
                                    if (objectAnnotation.isArray()) {
                                        estraverse.traverse(node, {
                                            leave: function (node) {
                                                var objectAnnotation = context.getTypeInfo(node.object);
                                                if (node.type === Syntax.MemberExpression && node.computed === true) {
                                                    if (objectAnnotation.info.accessors && objectAnnotation.info.accessors.get) {
                                                        var name = context.getScope().getIdentifier(objectAnnotation.info.accessors.get).replace(/\./g, '_');
                                                        replacementNode = {
                                                            type: Syntax.CallExpression,
                                                            callee: {
                                                                type: Syntax.Identifier,
                                                                name: name
                                                            },
                                                            getter: true,
                                                            arguments: [node.object, node.property],
                                                            extra: resultType.info
                                                        };
                                                    }
                                                    if (replacementNode)
                                                        replacementNode.arguments.push(node.property);
                                                }
                                            }
                                        });
                                    }
                                }
                                this.skip();
                            }
                        });
                    }
                }
                if (replacementNode) {
                    this.skip();
                    return replacementNode;
                }
            }
        }
    });
};
},{"../type-system/typeinfo":203,"../utils/annotate":204,"estraverse":61}],108:[function(require,module,exports){
"use strict";

var traverse = require("estraverse");
var esprima = require("esprima");
var Syntax = traverse.Syntax;

var PluginRegistry = require("../../plugin_registry");

exports = module.exports = function (program) {
    var moduleAstMap = resolveRequireCalls(program);
    injectModules(program, moduleAstMap);
    replaceAssignments(program);
    return program;
};

function resolveRequireCalls(ast, moduleMap) {
    var moduleAstMap = new Map();
    traverse.traverse(ast, {
        enter: function (node) {
            if (node.type === Syntax.CallExpression
                && node.callee.name === "require") {
                // todo: check this !
                var name = node.arguments[0].value;
                if (moduleAstMap.has(name))
                    return;
                var code = PluginRegistry.getModule(name);
                var moduleAst = parseModule(name, code);
                moduleAstMap.set(name, moduleAst);
                resolveRequireCalls(moduleAst, moduleAstMap, moduleMap);
            }
        }
    });
    return moduleAstMap;
}

function injectModules(program, moduleAstMap) {
    var variableDeclarations = {
        type: Syntax.VariableDeclaration,
        declarations: [],
        kind: "var"
    };
    moduleAstMap.forEach(function (ast, name) {
        variableDeclarations.declarations.push({
            type: Syntax.VariableDeclarator,
            id: {
                type: Syntax.Identifier,
                name: name + "_" + "exports"
            },
            init: {
                type: Syntax.ObjectExpression,
                properties: []
            }
        });
        ast.body.forEach(function (ast) {
            program.body.push(ast);
        });
    });
    if (variableDeclarations.declarations.length > 0)
        program.body.unshift(variableDeclarations);
}

function replaceAssignments(program) {
    traverse.replace(program, {
        enter: function(node) {
            if (node.type === Syntax.ExpressionStatement) {
                if (node.expression.type === Syntax.AssignmentExpression) {
                    node = node.expression;
                    if (node.right.type === Syntax.CallExpression
                        && node.right.callee.name === "require") {
                        var name = node.right.arguments[0].value;

                        return {
                           type: Syntax.ExpressionStatement,
                            expression: {
                                type: Syntax.AssignmentExpression,
                                operator: "=",
                                left: {
                                    type: Syntax.Identifier,
                                    name: node.left.name
                                },
                                right: {
                                    type: Syntax.Identifier,
                                    name: name + "_" + "exports"
                                }
                            }
                        };
                    }
                }
            }
        }
    });
}

function parseModule(name, source) {
    var fnMap = new Map();
    var ast = esprima.parse(source);
    traverse.traverse(ast, {
        enter: function(node) {
            if (node.type === Syntax.FunctionDeclaration) {
                var newName = name + "_" + node.id.name;
                fnMap.set(node.id.name, newName);
                node.id.name = newName;
            }
            if (node.type === Syntax.Identifier && node.name === "exports") {
                node.name = name + "_" + "exports";
            }
        }
    });

    traverse.traverse(ast, {
        enter: function(node) {
            if (node.type === Syntax.CallExpression && fnMap.has(node.callee.name)) {
                node.callee.name = fnMap.get(node.callee.name);
            }
        }
    });
    return ast;
}

},{"../../plugin_registry":189,"esprima":60,"estraverse":61}],109:[function(require,module,exports){
"use strict";

var walk = require("estraverse");
var Syntax = walk.Syntax;

function DeclarationSimplifier() {
    this.declarationStack = [];
}

DeclarationSimplifier.prototype.execute = function(root) {
    var self = this;
    walk.replace(
        root,
        {
            enter: function (node) {
                switch (node.type) {
                    case Syntax.FunctionExpression:
                    case Syntax.FunctionDeclaration:
                    case Syntax.Program:
                        self.declarationStack.push([]);
                        break;
                    case Syntax.VariableDeclarator:
                        self.addDeclaredIdentifier(node.id.name);
                        break;
                }
            },
            leave: function (node, parent) {
                switch (node.type) {
                    case Syntax.FunctionExpression:
                    case Syntax.FunctionDeclaration:
                    case Syntax.Program:
                        return self.addTopDeclaration(node, parent);
                        break;
                    case Syntax.VariableDeclaration:
                        return self.removeMidCodeDeclaration(node, parent);
                        break;
                }
            }
        });
    return root;
};

DeclarationSimplifier.prototype.addDeclaredIdentifier = function(name) {
    var topStack = this.declarationStack[this.declarationStack.length - 1];
    if (topStack.indexOf(name) === -1)
        topStack.push(name);
};

DeclarationSimplifier.prototype.addTopDeclaration = function(node) {
    var declarations = this.declarationStack.pop();

    if (declarations.length === 0)
        return node;

    var declarationStatement
        = {type: Syntax.VariableDeclaration, declarations: [], kind: "var"};

    declarations.forEach(function (declaration) {
        declarationStatement.declarations.push({
            type: Syntax.VariableDeclarator,
            id: {type: Syntax.Identifier, name: declaration},
            init: null
        })
    });

    if (node.type == Syntax.Program)
        node.body.unshift(declarationStatement);
    else if (node.body.body)
        node.body.body.unshift(declarationStatement);
    return node;
};

DeclarationSimplifier.prototype.removeMidCodeDeclaration = function(node,
                                                                    parent) {
    var newNode;
    var isForInit = (parent.type === Syntax.ForStatement && parent.init === node);
    if (isForInit)
        newNode
            = {type: Syntax.SequenceExpression, expressions: [], loc: node.loc};
    else
        newNode = {type: Syntax.BlockStatement, body: [], loc: node.loc};

    node.declarations.forEach(function (declaration) {
        if (!declaration.init)
            return;

        var expression = {
            type: Syntax.AssignmentExpression,
            operator: "=",
            left: declaration.id,
            right: declaration.init,
            loc: declaration.loc
        };

        if (isForInit) {
            newNode.expressions.push(expression);
        }
        else {
            var statement = {
                type: Syntax.ExpressionStatement,
                expression: expression,
                loc: declaration.loc
            };
            newNode.body.push(statement);
        }
    });

    if (isForInit && newNode.expressions.length == 1)
        return newNode.expressions[0];

    return newNode;
};

exports = module.exports = DeclarationSimplifier;

},{"estraverse":61}],110:[function(require,module,exports){
"use strict";

var walk = require("estraverse");
var Syntax = walk.Syntax;

function RedundantBlocksRemover() {}

RedundantBlocksRemover.prototype.execute = function(root) {
    var self = this;
    walk.replace(
        root,
        {
            leave: function (node, parent) {
                switch (node.type) {
                    case Syntax.FunctionExpression:
                    case Syntax.FunctionDeclaration:
                    case Syntax.Program:
                    case Syntax.BlockStatement:
                        return self.removeRedundantBlocks(node);
                        break;
                }
            }
        });
    return root;
};

RedundantBlocksRemover.prototype.removeRedundantBlocks = function (node) {
    if (Array.isArray(node.body))
        node.body = node.body.map(function (node) {
            if(node.type == Syntax.BlockStatement)
                return node.body;
            return node;
        }).reduce(function (result, b) {
            if (Array.isArray(b))
                result.push.apply(result, b);
            else
                result.push(b);
            return result;
        }, []);

    return node;
};

exports = module.exports = RedundantBlocksRemover;

},{"estraverse":61}],111:[function(require,module,exports){
"use strict";

var assert = require("assert");

var DeclarationSimplifier = require("./declaration_simplifier");
var StatementSimplefier = require("./statement_simplifier");
var RedundantBlocksRemover  = require("./redundant_blocks_remover");

exports.sanitize = function(ast, opt) {
	var declarationSimplifier = new DeclarationSimplifier();
	var statementSimplifier = new StatementSimplefier();
	var redundantBlocksRemover = new RedundantBlocksRemover();
	ast = declarationSimplifier.execute(ast);
	ast = statementSimplifier.execute(ast);
	ast = redundantBlocksRemover.execute(ast);
	return ast;
};

},{"./declaration_simplifier":109,"./redundant_blocks_remover":110,"./statement_simplifier":112,"assert":25}],112:[function(require,module,exports){
"use strict";

var util = require("util");

var walk = require("estraverse");
var Syntax = walk.Syntax;
var VisitorOption = walk.VisitorOption;

var StatementSplitTraverser = require("./statement_split_traverser");

function StatementSimplifier() {
    StatementSplitTraverser.call(this);
	this.skipExtraction.forInitUpdate = true;
	this.statementIdentifierInfo = {};
}

util.inherits(StatementSimplifier, StatementSplitTraverser);

StatementSimplifier.prototype.onGatherSplitInfo = function() {
	this.statementIdentifierInfo = {};
};

StatementSimplifier.prototype.statementSplitEnter = function(node, parent) {
	switch (node.type) {
	case Syntax.FunctionExpression:
		return VisitorOption.Skip;
	case Syntax.Identifier:
		return this.identifierEnter(node, parent);
	case Syntax.AssignmentExpression:
	case Syntax.UpdateExpression:
		return this.assignmentEnter(node, parent);
	}
};

StatementSimplifier.prototype.statementSplitExit = function(node, parent) {
	switch (node.type) {
	case Syntax.AssignmentExpression:
	case Syntax.UpdateExpression:
		return this.assignmentExit(node, parent);
		break;
	}
};

StatementSimplifier.prototype.identifierEnter = function(node, parent) {
	if (parent.type == Syntax.MemberExpression)
		return;
	if (parent.type == Syntax.AssignmentExpression && parent.left == node)
		return;
	var name = node.name;
	if (!this.statementIdentifierInfo[name])
		this.statementIdentifierInfo[name] = {reads: [], lastWrite: null};
	this.statementIdentifierInfo[name].reads.push(node);
};

StatementSimplifier.prototype.assignmentEnter = function(node, parent) {
	if (parent.type == Syntax.ExpressionStatement)
		return;
	if ((node.left || node.argument).type != Syntax.Identifier)
		throw Shade.throwError(
			node,
			"We only support nested assignments for simple identifiers, not objects or arrays.");

	if (node.type == Syntax.UpdateExpression) {
		var usePrevValue = !node.prefix;
		node = {type: Syntax.AssignmentExpression,
				operator: "=",
				left: {
					type: Syntax.Identifier,
					name: node.argument.name,
					loc: node.argument.loc
				},
				right: {type: Syntax.BinaryExpression,
						operator: node.operator == "++" ? "+" : "-",
						left: {
							type: Syntax.Identifier,
							name: node.argument.name,
							loc: node.argument.loc
						},
						right: {type: Syntax.Literal, value: 1} },
						loc: node.loc,
						_usePrevValue: usePrevValue };

	} else if (node.type == Syntax.AssignmentExpression
			   && node.operator != "=") {
		var binaryOperator = node.operator.substr(0, node.operator.length - 1);
		node.operator = "=";
		node.right = {type: Syntax.BinaryExpression,
					  operator: binaryOperator,
					  left: {
						  type: Syntax.Identifier,
						  name: node.left.name,
						  loc: node.right.loc
					  },
					  right: node.right,
					  loc: node.right.loc };
	}
	var name = node.left.name;
	var entry = this.statementIdentifierInfo[name];
	if (entry && entry.reads.length > 0)
		node._preIdentifierWriter = entry.lastWrite;
	return node;
};

StatementSimplifier.prototype.assignmentExit = function(node, parent) {
	if (parent.type == Syntax.ExpressionStatement)
		return;

	var readOldValue = node._usePrevValue;
	delete node._usePrevValue;

	var oldName = node.left.name;
	if (!this.statementIdentifierInfo[oldName]) {
		this.statementIdentifierInfo[oldName] = {reads: [], lastWrite: null};
	}

	var entry = this.statementIdentifierInfo[oldName];

	var readReplace = {type: Syntax.Identifier, name: oldName, loc: node.loc};
	if (readOldValue || (node._preIdentifierWriter !== undefined
						 && node._preIdentifierWriter == entry.lastWrite)) {
		var newName = this.getFreeName();
		if (!entry.lastWrite) {
			var copyAssignment
				= {type: Syntax.AssignmentExpression,
				   left: {type: Syntax.Identifier, name: newName},
				   right: {type: Syntax.Identifier, name: oldName},
				   operator: "=" };
			this.assignmentsToBePrepended.unshift(copyAssignment);
		} else {
			entry.lastWrite.left.name = newName;
		}
		for (var i = 0; i < entry.reads.length; ++i) {
			entry.reads[i].name = newName;
		}
	}
	entry.reads = [];
	delete node._preIdentifierWriter;
	entry.lastWrite = node;

	if (readOldValue)
		readReplace.name = newName;
	else
		this.statementIdentifierInfo[oldName].reads.push(readReplace);

	this.assignmentsToBePrepended.push(node);
	return readReplace;
};

exports = module.exports = StatementSimplifier;

},{"./statement_split_traverser":113,"estraverse":61,"util":42}],113:[function(require,module,exports){
"use strict";

var assert = require("assert");
var deepExtend = require("deep-extend");

var walk = require("estraverse");
var Shade = require("../../interfaces");
var Types = Shade.TYPES;
var annotate = require("../../utils/annotate");

var Syntax = walk.Syntax;

var StatementSplitTraverser = function() {
	this.scopes = [];
	this.preContinueStatements = [];
	this.currentStatementTmpUsed = [];
	this.assignmentsToBePrepended = [];

	this.skipExtraction = {forInitUpdate: false}
};

StatementSplitTraverser.prototype.execute = function(root) {
	walk.replace(
		root,
		{enter: this.enterNode.bind(this), leave: this.exitNode.bind(this)});
	return root;
};

StatementSplitTraverser.prototype.gatherStatmentSplitInfo = function(node) {
	this.currentStatementTmpUsed = [];
	this.assignmentsToBePrepended = [];
	this.onGatherSplitInfo();
	return walk.replace(node, {
		enter: this.statementSplitEnter.bind(this),
		leave: this.statementSplitExit.bind(this)
	});
};

StatementSplitTraverser.prototype.statementSplitEnter = function(nodeParent) {
	// Implemented by subclass
};

StatementSplitTraverser.prototype.statementSplitExit = function(nodeParent) {
	// Implemented by subclass
};

StatementSplitTraverser.prototype.onGatherSplitInfo = function() {
	// Implemented by subclass
};

StatementSplitTraverser.prototype.isRedundant = function(node) {
	var result = true;
	walk.traverse(node, {
		enter: function(node) {
			switch (node.type) {
			case Syntax.AssignmentExpression:
			case Syntax.UpdateExpression:
			case Syntax.FunctionExpression:
			case Syntax.FunctionDeclaration:
			case Syntax.CallExpression:
				result = false;
				this.break();
			}
		}
	});
	return result;
};

StatementSplitTraverser.prototype.pushScope = function() {
	var newScope = {declared: [], tmpDeclared: [], tmpDeclaredTypes: []};
	this.scopes.push(newScope);
	return newScope;
};

StatementSplitTraverser.prototype.popScope = function() {
	return this.scopes.pop();
};

StatementSplitTraverser.prototype.getScope = function() {
	return this.scopes[this.scopes.length - 1];
};

StatementSplitTraverser.prototype.addPreContinueStatements = function(
	statements) {
	var last
		= this.preContinueStatements[this.preContinueStatements.length - 1];
	last.push.apply(last, statements);
};

StatementSplitTraverser.prototype.getPreContinueStatements = function() {
	return this.preContinueStatements[this.preContinueStatements.length - 1];
};

StatementSplitTraverser.prototype.enterNode = function(node, parent) {
	switch (node.type) {
	case Syntax.FunctionExpression:
	case Syntax.FunctionDeclaration:
	case Syntax.Program:
		var newScope = this.pushScope();
		if (node.params) {
			for (var i = 0; i < node.params.length; ++i) {
				newScope.declared.push(node.params[i].name);
			}
		}
		break;
	case Syntax.VariableDeclarator:
		this.addDeclaredIdentifier(node.id.name);
		break;
	case Syntax.ContinueStatement:
		return this.extendContinueStatement(node);
	case Syntax.ExpressionStatement:
		return this.performStatementSplit(node, [{pre: true}]);
	case Syntax.IfStatement:
		return this.performStatementSplit(node, [{prop: "test", pre: true}]);
	case Syntax.ReturnStatement:
		if (node.argument)
			return this.performStatementSplit(node,
											  [{prop: "argument", pre: true}]);
		break;
	case Syntax.WhileStatement:
		return this.performStatementSplit(
			node, [{prop: "test", pre: true, post: true}], "body");
	case Syntax.ForStatement:
		var extractions = [];

		if (!this.skipExtraction.forInitUpdate)
			extractions.push({prop: "init", pre: true, extract: true});

		extractions.push({prop: "test", pre: true, post: true});

		if (!this.skipExtraction.forInitUpdate)
			extractions.push({prop: "update", post: true, extract: true});

		return this.performStatementSplit(node, extractions, "body");
	case Syntax.DoWhileStatement:
		return this.performStatementSplit(node, [{prop: "test", post: true}],
										  "body");
	}
};

StatementSplitTraverser.prototype.exitNode = function(node, parent) {
	switch (node.type) {
	case Syntax.FunctionExpression:
	case Syntax.FunctionDeclaration:
		return this.addTmpDeclaration(node);
	case Syntax.Program:
		this.removeRedundantBlocks(node, "body");
		return this.addTmpDeclaration(node);
	case Syntax.BlockStatement:
		return this.removeRedundantBlocks(node, "body");
	case Syntax.SwitchCase:
		return this.removeRedundantBlocks(node, "consequent");
	case Syntax.ContinueStatement:
		delete node._extended;
		break;
	case Syntax.WhileStatement:
	case Syntax.ForStatement:
	case Syntax.DoWhileStatement:
		if (node._preContinueStacked) {
			delete node._preContinueStacked;
			this.preContinueStatements.pop();
		}
		break;
	}
};

StatementSplitTraverser.prototype.addDeclaredIdentifier = function(name) {
	var declared = this.getScope().declared;
	if (declared.indexOf(name) == -1)
		declared.push(name);
};

StatementSplitTraverser.prototype.isNameDeclared = function(name, untyped) {
	var i = this.scopes.length;
	while (i--) {
		if (this.scopes[i].declared.indexOf(name) != -1)
			return true;
	}
	return untyped && this.getScope().tmpDeclared.indexOf(name) != -1;
};

StatementSplitTraverser.prototype.getFreeName = function(type, kind) {
	var resultIdx = 0;
	var untyped = (type === undefined);
	var result, prefix = this._getTypedPrefix(type, kind);
	do {
		result = prefix + resultIdx++;
	} while (this.isNameDeclared(result, untyped)
			 || this.currentStatementTmpUsed.indexOf(result) != -1);
	this.currentStatementTmpUsed.push(result);
	var scope = this.getScope();
	if (scope.tmpDeclared.indexOf(result) == -1) {
		scope.tmpDeclared.push(result);
		scope.tmpDeclaredTypes.push({type: type, kind: kind});
	}
	return result;
};

StatementSplitTraverser.prototype.getStatementTmpUsedCount = function() {
	return this.currentStatementTmpUsed.length;
};

StatementSplitTraverser.prototype.reduceStatementTmpUsed = function(newCount) {
	this.currentStatementTmpUsed.length = newCount;
};

StatementSplitTraverser.prototype.removeStatementTmpUsedAfter = function(name) {
	var idx = this.currentStatementTmpUsed.indexOf(name);
	if (idx == -1)
		return;
	idx++;
	var removeCount = this.currentStatementTmpUsed.length - idx;
	this.currentStatementTmpUsed.splice(idx, removeCount);
};

StatementSplitTraverser.prototype._getTypedPrefix = function(type, kind) {
	if (type === undefined)
		return "_tmp";
	switch (type) {
	case Types.BOOLEAN:
		return "_boolTmp";
	case Types.NUMBER:
		return "_numTmp";
	case Types.INT:
		return "_intTmp";
	case Types.STRING:
		return "_stringTmp";
	case Types.OBJECT:
		switch (kind) {
		case "Vec2":
			return "_vec2Tmp";
		case "Vec3":
			return "_vec3Tmp";
		case "Vec4":
			return "_vec4Tmp";
		case "Mat3":
			return "_mat3Tmp";
		case "Mat4":
			return "_mat4Tmp";
		}
	}
};

StatementSplitTraverser.prototype.performStatementSplit = function(
	node, subProperties, bodyProperty) {
	if (bodyProperty && !node._preContinueStacked) {
		this.preContinueStatements.push([]);
		node._preContinueStacked = true;
	}

	var originalNode = node, returnNode = node;
	var i = subProperties.length;
	while (i--) {
		var property = subProperties[i].prop;
		var target = originalNode;
		if (property)
			target = originalNode[property];
		if (property && subProperties[i].extract) {
			this.onGatherSplitInfo();
			this.currentStatementTmpUsed = [];
			this.assignmentsToBePrepended = target ? [target] : [];
			originalNode[property] = null;
		} else {
			target = this.gatherStatmentSplitInfo(target);
			if (property)
				originalNode[property] = target;
			else
				returnNode = target;
		}
		if (this.assignmentsToBePrepended.length > 0) {
			if (subProperties[i].pre) {
				returnNode = this.getSplittedStatementBlock(
					this.assignmentsToBePrepended, returnNode);
			}
			if (subProperties[i].post) {
				var body = originalNode[bodyProperty];
				var statements = this.getSplittedStatementBlock(
					this.assignmentsToBePrepended);
				if (body && body.type == Syntax.BlockStatement) {
					body.body.push(statements);
				} else {
					if (body)
						statements.body.unshift(body);
					originalNode[bodyProperty] = statements;
				}
				this.addPreContinueStatements(this.assignmentsToBePrepended);
			}
		}
	}
	return returnNode;
};

StatementSplitTraverser.prototype.extendContinueStatement = function(node) {
	if (node._extended)
		return;
	node._extended = true;
	var statements = this.getPreContinueStatements();
	if (statements.length == 0)
		return node;
	return this.getSplittedStatementBlock(statements, node);
};

StatementSplitTraverser.prototype.getSplittedStatementBlock
	= function(statements, node) {
		  var result
			  = {type: Syntax.BlockStatement, body: [], loc: node && node.loc};
		  for (var i = 0; i < statements.length; ++i) {
			  var assignment = deepExtend({}, statements[i]);
			  result.body.push({
				  type: Syntax.ExpressionStatement,
				  expression: assignment,
				  loc: assignment.loc
			  });
		  }
		  if (node && (node.type != Syntax.ExpressionStatement
					   || !this.isRedundant(node))) {
			  result.body.push(node);
		  }
		  return result;
	  };

StatementSplitTraverser.prototype.removeRedundantBlocks
	= function(node, propertyName) {
		  var list = node[propertyName];
		  var i = list.length;
		  while (i--) {
			  if (list[i].type == Syntax.BlockStatement) {
				  var args = [i, 1];
				  args.push.apply(args, list[i].body);
				  list.splice.apply(list, args);
			  }
		  }
		  return node;
	  };

StatementSplitTraverser.prototype.addTmpDeclaration = function(node) {
	var tmpDeclared = this.getScope().tmpDeclared,
		tmpDeclaredTypes = this.getScope().tmpDeclaredTypes;
	if (tmpDeclared.length == 0)
		return;
	var list;
	if (node.type == Syntax.Program)
		list = node.body;
	else
		list = node.body.body;
	var declaration = null;
	if (list[0].type == Syntax.VariableDeclaration)
		declaration = list[0];
	else {
		declaration
			= {type: Syntax.VariableDeclaration, declarations: [], kind: "var"};
		list.unshift(declaration);
	}
	for (var i = 0; i < tmpDeclared.length; ++i) {
		var declarator = {
			type: Syntax.VariableDeclarator,
			id: {type: Syntax.Identifier, name: tmpDeclared[i]},
			init: null
		};
		if (tmpDeclaredTypes[i].type !== undefined) {
			annotate(declarator)
				.setType(tmpDeclaredTypes[i].type, tmpDeclaredTypes[i].kind);
		}
		declaration.declarations.push(declarator);
	}

	this.popScope();
};

exports = module.exports = StatementSplitTraverser;

},{"../../interfaces":188,"../../utils/annotate":204,"assert":25,"deep-extend":53,"estraverse":61}],114:[function(require,module,exports){
"use strict";

var worklist = require("analyses");
var Set = worklist.Set;

var astTools = require("../utils/ast");
var dominance = require("../utils/dominance");

exports.slice = function (cfg, startNode, variableName) {
    var postDominators = dominance.computePostDominators(cfg);
    var initialSet = new Set([variableName]);

    var oldS = new Set();
    var R = directRelevantVariables(cfg, startNode, initialSet, postDominators);
    var S = getRelevantStatements(cfg);
    var B = getRelevantBranchStatements(cfg, S);

    while (!Set.equals(S, oldS)) {
        oldS = S;

        var newR = B.values().reduce(function(input, node) {
            var sR = directRelevantVariables(cfg, node, astTools.findVariableReferences(node.astNode));
            return mergeMap(input, sR);
        }, R);

        S = Set.union(B, getRelevantStatements(cfg));
        B = getRelevantBranchStatements(cfg, S);
        R = newR;
    }
    return S;
};

function directRelevantVariables(cfg, startNode, variables, postDominators) {
    var oldStart = cfg[1];
    var oldNext = startNode.next;

    cfg[1] = startNode;
    cfg[1].next = [];

    var R = worklist(cfg, function (input) {
        if (this.type || !this.astNode)
            return input;

        this.ref = this.ref || astTools.findVariableReferences(this.astNode);
        this.def = this.def || astTools.findVariableDefinitions(this.astNode);
        this.infl = this.infl || computeInfluence(this, postDominators.get(this));

        var result = null;
        if (Set.intersect(this.def, input).size) {
            this.directRelevant = true;
            result = Set.union(result, this.ref);
        }

        var self = this;
        var generated = new Set(input.values().filter(function (v) {
            return !self.def.has(v);
        }));
        return Set.union(result, generated);

    }, {direction: "backward", start: variables});

    cfg[1].next = oldNext;
    cfg[1] = oldStart;
    return R;
}

function getRelevantStatements(cfg) {
    return new Set(cfg[2].filter(function (node) {
        return node.directRelevant === true;
    }));
}
function getRelevantBranchStatements(cfg, S) {
    return new Set(cfg[2].filter(function (node) {
        return node.infl ? Set.intersect(node.infl, S).size : false;
    }));
}

function mergeMap(A, B) {
    var keys = B.keys();
    for(var i in keys) {
        var key = keys[i];
        if(A.has(key)) {
            var setA = A.get(key);
            var setB = B.get(key);
            A.set(key, Set.union(setA, setB));
        }
    }
    return A;
}

function computeInfluence(node, inverseDominators) {
    var result = new Set();
    if (node.next.length < 2)
        return result;

    findSetOfNodesOnPath(node.next, inverseDominators, result);

    return result;
}

function findSetOfNodesOnPath(fromArr, endSet, result) {
    for(var i = 0; i < fromArr.length; i++) {
        var node = fromArr[i];
        if(!(result.has(node) || endSet.has(node))) {
            result.add(node);
            findSetOfNodesOnPath(node.next, endSet, result);
        }
    }
}


},{"../utils/ast":137,"../utils/dominance":138,"analyses":46}],115:[function(require,module,exports){
// dependencies
var walker = require('walkes');
var worklist = require('analyses');
var common = require("../base/common.js");
var esgraph = require('esgraph');
var codegen = require('escodegen');
var astTools = require("./utils/ast");
var Shade = require("./../interfaces.js"),
    SpaceType = Shade.SpaceType,
    VectorType = Shade.VectorType,
    SpaceVectorType = Shade.SpaceVectorType;


// shortcuts
var Syntax = common.Syntax;
var Set = worklist.Set,
    Types = Shade.TYPES;

var ANNO = common.ANNO;
// defines


var c_resultPointOk = true, c_resultNormalOk = true,
    c_customFunctionPropagations = null, c_debug = false;

function analyze(functionAast, customFunctionPropagations) {
    var cfg = esgraph(functionAast.body, {omitExceptions: true});
    c_resultPointOk = true;
    c_resultNormalOk = true;
    c_customFunctionPropagations = customFunctionPropagations || {};
    var output = worklist(cfg, transferSpaceInfo, {
        direction: 'backward',
        start: null,
        merge: worklist.merge(mergeSpaceInfo)
    });
    var startNodeResult = output.get(cfg[0]);
    var result = {};
    var tranferEntry = {
        transferPointOk: c_resultPointOk,
        transferNormalOk: c_resultNormalOk,
        transferArgs: []
    };
    var transferSpaces = {};
    startNodeResult.forEach(function (elem) {
        var split = elem.split(";"), name = split[0], space = split[1] * 1;
        if (Shade.getSpaceFromSpaceVector(space) == SpaceType.RESULT) {
            transferSpaces[name] = true;
            return;
        }
        if (!result[name]) result[name] = [];
        result[name].push(space);
    });
    for (var i = 0; i < functionAast.params.length; ++i) {
        var name = functionAast.params[i].name;
        tranferEntry.transferArgs.push(transferSpaces[name]);
    }
    c_customFunctionPropagations[functionAast.id.name] = tranferEntry;
    return result;
}


function setSpaceInfo(ast, key, value) {
    if (!ast.spaceInfo)
        ast.spaceInfo = {};
    ast.spaceInfo[key] = value;
}
function setSpaceInfoSpaces(ast, key, spaces) {
    var values = spaces && spaces.filter(function (space) {
            return Shade.getSpaceFromSpaceVector(space) != SpaceType.RESULT
        });
    setSpaceInfo(ast, key, values);
}

/**
 * @param {Set} input
 * @this {FlowNode}
 * @returns {Set} output with respect to input
 */
function transferSpaceInfo(input) {
    if (this.type || !this.astNode) // Start and end node do not influence the result
        return input;

    // Local
    var kill = this.kill = this.kill || astTools.findVariableDefinitions(this.astNode, true);
    var generatedDependencies = this.generate = this.generate || generateSpaceDependencies(this.astNode, kill);
    //generate && console.log(this.label, generate);

    // Depends on input
    var depSpaceInfo = new Set(), finalSpaces = null, spaceTypes = null;
    setSpaceInfo(this.astNode, "transferSpaces", null);
    setSpaceInfo(this.astNode, "hasSpaceOverrides", generatedDependencies.dependencies.spaceOverrides.length > 0);
    if (generatedDependencies.def) {
        var def = generatedDependencies.def;
        setSpaceInfo(this.astNode, "def", def);
        spaceTypes = getSpaceVectorTypesFromInfo(input, def);
    }
    else {
        spaceTypes = new Set([SpaceVectorType.OBJECT])
        if (this.astNode.type == Syntax.ReturnStatement) {
            spaceTypes.add(SpaceVectorType.RESULT_NORMAL);
            spaceTypes.add(SpaceVectorType.RESULT_POINT);
        }
    }
    setSpaceInfoSpaces(this.astNode, "transferSpaces", spaceTypes);
    finalSpaces = createSpaceInfoFromDependencies(depSpaceInfo, generatedDependencies.dependencies, spaceTypes);
    setSpaceInfoSpaces(this.astNode, "finalSpaces", (finalSpaces && finalSpaces.size > 0) ? finalSpaces : null);

    input = new Set(input.filter(function (elem) {
        return !kill.has(elem.split(";")[0]);
    }));
    return mergeSpaceInfo(input, depSpaceInfo);
}

function getSpaceVectorTypesFromInfo(spaceInfo, identifier) {
    var set = new Set(spaceInfo.filter(function (elem) {
        return elem.split(";")[0] == identifier
    }).map(function (elem) {
        return elem.split(";")[1] * 1
    }));
    if (set.size == 0)
        set.add(SpaceVectorType.OBJECT);
    return set;
}
function isSpaceTypeValid(spaceType, dependencies) {
    var type = Shade.getVectorFromSpaceVector(spaceType);
    return type == VectorType.NONE || (type == VectorType.NORMAL && !dependencies.normalSpaceViolation)
        || (type == VectorType.POINT && !dependencies.pointSpaceViolation);
}

function createSpaceInfoFromDependencies(depSpaceInfo, dependencies, spaces) {
    var finalSpaces = new Set();
    dependencies.toObjectSet.forEach(function (name) {
        depSpaceInfo.add(name + ";" + SpaceVectorType.OBJECT);
    })
    spaces.forEach(function (spaceVector) {
        var space = Shade.getSpaceFromSpaceVector(spaceVector);
        var isValid = isSpaceTypeValid(spaceVector, dependencies);

        if (space != SpaceType.OBJECT && dependencies.hasDirectVec3SpaceOverride()) {
            if (space == SpaceType.RESULT)
                isValid = false;
            else
                throw new Error("Detection of repeated space conversion. Not supported!");
        }

        finalSpaces.add(spaceVector);

        if (!isValid && space == SpaceType.RESULT) {
            if (Shade.getVectorFromSpaceVector(spaceVector) == VectorType.NORMAL)
                c_resultNormalOk = false;
            else
                c_resultPointOk = false;
        }
        spaceVector = isValid ? spaceVector : SpaceVectorType.OBJECT;

        dependencies.propagateSet.forEach(function (name) {
            depSpaceInfo.add(name + ";" + spaceVector);
        });
    });
    var overrides = dependencies.spaceOverrides;
    for (var i = 0; i < overrides.length; ++i) {
        createSpaceInfoFromDependencies(depSpaceInfo, overrides[i].dependencies, new Set([overrides[i].space]));
    }
    return finalSpaces;
}


/**
 * Special merge function that merges entries with same names
 * to a new entry with top element Semantic.UNKNOWN
 * @param {Set} a
 * @param {Set} b
 * @returns {Set}
 */
function mergeSpaceInfo(a, b) {
    var s = a ? new Set(a) : new Set();
    if (b)
        b.forEach(
            function (elem) {
                s.add(elem);
            }
        );
    return s;
}

function SpaceDependencies() {
    this.normalSpaceViolation = false;
    this.pointSpaceViolation = false;
    this.propagateSet = new Set();
    this.toObjectSet = new Set();
    this.spaceOverrides = [];
}

SpaceDependencies.prototype.addSpaceOverride = function (space, fromObjectSpace, dependencies) {
    this.spaceOverrides.push({space: space, fromObjectSpace: fromObjectSpace, dependencies: dependencies})
}
SpaceDependencies.prototype.hasDirectVec3SpaceOverride = function () {
    var i = this.spaceOverrides.length;
    while (i--) {
        if (!this.spaceOverrides[i].fromObjectSpace)
            return true;
    }
    return false;
}


function generateSpaceDependencies(ast, defs) {
    var result = {def: null, dependencies: new SpaceDependencies()};
    if (!ast && !ast.type)
        return result;
    var defCount = defs.size;
    if (defCount > 1)
        throw new Error("Code not sanitized, found multiple definitions in one statement");
    if (defCount == 1)
        result.def = defs.values()[0];
    // TODO: Properly determine FLOAT3 statements
    var isFloat3Statement = ANNO(ast).getKind() == "Vec3";

    if (isFloat3Statement) {
        gatherSpaceDependencies(ast, result.dependencies);
        setSpaceInfo(ast, "propagateSet", result.dependencies.propagateSet.values());
        setSpaceInfo(ast, "normalSpaceViolation", result.dependencies.normalSpaceViolation);
        setSpaceInfo(ast, "pointSpaceViolation", result.dependencies.pointSpaceViolation);
    }
    else
        gatherObjectDependencies(ast, result.dependencies);

    return result;
}

function getSpaceConversion(callAst) {
    var callee = callAst.callee;
    if (callee.type == Syntax.MemberExpression && callee.object.type == Syntax.Identifier
        && callee.object.name == "Space") {
        var spaceType = 0;
        switch (callee.property.name) {
            case "transformPoint":
                spaceType = VectorType.POINT;
                break;
            case "transformDirection":
                spaceType = VectorType.NORMAL;
                break;
        }
        spaceType = spaceType << 3;
        if (spaceType) {
            var firstArg = callAst.arguments[0];

            if (firstArg.type != Syntax.MemberExpression || firstArg.object.type != Syntax.Identifier
                || firstArg.object.name != "Space" || firstArg.property.type != Syntax.Identifier)
                throw new Error("The first argument of '" + callee.property + "' must be a Space enum value.");
            switch (firstArg.property.name) {
                case "VIEW" :
                    spaceType += SpaceType.VIEW;
                    break;
                case "WORLD":
                    spaceType += SpaceType.WORLD;
                    break;
            }
            return spaceType;
        }
    }
    return null;
}

function handleSpaceOverride(callAst, result, fromObjectSpace) {
    var space = getSpaceConversion(callAst);
    if (space) {
        var subResult = new SpaceDependencies();
        gatherSpaceDependencies(callAst.arguments[1], subResult);
        result.addSpaceOverride(space, fromObjectSpace, subResult);
        setSpaceInfo(callAst, "spaceOverride", space);
        setSpaceInfo(callAst, "propagateSet", subResult.propagateSet.values());
        setSpaceInfo(callAst, "normalSpaceViolation", subResult.normalSpaceViolation);
        setSpaceInfo(callAst, "pointSpaceViolation", subResult.pointSpaceViolation);
        return true;
    }
    return false;
}

function gatherObjectDependencies(ast, result) {
    walker(ast, {
        VariableDeclaration: function () {
        },
        Identifier: function () {
            if (this.extra.kind == "Vec3") {
                result.toObjectSet.add(this.name);
            }

        },
        MemberExpression: function (recurse) {
            if (this.extra.kind == "Vec3") {
                if (this.object.type == Syntax.Identifier && this.property.type == Syntax.Identifier) {
                    if (this.object.extra.global)
                        result.propagateSet.add("env." + this.property.name);
                    else if (this.object.name !== "uexp") { // FIXME
                        throw new Error("Member Access of non 'env' object in space equation - not supported: " + codegen.generate(this));
                    }
                }
            }
            else {
                recurse(this.object);
                recurse(this.property);
            }
        },
        CallExpression: function (recurse) {
            if (handleSpaceOverride(this, result, true))
                return;
            recurse(this.callee);
            this.arguments.map(recurse);
        }
    });
}

function isVector3(node) {
    return ANNO(node).isOfKind("Vec3")
}


function gatherSpaceDependencies(ast, result) {
    walker(ast, {
        VariableDeclaration: function () {
        },
        AssignmentExpression: function (recurse) {
            recurse(this.right);
        },
        Identifier: function () {
            if (isVector3(this)) {
                result.propagateSet.add(this.name);
                setSpaceInfo(this, "propagate", true);
            }
        },
        NewExpression: function (recurse) {
            if (this.callee == "Vec3") {
                handleVec3Args(this.arguments, recurse, result, false);
            }
        },
        MemberExpression: function (recurse) {
            var object = this.object;
            var property = this.property;

            if (isVector3(this)) {
                if (object.type == Syntax.Identifier && property.type == Syntax.Identifier) {
                    if (ANNO(object).isGlobal()) {
                        result.propagateSet.add("env." + property.name);
                    } else if (object.name !== "uexp") { // FIXME
                        throw new Error("Member Access of non 'env' object in space equation - not supported.")
                    }
                    setSpaceInfo(this, "propagate", true);
                }
            }
            else {
                recurse(object);
                recurse(property);
            }
        },
        CallExpression: function (recurse) {
            if (handleSpaceOverride(this, result, false))
                return;
            if (this.callee.type == Syntax.MemberExpression) {
                result.pointSpaceViolation = true;
                var callObject = this.callee.object;
                var objectKind = ANNO(callObject).getKind(),
                    method = this.callee.property.name,
                    args = this.arguments;
                if (PropagationRules[objectKind] && PropagationRules[objectKind][method]) {
                    PropagationRules[objectKind][method](callObject, args, recurse, result);
                    return;
                }
                console.log("Unhandled: ", codegen.generate(this))
            } else if (this.callee.type == Syntax.Identifier) {
                var id = this.callee.name;
                var customEntry = c_customFunctionPropagations && c_customFunctionPropagations[id];
                if (customEntry) {
                    if (!customEntry.transferPointOk) result.pointSpaceViolation = true;
                    if (!customEntry.transferNormalOk) result.normalSpaceViolation = true;
                    var i = customEntry.transferArgs.length;
                    while (i--) {
                        if (customEntry.transferArgs[i])
                            recurse(this.arguments[i]);
                        else
                            gatherObjectDependencies(this.arguments[i], result);
                    }
                    return;
                }
            }
            result.pointSpaceViolation = true;
            result.normalSpaceViolation = true;
            gatherObjectDependencies(this, result);
            //this.arguments.forEach(function(arg){ gatherObjectDependencies(arg, result)});
        }
    });
}

function handleScaleOperator(callObject, args, recurse, result) {
    handleVec3Args(args, recurse, result, true);
    recurse(callObject);
}
function handleAddSubOperation(callObject, args, recurse, result) {
    handleVec3Args(args, recurse, result, false);
    recurse(callObject);
}

function handleVec3Args(args, recurse, result, scaling) {
    if (!scaling && args.length == 0) {
        result.normalSpaceViolation = true;
        return;
    }
    if (args.length > 1) {
        result.normalSpaceViolation = true;
        return;
    }
    if (args.length == 1) {
        if (isVector3(args[0])) {
            recurse(args[0]);
        }
        else if (scaling && typeIsScalar(args[0])) {
            gatherObjectDependencies(args[0], result);
        }
        else {
            result.normalSpaceViolation = true;
        }
    }
}

function typeIsScalar(node) {
    return ANNO(node).isNumber() || ANNO(node).isInt();
}


var PropagationRules = {
    "Vec3": {
        "add": handleAddSubOperation,
        "sub": handleAddSubOperation,
        "cross": handleAddSubOperation,
        "mul": handleScaleOperator,
        "div": handleScaleOperator,
        "normalize": handleScaleOperator
    }
}
module.exports = {
    analyze: analyze
};


},{"../base/common.js":140,"./../interfaces.js":188,"./utils/ast":137,"analyses":46,"escodegen":54,"esgraph":58,"walkes":95}],116:[function(require,module,exports){
// Dependencies
var assert = require("assert");
var common = require("../../base/common.js"),
    Shade = require("../../interfaces.js"),
    evaluator = require("../constants/evaluator.js"),
    estraverse = require('estraverse'),
    ErrorHandler = require("../../type-system/errors.js");

var codegen = require('escodegen');
var TypeInfo = require("../../type-system/typeinfo");
var TYPES = require("../../interfaces.js").TYPES;

// Shortcuts
var Syntax = common.Syntax;
var ANNO = common.ANNO;
var generateErrorInformation = ErrorHandler.generateErrorInformation;
var ERROR_TYPES = ErrorHandler.ERROR_TYPES;

var debug = false;

var handlers = {

    ArrayExpression: function (node, parent, context) {

        var result = ANNO(node), elements = context.getTypeInfo(node.elements);
        result.info.elements = result.info.elements || {};
        var elementType = ANNO(result.info.elements);

        result.setType(TYPES.ARRAY);
        elements.forEach(function (element, index) {
            if (index === 0) {
                elementType.copyFrom(element);
            } else {
                if (!elementType.setCommonType(elementType, element)) {
                    result.setInvalid(generateErrorInformation(node, ERROR_TYPES.SHADEJS_ERROR, "shade.js does not support inhomogeneous arrays: [", elements.map(function (e) {
                        return e.getTypeString()
                    }).join(", "), "]"));
                }
            }
        });
        result.setArraySize(elements.length);
    },

    /**
     * @param node
     */
    Literal: function (node) {
        var value = node.raw !== undefined ? node.raw : node.value,
            result = ANNO(node);

        var number = parseFloat(value);
        if (!isNaN(number)) {
            if (value.toString().indexOf(".") == -1) {
                result.setType(TYPES.INT);
            }
            else {
                result.setType(TYPES.NUMBER);
            }
        } else if (value === 'true' || value === 'false') {
            result.setType(TYPES.BOOLEAN);
        } else if (value === 'null') {
            result.setType(TYPES.NULL);
        } else {
            result.setType(TYPES.STRING);
        }
        if (!result.isNull()) {
            result.setConstantValue(evaluator.getConstantValue(node));
        }
    },

    /**
     * ExpressionStatement: Just copy the result from the actual expression
     */
    ExpressionStatement: function (node) {
        var result = ANNO(node),
            expression = ANNO(node.expression);
        result.copyFrom(expression);
    },


    /**
     * ReturnStatement: If return has an argument, copy the TypeInfo
     * form the argument, otherwise it's undefined. Inform the scope on
     * the return type of this return branch.
     */
    ReturnStatement: function (node, parent, context) {
        var result = ANNO(node),
            argument = context.getTypeInfo(node.argument);

        if (argument) {
            result.copyFrom(argument);
        } else {
            result.setType(TYPES.UNDEFINED);
        }
        context.getScope().returnInfo = result;
    },

    /**
     * NewExpression: Find the type of the Callee from
     * the scope and evaluate based on annotated parameters
     */
    NewExpression: function (node, parent, context) {
        var result = ANNO(node), scope = context.getScope();

        // Be on the safe side, assume result is static independently of former annotations
        result.setDynamicValue();

        var func = scope.type(node.callee);
        if (!func.isFunction()) {  // e.g. var a = undefined; a.unknown;
            result.setInvalid(generateErrorInformation(node, ERROR_TYPES.TYPE_ERROR, node.callee.name, "is not a function"));
            return;
        }

        var constructor = func.ctor;
        assert(typeof constructor == "function");
        var args = context.getTypeInfo(node.arguments);
        try {
            var extra = constructor(result, args, scope);
            result.setFromExtra(extra);
        } catch (e) {
            result.setInvalid(e);
        }

    },


    /**
     * UnaryExpression
     */
    UnaryExpression: function (node, parent, context) {
        var result = ANNO(node),
            argument = context.getTypeInfo(node.argument),
            operator = node.operator;

        //noinspection FallthroughInSwitchStatementJS
        switch (operator) {
            case "!":
                result.setType(TYPES.BOOLEAN);
                if (argument.canObject()) {
                    result.setConstantValue(false); // !obj == false
                    return;
                }
                break;
            case "+":
            case "-":
                if (argument.canInt()) {
                    result.setType(TYPES.INT);
                } else if (argument.canNumber()) {
                    result.setType(TYPES.NUMBER);
                } else {
                    result.setInvalid(generateErrorInformation(node, ERROR_TYPES.NAN_ERROR));
                }
                break;
            case "typeof":
                result.setType(TYPES.STRING);
                if (argument.isValid()) {
                    result.setConstantValue(argument.getJavaScriptTypeString());
                }
                return;

            case "~":
            case "void":
            case "delete":
            default:
                result.setInvalid(generateErrorInformation(node, ERROR_TYPES.SHADEJS_ERROR, operator, "is not supported."));
        }
        if (argument.hasConstantValue()) {
            result.setConstantValue(evaluator.getConstantValue(node));
        } else {
            result.setDynamicValue();
        }
    },

    /**
     * 'Undefined' is an identifier. Variables, names of functions and
     * member properties are handled within parent expressions
     */
    Identifier: function (node, parent, context) {
        if (node.name === "undefined") {
            ANNO(node).setType(TYPES.UNDEFINED);
            return;
        }
        if (!parent) {
            var info = context.getTypeInfo(node);
            ANNO(node).copyFrom(info);
        }
    },

    /**
     * BinaryExpression
     */
    BinaryExpression: function (node, parent, context) {
        //console.log(node.left, node.right);
        var left = context.getTypeInfo(node.left),
            right = context.getTypeInfo(node.right),
            result = ANNO(node),
            operator = node.operator,
            value;

        if (!(left.isValid() && right.isValid())) {
            result.setInvalid();
            return;
        }

        //noinspection FallthroughInSwitchStatementJS
        switch (operator) {
            case "+":
            case "-":
            case "*":
            case "/":
            case "%":
                // int 'op' int => int
                // int / int => number
                if (left.canInt() && right.canInt()) {
                    if (operator == "/")
                        result.setType(TYPES.NUMBER);
                    else
                        result.setType(TYPES.INT);
                }
                // int 'op' number => number
                else if (left.canInt() && right.isNumber() || right.canInt() && left.isNumber()) {
                    result.setType(TYPES.NUMBER);
                }
                // number 'op' number => number
                else if (left.isNumber() && right.isNumber()) {
                    result.setType(TYPES.NUMBER);
                    // int 'op' null => int
                }
                else if (left.isInt() && right.isNull() || right.isInt() && left.isNull()) {
                    result.setType(TYPES.INT);
                }
                // number 'op' null => number
                else if ((left.isNumber() && right.isNull()) || (right.isNumber() && left.isNull())) {
                    result.setType(TYPES.NUMBER);
                }
                else {
                    // NaN

                    var message = "";
                    // Special handling for undefined, as this is the main reason for this error
                    if (left.isNullOrUndefined()) {
                        message = codegen.generate(node.left) + " is undefined";
                    } else if (right.isNullOrUndefined()) {
                        message = codegen.generate(node.right) + " is undefined";
                    }
                    result.setInvalid(generateErrorInformation(node, ERROR_TYPES.NAN_ERROR, message));
                }
                break;
            case "===":
            case "!==":
                result.setType(TYPES.BOOLEAN);
                if (left.isUndefined() || right.isUndefined()) {
                    value = left.isUndefined() && right.isUndefined();
                    result.setConstantValue(operator == "===" ? value : !value);
                    return;
                }
                break;
            case "==": // comparison
            case "!=":
            case ">":
            case "<":
            case ">=":
            case "<=":
                result.setType(TYPES.BOOLEAN);
                if (left.isUndefined() || right.isUndefined()) {
                    value = left.isUndefined() && right.isUndefined();
                    result.setConstantValue(operator == "!=" ? !value : value);
                    return;
                }
                break;
            default:
                result.setInvalid(generateErrorInformation(node, ERROR_TYPES.SHADEJS_ERROR, operator, "is not supported."));
                return;
        }
        if (left.hasConstantValue() && right.hasConstantValue()) {
            //console.log(left.getConstantValue(), operator, right.getConstantValue());
            result.setConstantValue(evaluator.getConstantValue(node));
        } else {
            result.setDynamicValue();
        }
    },

    UpdateExpression: function (node, parent, context) {
        var argument = context.getTypeInfo(node.argument),
            result = ANNO(node);
        if (argument.canNumber()) {
            result.copyFrom(argument);
            if (node.prefix && argument.hasConstantValue()) {
                if (node.operator == "++") {
                    result.setConstantValue(argument.getConstantValue() + 1)
                } else if (node.operator == "--") {
                    result.setConstantValue(argument.getConstantValue() - 1)
                } else {
                    throw new Error("Operator not supported: " + node.operator);
                }
            }
        } else {
            // e.g. var a = {}; a++;
            result.setInvalid(generateErrorInformation(node, ERROR_TYPES.NAN_ERROR));
        }
    },

    AssignmentExpression: function (node, parent, context) {
        var right = context.getTypeInfo(node.right),
            result = ANNO(node);

        result.copyFrom(right);
        result.setDynamicValue();
        result.clearUniformDependencies();

        if (node.left.type === Syntax.MemberExpression) {
            var object = context.getScope().type(node.left.object);
            if (object.isArray()) {
                var elementTypeInfo = ANNO(object.getArrayElementType());
                if (elementTypeInfo.getType() === TYPES.ANY) {
                    elementTypeInfo.copyFrom(result);
                } else {
                    // this sucks, make better handling of cast ops!!
                    if (elementTypeInfo.getType() !== result.getType() &&
                        elementTypeInfo.isNumber() && !result.canNumber())
                        throw new Error("Array has to be homogeneous!");
                }
            } else {
                var name = node.left.property.name;
                object.setProperty(name, result.info);
            }
        }
        // Check, if a assigned variable still has the same type as
        // before and update type of uninitialized variables.
        if (node.left.type == Syntax.Identifier && !context.inDeclaration() && right.isValid()) {
            var name = node.left.name;
            var scope = context.getScope();
            scope.updateTypeInfo(name, right, node);
        }
    },

    // TODO can we merge some of this with call expr somehow? or vice versa?
    MemberExpression: function (node, parent, context) {
        var resultType = context.getTypeInfo(node);
        var objectAnnotation = context.getTypeInfo(node.object),
            propertyAnnotation = ANNO(node.property),
            scope = context.getScope();

        if (!objectAnnotation.isValid()) {
            resultType.setInvalid();
            return;
        }

        //console.log("Member", node.object.name, node.property.name, node.computed);
        if (node.computed) {
            if (objectAnnotation.isArray()) {
                // Property is computed, thus it could be a variable
                var propertyType = context.getTypeInfo(node.property);
                assert(propertyType.canNumber(), "Expected 'int' or 'number' type for array accessor");

                var elementInfo = objectAnnotation.getArrayElementType();

                resultType.setType(elementInfo.extra.type, elementInfo.extra.kind);
                if (elementInfo.extra.type === "array") {
                    resultType.info.staticSize = elementInfo.extra.staticSize;
                    resultType.info.elements = elementInfo.extra.elements;
                }
                return;
            } else if (objectAnnotation.isTexture()) {
                resultType.setType(TYPES.ARRAY);
                resultType.info.elements = {
                    extra: {
                        type: TYPES.OBJECT,
                        kind: "Vec4"
                    }
                };
                return;
            } else {
                resultType.setInvalid(generateErrorInformation(node, ERROR_TYPES.SHADEJS_ERROR, "no array access to object yet"));
                return;
            }
        }
        var propertyName = node.property.name;

        var objectOfInterest = scope.type(node.object);
        if (!objectOfInterest) {
            resultType.setInvalid(generateErrorInformation(node, ERROR_TYPES.REFERENCE_ERROR, node.object.name + " is not defined"));
            return;
        }

        if (!objectOfInterest.isValid() || objectOfInterest.getType() == TYPES.UNDEFINED) {  // e.g. var a = undefined; a.unknown;
            resultType.setInvalid(generateErrorInformation(node, ERROR_TYPES.TYPE_ERROR, "Cannot read property '" + propertyName + "' of undefined"));
            return;
        }
        if (!objectOfInterest.isObject()) { // e.g. var a = 5; a.unknown;
            resultType.setType(TYPES.UNDEFINED);
            return;
        }

        objectAnnotation.copyFrom(objectOfInterest);

        if (!objectOfInterest.hasProperty(propertyName)) {
            resultType.setType(TYPES.UNDEFINED);
            propertyAnnotation.setType(TYPES.UNDEFINED);
            return;
        }

        var propertyTypeInfo = objectOfInterest.getPropertyInfo(propertyName);
        propertyAnnotation.copyFrom(propertyTypeInfo);
        resultType.copyFrom(propertyAnnotation);

        // If we have a type, evaluate static value
        if (!propertyTypeInfo.canComputeStaticValue() || propertyTypeInfo.getType() === TYPES.FUNCTION) {
            debug && console.warn("No static evaluation exists for function", codegen.generate(node));
            return;
        }
        var staticValue = propertyTypeInfo.computeStaticValue(resultType, scope, objectOfInterest);
        if (staticValue !== undefined) {
            resultType.setConstantValue(staticValue);
        }
    },

    ThisExpression: function (node, parent, context) {
        var result = ANNO(node),
            scope = context.getScope(),
            thisType = scope.get("this");
        assert(thisType);
        result.copyFrom(thisType);
    },

    CallExpression: function (node, parent, context, analyzer) {
        var result = ANNO(node),
            scope = context.getScope(),
            args = context.getTypeInfo(node.arguments),
            extra, staticValue;

        if (result.getType() !== "any")
            return;

        if (!args.every(function (arg) {
                return arg.isValid()
            })) {
            result.setInvalid(generateErrorInformation(node, ERROR_TYPES.SHADEJS_ERROR, "Not all arguments types of call expression could be evaluated"));
            return;
        }
        // Be on the safe side, assume result is static independently of former annotations
        result.setDynamicValue();

        // Call on an object, e.g. Math.cos()
        if (node.callee.type == Syntax.MemberExpression) {

            var memberExpression = context.getTypeInfo(node.callee);
            if (!memberExpression.isValid()) {
                result.setInvalid();
                return;
            }

            var object = node.callee.object,
                propertyName = node.callee.property.name;

            var objectReference = scope.type(object);

            // This should already have been handled by parent MemberExpression
            assert(objectReference.isValid(), "No object info for:" + object);

            if (!memberExpression.isFunction()) { // e.g. Math.PI()
                var msg = codegen.generate(node.callee) + " is not a function";
                result.setInvalid(generateErrorInformation(node, ERROR_TYPES.TYPE_ERROR, msg));
                return;
            }

            var propertyHandler = objectReference.getPropertyInfo(propertyName);

            //assert(propertyHandler.canEvaluate(), "Internal: no handler registered for function '" + propertyName + "'");

            try {
                if (propertyHandler.canEvaluate())
                    extra = propertyHandler.evaluate(node, args, scope, objectReference);
                else
                    extra = analyzer.specializeFunction(propertyHandler.getFunctionName(), args);
                extra && result.setFromExtra(extra);
            } catch (e) {
                result.setInvalid(generateErrorInformation(node, e.message));
                return;
            }

            // If the evaluation methods already computed a constant value, we can skip that part
            if (result.hasConstantValue()) {
                return;
            }

            // If we have a type, evaluate static value
            if (!propertyHandler.canComputeStaticValue()) {
                debug && console.warn("No static evaluation exists for function", codegen.generate(node));
                return;
            }
            staticValue = propertyHandler.computeStaticValue(result, args, scope, objectReference);
            if (staticValue !== undefined) {
                result.setConstantValue(staticValue);
            }
            return;


        } else if (node.callee.type == Syntax.Identifier) {
            //var functionName = node.callee.getFunctionName();//node.callee.name;
            var func = scope.get(node.callee.name);
            if (!func) {
                result.setInvalid(generateErrorInformation(node, ERROR_TYPES.REFERENCE_ERROR, node.callee.name, "is not defined"));
                return;
            }
            if (!func.isFunction()) {
                result.setInvalid(generateErrorInformation(node, ERROR_TYPES.TYPE_ERROR, func.getTypeString(), "is not a function"));
                return;
            }
            try {
                extra = analyzer.specializeFunction(func.getFunctionName(), args);
                extra && result.setFromExtra(extra);
            } catch (e) {
                result.setInvalid(generateErrorInformation(node, ERROR_TYPES.SHADEJS_ERROR, "Failure in function call: ", e.message));
            }
            return;
        }
        result.setInvalid(generateErrorInformation(node, ERROR_TYPES.SHADEJS_ERROR, "Internal:", "Unhandled CallExpression", node.callee.type));
    },

    VariableDeclarator: function (node, parent, context) {
        var init = node.init ? context.getTypeInfo(node.init) : null,
            result = ANNO(node);
        if (init) {
            ANNO(node.init).copyFrom(init);
            result.copyFrom(init);
        }
    },

    VariableDeclaration: function (node, parent, context) {
        context.setInDeclaration(false);
    },

    LogicalExpression: function (node, parent, context) {
        var left = context.getTypeInfo(node.left),
            right = context.getTypeInfo(node.right),
            result = ANNO(node);


        // static: true || false, dynamic: undefined
        var leftBool = left.getStaticTruthValue(),
            rightBool = right.getStaticTruthValue(),
            operator = node.operator;

        if (operator === "||") {
            if (leftBool === false) {
                result.copyFrom(right);
                return;
            }
            if (leftBool === true) {
                result.copyFrom(left);
                return;
            }
            // Left is dynamic, let's check right
            if (rightBool === false) {
                // Now the result type is always the one of the left value
                result.copyFrom(left);
                return;
            }
        } else if (operator === "&&") {
            if (leftBool === false) {
                // T(x) == false => x && y == x
                result.copyFrom(left);
                return;
            }
            if (leftBool === true) {
                result.copyFrom(right);
                return;
            }
            // Left is dynamic, let's check right
            if (rightBool === true) {
                // Now the result type is always the one of the left value
                result.copyFrom(left);
                return;
            }
            if (rightBool === false) {
                // Now the result must be false
                result.setType(TYPES.BOOLEAN);
                result.setConstantValue(false);
                return;
            }
        }

        // If we can cast both sides to a common type, it's fine
        if (result.setCommonType(left, right)) {
            return;
        }
        result.setInvalid(generateErrorInformation(node, ERROR_TYPES.SHADEJS_ERROR, "Can't evaluate polymorphic logical expression"));
    },

    ConditionalExpression: function (node, parent, context) {
        var consequent = context.getTypeInfo(node.consequent),
            alternate = context.getTypeInfo(node.alternate),
            test = context.getTypeInfo(node.test),
            result = ANNO(node);

        var testResult = test.getStaticTruthValue();
        if (testResult === true) {
            result.copyFrom(consequent);
        } else if (testResult === false) {
            result.copyFrom(alternate);
        } else {
            if (result.setCommonType(consequent, alternate)) {
                result.setDynamicValue();
            } else {
                result.setInvalid(generateErrorInformation(node, ERROR_TYPES.SHADEJS_ERROR, "Can't evaluate polymorphic conditional expression"))
            }
        }

    },
    ObjectExpression: function (node, parent, context) {
        var result = ANNO(node);
        var properties = {};
        node.properties.forEach(function (property) {
            var p = properties[property.key.name] = property.value.extra;
        });
        result.setType(TYPES.OBJECT);
        result.setProperties(properties);
    },

    Property: function (node, parent, context) {
        var result = ANNO(node);
        result.copyFrom(context.getTypeInfo(node.value));
    }
};

module.exports = function (context, ast, propagatedConstants, analyzer) {

    if (!ast)
        throw Error("No node to analyze");

    var controller = new estraverse.Controller();

    context.setConstants(propagatedConstants || null);

    controller.traverse(ast, {
        enter: function (node) {
            if (node.type == Syntax.VariableDeclaration) {
                context.setInDeclaration(true);
            }
        },
        leave: function (node, parent) {
            if (handlers.hasOwnProperty(node.type)) {
                return handlers[node.type].call(this, node, parent, context, analyzer);
            } else {
                console.log("unhandled", node.type);
            }
            return null;
        }
    });
    context.setConstants(null);
};

},{"../../base/common.js":140,"../../interfaces.js":188,"../../type-system/errors.js":201,"../../type-system/typeinfo":203,"../constants/evaluator.js":98,"assert":25,"escodegen":54,"estraverse":61}],117:[function(require,module,exports){
"use strict";

var Shade = require("../../../interfaces.js");
var TYPES = Shade.TYPES;

function Array(result, args) {
    if (args.length > 1 || !args[0].canNumber())
        throw new Error("Only one arg of type number allowed");

    var size;
    if (args[0].hasConstantValue())
        size = args[0].getConstantValue();

    if (size)
        return {
            type: "array",
            staticSize: size,
            elements: {
                extra: {
                    type: "any"
                }
            }
        };

    return {
        type: "array",
        elements: {
            extra: {
                type: "any"
            }
        }
    };

}

Array.prototype.length = {
    type: TYPES.INT,
    computeStaticValue: function (result, scope, objectOfInterest) {
        return objectOfInterest.getArraySize();
    }
};

Array.prototype.shape = {
    type: TYPES.ARRAY,
    elements: {
        extra: {
            type: TYPES.INT
        }
    }
}

exports = module.exports = Array;

},{"../../../interfaces.js":188}],118:[function(require,module,exports){
"use strict";

var TypeSystem = require("../../../type-system/type-system.js");
var Scope = require("../../../utils").Scope;
var Base = require("../../../base/index.js");

var InferenceScope = function (node, parentScope, opt) {
	Scope.call(this, node, parentScope, opt);
};

Base.createClass(InferenceScope, Scope, {
	registerGlobals: function () {
		this.declarePredefined("Math", TypeSystem.getPredefinedObject("Math"));
		this.declarePredefined("Vec2", TypeSystem.getPredefinedObject("Vec2"));
		this.declarePredefined("Vec3", TypeSystem.getPredefinedObject("Vec3"));
		this.declarePredefined("Vec4", TypeSystem.getPredefinedObject("Vec4"));
		this.declarePredefined("Mat3", TypeSystem.getPredefinedObject("Mat3"));
		this.declarePredefined("Mat4", TypeSystem.getPredefinedObject("Mat4"));
		this.declarePredefined("this", TypeSystem.getPredefinedObject("System"));
		this.declarePredefined("Space", TypeSystem.getPredefinedObject("Space"));
		this.declarePredefined("Object", TypeSystem.getPredefinedObject("Object"));
		this.declarePredefined("Shade", TypeSystem.getPredefinedObject("Shade"));
		this.declarePredefined("Array", TypeSystem.getPredefinedObject("Array"));
		this.declarePredefined("Texture", TypeSystem.getPredefinedObject("Texture"));
	}
});

exports.InferenceScope = InferenceScope;


},{"../../../base/index.js":142,"../../../type-system/type-system.js":202,"../../../utils":206}],119:[function(require,module,exports){
var tools = require("./vec_tools");

var Mat3 = function Mat3(node, arguments) {
    return tools.evaluateConstructor("3x3", node, arguments);
};

tools.attachMethods(Mat3.prototype, ["invert", "transpose"], "3x3", "3x3");
tools.attachElementAccessor(Mat3.prototype, 3);
tools.attachColumnAccessor(Mat3.prototype, 3);
tools.attachMulMethod(Mat3.prototype, "3x3", 3);

exports = module.exports = Mat3;

},{"./vec_tools":131}],120:[function(require,module,exports){
var tools = require("./vec_tools");

var Mat4 = function Mat4(node, arguments) {
    return tools.evaluateConstructor("4x4", node, arguments);
};

tools.attachMethods(Mat4.prototype, ["invert", "transpose"], "4x4", "4x4");
tools.attachElementAccessor(Mat4.prototype, 4);
tools.attachColumnAccessor(Mat4.prototype, 4);
tools.attachMulMethod(Mat4.prototype, "4x4", 4);

exports = module.exports = Mat4;

},{"./vec_tools":131}],121:[function(require,module,exports){
var Shade = require("../../../interfaces.js"),
	TYPES = Shade.TYPES,
	Base = require("../../../base/index.js"),
	Tools = require("./tools.js");



var notStatic = function () {
};

var evaluateStatic = function (name) {
	return function (result, args) {
		if (Tools.allArgumentsAreStatic(args)) {
			var callArgs = args.map(function (a) {
				return a.getConstantValue();
			});
			return Math[name].apply(null, callArgs);
		}
	}
}

var evaluateMethod = function (name, paramCount, returnType) {
	/**
	 * @param {Annotation} result
	 * @param {Array.<Annotation>} args
	 * @param {Context} ctx
	 */
	return function (result, args, ctx) {
		if (paramCount != -1) { // Arbitrary number of arguments
			if (!args || args.length != paramCount) {
				throw new Error("Invalid number of parameters for Math." + name + ", expected " + paramCount);
			}
		}
		for (var i = 0; i < paramCount; i++) {
			if (!args[i].canNumber()) {
				throw new Error("Parameter " + (i + 1) + " has invalid type for Math." + name + ", expected 'number', but got " + args[i].getType());
			}
		}

		return {
			type: returnType || TYPES.NUMBER
		};
	}
};

var MathObject = {
	random: {
		type: TYPES.FUNCTION,
		evaluate: function (node, args) {
			if (args.length)
				throw new Error("Math.random has no parameters.");
			return {
				type: TYPES.NUMBER
			}
		},
		computeStaticValue: notStatic
	},
	abs: {
		type: TYPES.FUNCTION,
		evaluate: function (result, args) {
			Tools.checkParamCount(result.node, "Math.abs", [1], args.length);
			var typeInfo = {};
			if (args[0].canNumber()) {
				typeInfo.type = args[0].getType();
			}
			else {
				Error.throwError(result.node, "InvalidType for Math.abs");
			}
			// TODO: Static value
			return typeInfo;
		},
		computeStaticValue: evaluateStatic("abs")
	},


	// Non-standard methods
	clamp: {
		type: TYPES.FUNCTION,
		evaluate: function (result, args) {
			Tools.checkParamCount(result.node, "Math.clamp", [3], args.length);

			if (args[1].canNumber() && args[2].canNumber()) {
				var typeInfo = {};
				if (args[0].canNumber()) {
					typeInfo.type = TYPES.NUMBER;
				}
				else if (args[0].isVector()) {
					typeInfo.type = args[0].getType();
					typeInfo.kind = args[0].getKind();
				}
				return typeInfo;
			}
			Error.throwError(result.node, "Math.clamp not supported with argument types: " + args.map(function (arg) {
				return arg.getTypeString();
			}).join(", "));
		},
		computeStaticValue: evaluateStatic("clamp")

	},
	smoothstep: {
		type: TYPES.FUNCTION,
		evaluate: function (result, args, ctx) {
			Tools.checkParamCount(result.node, "Math.smoothstep", [3], args.length);

			if (args.every(function (e) {
					return e.canNumber();
				})) {
				return {type: TYPES.NUMBER};
			}
			if (args.every(function (e) {
					return e.isVector();
				})) {
				if (!(args[0].equals(args[1]) && args[1].equals(args[2]))) {
					throwError(result.node, "Math.smoothstep: All arguments have to have the same type: " + args.map(function (arg) {
						return arg.getTypeString();
					}).join(", "));
				}
				;
				return {
					type: TYPES.OBJECT,
					kind: args[0].getKind()
				}

			}
			;
			Error.throwError(result.node, "Math.smoothstep not supported with argument types: " + args.map(function (arg) {
				return arg.getTypeString();
			}).join(", "));
		},
		computeStaticValue: evaluateStatic("smoothstep")
	},
	step: {
		type: TYPES.FUNCTION,
		evaluate: function (result, args, ctx) {
			Tools.checkParamCount(result.node, "Shade.step", [2], args.length);

			if (Tools.allArgumentsCanNumber(args)) {
				return {type: TYPES.NUMBER}
			}
			Error.throwError(result.node, "Shade.step not supported with argument types: " + args.map(function (arg) {
				return arg.getTypeString();
			}).join(", "));
		},
		computeStaticValue: evaluateStatic("step")
	},
	fract:  {
			type: TYPES.FUNCTION,
			evaluate: function (result, args, ctx) {
				Tools.checkParamCount(result.node, "Shade.fract", [1], args.length);

				if (Tools.allArgumentsCanNumber(args)) {
					return {type: TYPES.NUMBER}
				}
				Error.throwError(result.node, "Shade.step not supported with argument types: " + args.map(function (arg) {
					return arg.getTypeString();
				}).join(", "));
		},
		computeStaticValue: evaluateStatic("fract")
	},

	mix: {
		type: TYPES.FUNCTION,
		evaluate: function (result, args, ctx) {
			Tools.checkParamCount(result.node, "Math.mix", [3], args.length);

			var cnt = Tools.Vec.checkAnyVecArgument(result.node, "Math.mix", args[0]);

			var typeInfo = {};
			Base.extend(typeInfo, Tools.Vec.getType(cnt));

			if (!args[1].equals(args[0]))
				Error.throwError(result.node, "Math.mix types of first two arguments do no match: got " + args[0].getTypeString() +
				" and " + args[1].getTypeString());
			if (!args[2].canNumber())
				Error.throwError(result.node, "Math.mix third argument is not a number.");

			return typeInfo;
		},
		computeStaticValue: evaluateStatic("mix")
	},
	saturate: {
		type: TYPES.FUNCTION,
		evaluate: function (result, args, ctx) {
			Tools.checkParamCount(result.node, "Shade.saturate", [1], args.length);

			var typeInfo = {
				type: TYPES.NUMBER
			}
			var arg = args[0];
			if (!arg.canNumber()) {
				Error.throwError(result.node, "Math.saturate not supported with argument type: " + arg.getTypeString());
			}
			return typeInfo;
		},
		computeStaticValue: evaluateStatic("saturate")
	}
};

var MathConstants = ["E", "PI", "LN2", "LOG2E", "LOG10E", "PI", "SQRT1_2", "SQRT2"];
var OneParameterNumberMethods = ["acos", "asin", "atan", "cos", "exp", "log", "round", "sin", "sqrt", "tan", "ceil", "floor"];
var OneParameterIntMethods = [];
var TwoParameterNumberMethods = ["atan2", "pow"];
var ArbitraryParameterNumberMethods = ["max", "min"];

MathConstants.forEach(function (constant) {
	MathObject[constant] = {type: TYPES.NUMBER, constantValue: Math[constant]};
});

OneParameterNumberMethods.forEach(function (method) {
	MathObject[method] = {
		type: TYPES.FUNCTION, evaluate: evaluateMethod(method, 1), computeStaticValue: evaluateStatic(method)
	};
});

TwoParameterNumberMethods.forEach(function (method) {
	MathObject[method] = {
		type: TYPES.FUNCTION, evaluate: evaluateMethod(method, 2), computeStaticValue: evaluateStatic(method)
	};
});

OneParameterIntMethods.forEach(function (method) {
	MathObject[method] = {
		type: TYPES.FUNCTION, evaluate: evaluateMethod(method, 1, TYPES.INT), computeStaticValue: evaluateStatic(method)
	};
});

ArbitraryParameterNumberMethods.forEach(function (method) {
	MathObject[method] = {
		type: TYPES.FUNCTION, evaluate: evaluateMethod(method, -1), computeStaticValue: evaluateStatic(method)
	};
});


module.exports = {
	name: "Math",
	properties: MathObject
};





},{"../../../base/index.js":142,"../../../interfaces.js":188,"./tools.js":127}],122:[function(require,module,exports){
var Obj = function Object() {
	return {type: "object"};
};

module.exports = Obj;

},{}],123:[function(require,module,exports){
var Shade = require("../../../interfaces.js"), TYPES = Shade.TYPES,
	KINDS = Shade.OBJECT_KINDS

var ShadeObject = {};

Object.keys(Shade.ColorClosures)
	.forEach(function(closureName) {
		var params = Shade.ColorClosures[closureName].input;
		ShadeObject[closureName] = {
			type: TYPES.FUNCTION,
			name: closureName,
			evaluate: function(node,
							   args /*, context, objectReference, root */) {
				for (var i = 0; i < params.length; i++) {
					if (i >= args.length) {
						if (params[i].defaultValue != undefined) {
							continue;
						}
						Shade.throwError(node,
										 "Argument " + (i + 1) + " of Shade."
											 + closureName
											 + " is required but not given.");
					} else {
						// TODO(ksons): Need a more generic canCastTo method in
						// type system
						switch (params[i].semantic) {
						case Shade.SEMANTICS.COLOR:
							if (!args[i].canColor()) {
								Shade.throwError(
									node,
									"Argument " + (i + 1) + " of Shade."
										+ closureName
										+ " must evaluate to a color, found "
										+ args[i].getTypeString());
							}
							break;
						case Shade.SEMANTICS.NORMAL:
							if (!args[i].canNormal()) {
								Shade.throwError(
									node,
									"Argument " + (i + 1) + " of Shade."
										+ closureName
										+ " must evaluate to a normal, found "
										+ args[i].getTypeString());
							}
							break;
						default:
							// TODO(ksons): More type checks
						}
					}
				}
				return {type: TYPES.OBJECT, kind: KINDS.COLOR_CLOSURE};

			}
		}
	});

ShadeObject.mix = {
	type: TYPES.FUNCTION,
	evaluate: function() {
		return {type: TYPES.OBJECT, kind: KINDS.COLOR_CLOSURE};
	}
};

module.exports = {
	name: "Shade",
	properties: ShadeObject
};
},{"../../../interfaces.js":188}],124:[function(require,module,exports){
var Shade = require("../../../interfaces.js");
var TYPES = Shade.TYPES;

var SpaceObject = {
    transformDirection: {
        type: TYPES.FUNCTION,
        evaluate: function (result, args) {
            if (args.length != 2)
                throw new Error("transformDirection expects 2 parameters.");
            return {
                type: TYPES.OBJECT,
                kind: "Vec3"
            };
        }
    },
    transformPoint: {
        type: TYPES.FUNCTION,
        evaluate: function (result, args) {
            if (args.length != 2)
                throw new Error("transformPoint expects 2 parameters.");
            return {
                type: TYPES.OBJECT,
                kind: "Vec3"
            };
        }
    },
    VIEW: {type: TYPES.NUMBER},
    WORLD: {type: TYPES.NUMBER}
};

module.exports = {
    name: "Space",
    properties: SpaceObject
};

},{"../../../interfaces.js":188}],125:[function(require,module,exports){
var Shade = require("../../../interfaces.js"),
    Base = require("../../../base/index.js"),
    Tools = require("./tools.js");
var TypeInfo = require("../../../type-system/typeinfo.js");


var TYPES = Shade.TYPES,
    KINDS = Shade.OBJECT_KINDS;



function allowNumberOrVector(name) {
    return function (node, args) {
        Tools.checkParamCount(node, name, [1], args.length);
        var arg = args[0];
        if (arg.canNumber()) {
            return {
                type: arg.getType()
            }
        }
        if (arg.isVector()) {
            return {
                type: TYPES.OBJECT,
                kind: arg.getKind()
            }
        }
        Shade.throwError(node, "IllegalArgumentError: first argument of this." + name + " is of type: " + arg.getTypeString());
    }
}


var DerivativesMethods = {
    fwidth: {
        type: TYPES.FUNCTION,
        evaluate: allowNumberOrVector("fwidth")
    },
    dx: {
        type: TYPES.FUNCTION,
        evaluate: allowNumberOrVector("dx")
    },
    dy: {
        type: TYPES.FUNCTION,
        evaluate: allowNumberOrVector("dy")
    }
};

var System = {
    name: "System",
    properties: {
        normalizedCoords: {
            type: TYPES.OBJECT,
            kind: "Vec3",
            derived: true
        },
        coords: {
            type: TYPES.OBJECT,
            kind: "Vec3",
            derived: true
        },
        height: {
            type: TYPES.INT,
            derived: true
        },
        width: {
            type: TYPES.INT,
            derived: true
        }
    },
    setDerivatives: function (available) {
        if (available) {
            Base.extend(System.properties, DerivativesMethods);
        } else {
            for (var methodName in DerivativesMethods) {
                delete System.properties[methodName];
            }
        }
    }
};

module.exports = System;

},{"../../../base/index.js":142,"../../../interfaces.js":188,"../../../type-system/typeinfo.js":203,"./tools.js":127}],126:[function(require,module,exports){
"use strict";

var Shade = require("../../../interfaces.js");
var TYPES = Shade.TYPES;
var tools = require("./vec_tools");

function Texture(result, args, ctx) {
    var width, height;
    if (args[0].hasConstantValue())
        width = args[0].getConstantValue();
    if (args[1].hasConstantValue())
        height = args[0].getConstantValue();

    return {
        type: "object",
        kind: "Texture",
        width: width,
        height: height
    };
    // Shade.throwError(result.node, "Construction of Textures is not supported." );
}

tools.attachMethods(Texture.prototype, ['sample2D'], 4, 2);

Texture.prototype.width = {
    type: TYPES.INT
};
Texture.prototype.height = {
    type: TYPES.INT
};

exports = module.exports = Texture;

},{"../../../interfaces.js":188,"./vec_tools":131}],127:[function(require,module,exports){
(function(ns){
    var utils = require("../../../interface/utils");
    var Base = require("../../../base/index.js");
    var Shade = require("../../../interfaces.js"),
        TYPES = Shade.TYPES,
        KINDS = Shade.OBJECT_KINDS,
        VecBase = require("../../../base/vec.js");

    var allArgumentsAreConstant = function (args) {
        return args.every(function (arg) {
            return arg.hasConstantValue()
        });
    }

    ns.allArgumentsCanNumber = function(args) {
        return args.every(function (arg) {
            return arg.canNumber();
        });
    }

    ns.checkParamCount = function(node, name, allowed, is) {
        if (allowed.indexOf(is) == -1) {
            Shade.throwError(node, "Invalid number of parameters for " + name + ", expected " + allowed.join(" or ") + ", found: " + is);
        }
    }

    ns.singleAccessor = function (name, obj, validArgCounts, staticValueFunction) {
        return {
            type: TYPES.FUNCTION,
            evaluate: function (result, args, ctx, callObject) {
                ns.checkParamCount(result.node, name, validArgCounts, args.length);
                var typeInfo =  args.length ? obj : { type: TYPES.NUMBER };

                if (staticValueFunction && callObject.hasConstantValue() && args.every(function(a) {return a.hasConstantValue(); })) {
                    typeInfo.staticValue = staticValueFunction(callObject.getConstantValue(), args);
                }
                return typeInfo;
            }
        }
    };

    ns.extend = Base.extend;

    var Vec = {
        TYPES: {
            1: { type: TYPES.NUMBER },
            2: { type: TYPES.OBJECT, kind: "Vec2" },
            3: { type: TYPES.OBJECT, kind: "Vec3" },
            4: { type: TYPES.OBJECT, kind: "Vec4" }
        },
        getType: function (destVector) {
            return Vec.TYPES[destVector];
        },
        getConstantValue: function (methodName, result, ctx, callObject) {
            if (callObject.hasConstantValue()) {
                var object = callObject.getConstantValue();
                return object[methodName];
            }
        },
        checkAnyVecArgument: function(astNode, methodName, arg){
            var cnt;

            if(arg.canNumber()) cnt = 1;
            else if(arg.isOfKind("Vec2")) cnt = 2;
            else if(arg.isOfKind("Vec3")) cnt = 3;
            else if(arg.isOfKind("Vec4")) cnt = 4;
            else Shade.throwError(astNode, "Invalid parameter for " + methodName + ", type '" +
                    arg.getTypeString() + "' is not supported");
            return cnt;
        },
        checkVecArguments: function(methodName, vecSize, withEmpty, argStart, result, args){
            withEmpty = (withEmpty || vecSize == 0);
            var allowed = [];
            for(var i = withEmpty ? 0 : 1; i <= vecSize; ++i) allowed.push(i + argStart);
            ns.checkParamCount(result.node, methodName, allowed, args.length);

            if(withEmpty && args.length - argStart == 0)
                return;

            if(args.length - argStart== 1 && args[0].canNumber())
                return;

            var idx = 0;
            for(var i = argStart; idx < vecSize && i < args.length; ++i){
                var arg= args[i], cnt;
                if(arg.canNumber()) cnt = 1;
                else if(arg.isOfKind("Vec2")) cnt = 2;
                else if(arg.isOfKind("Vec3")) cnt = 3;
                else if(arg.isOfKind("Vec4")) cnt = 4;
                else if(arg.isOfKind("Mat3")) cnt = 9;
                else if(arg.isOfKind("Mat4")) cnt = 16;
                else Shade.throwError(result.node, "Invalid parameter for " + methodName + ", type '" + arg.getTypeString() + "' is not supported");
                idx += cnt;
            }

            if(idx < vecSize)
                Shade.throwError(result.node, "Invalid parameters for " + methodName + ", expected " + vecSize + " scalar values, got " + idx);
            else if(i < args.length){
                Shade.throwError(result.node, "Invalid parameters for " + methodName + ", too many parameters");
            }
        },

        vecEvaluate: function(objectName, methodName, destVecSize, srcVecSize, result, args, ctx, callObject){
            //console.log("vecEvaluate", objectName, methodName, destVecSize, srcVecSize, args)
            Vec.checkVecArguments(objectName + "." + methodName, srcVecSize, false, 0, result, args);

            var typeInfo = {};
            Base.extend(typeInfo, Vec.getType(destVecSize));

            return typeInfo;
        },
        anyVecArgumentEvaluate: function (methodName, result, args, ctx, callObject) {
            ns.checkParamCount(result.node, methodName, [1], args.length);
            var arg = args[0];

            var typeInfo = {};
            var cnt = Vec.checkAnyVecArgument(result.node, methodName, arg);
            Base.extend(typeInfo, Vec.getType(cnt));

            return typeInfo;
        },

        optionalZeroEvaluate: function(objectName, methodName, destVecSize, zeroDestVecSize, srcVecSize, result, args, ctx, callObject) {
            var qualifiedName = objectName + "." + methodName;
            var typeInfo = {};

            if(args.length == 0){
                Base.extend(typeInfo, Vec.getType(zeroDestVecSize));
            }
            else{
                Vec.checkVecArguments(qualifiedName, srcVecSize, true, 0, result, args);
                Base.extend(typeInfo, Vec.getType(destVecSize));
            }
            return typeInfo;
        },

        swizzleEvaluate: function(objectName, vecSize, swizzle, withSetter, result, args, ctx, callObject) {
            if(withSetter){
                return Vec.optionalZeroEvaluate(objectName, swizzle, vecSize, swizzle.length, swizzle.length,
                    result, args, ctx, callObject);
            }
            else{
                return Vec.vecEvaluate(objectName, swizzle, swizzle.length, 0, result, args, ctx, callObject);
            }
        },
        swizzleOperatorEvaluate: function(objectName, vecSize, swizzle, operator, result, args, ctx, callObject) {
            return Vec.vecEvaluate(objectName, swizzle + operator, vecSize, swizzle.length, result, args, ctx, callObject);
        },
        getSwizzleEvaluate: function(objectName, vecSize, swizzle, withSetter){
            return  {
                type: TYPES.NUMBER,
                evaluate: Vec.swizzleEvaluate.bind(null, objectName, vecSize, swizzle, withSetter),
                computeStaticValue: Vec.getConstantValue.bind(null, swizzle)
            }
        },
        getSwizzleOperatorEvaluate: function(objectName, vecSize, swizzle, operator){
            return  {
                type: TYPES.FUNCTION,
                evaluate: Vec.swizzleOperatorEvaluate.bind(null, objectName, vecSize, swizzle, operator),
                computeStaticValue: Vec.getConstantValue.bind(null, swizzle + operator)
            }
        },
        attachSwizzles: function (instance, objectName, vecLength) {
            var utils = require("../../../interface/utils");

            utils.attachSwizzles(2, function (swizzle) {
                Object.defineProperty(instance, swizzle.join(""), {
                    get: (function (swizzle) {
                        return function () {
                            return  {
                                type: TYPES.NUMBER,
                                computeStaticValue: Vec.getConstantValue.bind(null, swizzle)
                            }
                        }
                    })(swizzle)
                });

                return  {
                    type: TYPES.NUMBER,
                    evaluate: Vec.swizzleEvaluate.bind(null, objectName, vecLength, swizzle),
                    computeStaticValue: Vec.getConstantValue.bind(null, swizzle)
                }
            });
        },
        attachVecMethods: function(instance, objectName, destVecSize, srcVecSize, methodNames){
            for(var i = 0; i < methodNames.length; ++i){
                    var methodName = methodNames[i];
                    instance[methodName] = {
                        type: TYPES.FUNCTION,
                        evaluate: Vec.vecEvaluate.bind(null, objectName, methodName, destVecSize, srcVecSize)
                    }
            }
        },

        getConstantValueFromConstructor: function(objectName, args){
            var argArray = [];
            var isStatic = true;
            args.forEach(function (param) {
                isStatic = isStatic && param.hasConstantValue();
                if (isStatic)
                    argArray.push(param.getConstantValue());
            });

            if (isStatic) {
                var v = new Shade[objectName]();
                Shade[objectName].apply(v, argArray);
                return v;
            }
            return undefined;
        },

        constructorEvaluate: function(objectName, vecSize) {
			var constructor = function (result, args) {
				Vec.checkVecArguments(objectName, vecSize, true, 0, result, args);
				var result = Base.extend({}, Vec.getType(vecSize));
				result.constantValue = Vec.getConstantValueFromConstructor(objectName, args);
				return result;
			}
			constructor.proto = {};
			return constructor;
		}


    };

    var Mat = {
        TYPES: {
            "Mat3": { type: { type: TYPES.OBJECT, kind: KINDS.MATRIX3 }, cols: 3, rows: 3 },
            "Mat4": { type: { type: TYPES.OBJECT, kind: KINDS.MATRIX4 }, cols: 4, rows: 4 }
        },
        getType: function(matName){
            return Mat.TYPES[matName].type;
        },
        getVecSize: function(matName){
            return Mat.TYPES[matName].cols * Mat.TYPES[matName].rows;
        },
        checkMatArguments: function(methodName, matName, withEmpty, result, args){
            if(args.length == 1 && (args[0].isOfKind(KINDS.MATRIX3) || args[0].isOfKind(KINDS.MATRIX4)))
                return;

            for(var i = 0; i < args.length; ++i){
                if(args[i].isOfKind(KINDS.MATRIX3) || args[i].isOfKind(KINDS.MATRIX4))
                    Shade.throwError(result.node, "Invalid parameter for " + methodName + ": Constructing Matrix from Matrix can only take one argument");
            }
            Vec.checkVecArguments(methodName, Mat.getVecSize(matName), withEmpty, 0, result, args);
        },

        matEvaluate: function(matName, methodName, result, args, ctx, callObject){
            Mat.checkMatArguments(matName + "." + methodName, matName, false, result, args);

            var typeInfo = {};
            Base.extend(typeInfo, Mat.getType(matName));

            return typeInfo;
        },

        matConstructorEvaluate: function(matName, result, args, ctx){
            Mat.checkMatArguments(matName, matName, true, result, args);
            return Vec.getConstructorTypeInfo(matName, Mat.getVecSize(matName), Mat.getType(matName), result, args);
        },

        attachMatMethods: function(instance, matName, methodNames){
            for(var i = 0; i < methodNames.length; ++i){
                var methodName = methodNames[i];
                instance[methodName] = {
                    type: TYPES.FUNCTION,
                    evaluate: Mat.matEvaluate.bind(null, matName, methodName)
                }
            }
        },
        colEvaluate: function(matName, result, args, ctx, callObject) {
            var qualifiedName = matName + ".col";
            var typeInfo = {};

            var cols = Mat.TYPES[matName].cols, rows = Mat.TYPES[matName].rows;

            if(args.length > 1){
                Vec.checkVecArguments(qualifiedName, rows, true, 1, result, args);
                Base.extend(typeInfo, Mat.getType(matName));
            }
            else{
                ns.checkParamCount(result.node, qualifiedName, [1], args.length);
                Base.extend(typeInfo, Vec.getType(rows));
            }
            if(!args[0].canNumber()){
                Shade.throwError(result.node, "Invalid parameter for " + qualifiedName + ", first parameter must be a number.");
            }

            // TODO: Vec.getConstantValue(typeInfo, "col", args, callObject);

            return typeInfo;
        }

    }

    ns.Vec = Vec;
    ns.Mat = Mat;
    ns.allArgumentsAreStatic = allArgumentsAreConstant;


}(exports));

},{"../../../base/index.js":142,"../../../base/vec.js":143,"../../../interface/utils":186,"../../../interfaces.js":188}],128:[function(require,module,exports){
var tools = require("./vec_tools");

var Vec2 = function Vec2(result, args) {
	return tools.evaluateConstructor(2, result, args);
};

tools.attachSwizzles(Vec2.prototype, 2);
tools.attachMethods(Vec2.prototype, ["add", "sub", "mul", "div", "mod"], 2, 2);
tools.attachMethods(Vec2.prototype, ["dot"], 1, 2);
tools.attachMethods(Vec2.prototype, ["normalize", "flip"], 2, 0);
tools.attachMethods(Vec2.prototype, ["length"], 1, 0);

exports = module.exports = Vec2;

},{"./vec_tools":131}],129:[function(require,module,exports){
var tools = require("./vec_tools");

var Vec3 = function Vec3(result, args) {
	return tools.evaluateConstructor(3, result, args);
};

tools.attachSwizzles(Vec3.prototype, 3);
tools.attachMethods(Vec3.prototype, ["add", "sub", "mul", "div", "mod", "reflect", "cross"], 3, 3);
tools.attachMethods(Vec3.prototype, ["dot"], 1, 3);
tools.attachMethods(Vec3.prototype, ["normalize", "flip"], 3, 0);
tools.attachMethods(Vec3.prototype, ["length"], 1, 0);

Vec3.prototype.refract = function (result, args) {
	if (args.length < 2)
		Shade.throwError(result.node, "Not enough parameters for refract.");

	var eta = args.pop();
	if (!eta || !eta.canNumber())
		Shade.throwError(result.node, "Invalid parameter for refract, expected a number got " + eta.getTypeString());

	//Tools.Vec.checkVecArguments("Vec3.refract", 3, false, 0, result, args);

	return {
		type: "object",
		kind: "Vec3"
	};
};

exports = module.exports = Vec3;

},{"./vec_tools":131}],130:[function(require,module,exports){
var tools = require("./vec_tools");

var Vec4 = function Vec4(result, args) {
	return tools.evaluateConstructor(4, result, args);
};

tools.attachSwizzles(Vec4.prototype, 4);
tools.attachMethods(Vec4.prototype, ["add", "sub", "mul", "div", "mod"], 4, 4);
tools.attachMethods(Vec4.prototype, ["dot"], 1, 4);
tools.attachMethods(Vec4.prototype, ["normalize", "flip"], 4, 0);
tools.attachMethods(Vec4.prototype, ["length"], 1, 0);

exports = module.exports = Vec4;

},{"./vec_tools":131}],131:[function(require,module,exports){
var utils = require("../../../interface/utils");
var Base = require("../../../base/index.js");
var Shade = require("../../../interfaces.js");
var TYPES = Shade.TYPES;
var Vec2 = require("../../../interfaces").Vec2;
var Vec3 = require("../../../interfaces").Vec3;
var Vec4 = require("../../../interfaces").Vec4;
var Mat2 = require("../../../interfaces").Mat2;
var Mat3 = require("../../../interfaces").Mat3;
var Mat4 = require("../../../interfaces").Mat4;

var sizeTypeMap = {
	1: {type: TYPES.NUMBER},
	2: {type: TYPES.OBJECT, kind: "Vec2"},
	3: {type: TYPES.OBJECT, kind: "Vec3"},
	4: {type: TYPES.OBJECT, kind: "Vec4"},
    "2x2": {type: TYPES.OBJECT, kind: "Mat2"},
    "3x3": {type: TYPES.OBJECT, kind: "Mat3"},
    "4x4": {type: TYPES.OBJECT, kind: "Mat4"}
};

var sizeConstructorMap = {
    2: Vec2,
    3: Vec3,
    4: Vec4,
    "2x2": Mat2,
    "3x3": Mat3,
    "4x4": Mat4
};

var kindSizeMap = {
    "Vec2": 2,
    "Vec3": 3,
    "Vec4": 4
};

function attachSwizzles(prototype, vecSize) {
	utils.attachSwizzles(vecSize, function(swizzle, idx) {
        Object.defineProperty(prototype, swizzle.join(""), {
            get: (function(swizzle) {
                return function() {
                    return Base.extend(sizeTypeMap[swizzle.length], {
                        computeStaticValue: getConstantValue.bind(null, swizzle.join(""))
                    });
                }
            })(swizzle)
        });
	});
}

function getConstantValue(methodName, result, ctx, callObject) {
	if (callObject.hasConstantValue())
		return callObject.getConstantValue()[methodName];
}

function attachMethods(prototype, methodNames, resultSize, argSize){
    for(var i = 0; i < methodNames.length; ++i) {
        var methodName = methodNames[i];
        prototype[methodName] = {
            type: TYPES.FUNCTION,
            evaluate: evaluate.bind(null, methodName, resultSize, argSize)
        }
    }
}

function evaluate(methodName, resultVecSize, argVecSize, result, args, ctx, callObject) {
    validateArguments();
    return Base.extend({}, sizeTypeMap[resultVecSize]);
}

function validateArguments(argVecSize, resulVecSize) {

}

function evaluateConstructor(size, result, args) {
    validateArguments();
    result = Base.extend({}, sizeTypeMap[size]);

    if (args.every(function (arg) { return arg.hasConstantValue() }))
        result.constantValue = new sizeConstructorMap[size](args.map(function (arg) { return arg.getConstantValue()}));

    return result;
}

// only square matrices
function attachElementAccessor(prototype, columnSize) {
    for (var rowIdx = 1; rowIdx <= columnSize; ++rowIdx)
        for (var columnIdx = 1; columnIdx <= columnSize; ++columnIdx)
            Object.defineProperty(
                prototype, "m" + rowIdx + "" + columnIdx, {
                    get: (function(rowIdx, columnIdx) {
                        return function () {
                            return Base.extend({type: TYPES.NUMBER}, {
                                computeStaticValue: getConstantValue.bind(null, "m" + rowIdx + "" + columnIdx)
                            });
                        }
                    })(rowIdx - 1, columnIdx - 1)
                });
}

function attachColumnAccessor(prototype, columnSize) {
    for (var columnIdx = 1; columnIdx <= columnSize; ++columnIdx) {
        Object.defineProperty(prototype, "c" + columnIdx, {
            get: (function(columnIdx) {
                return function() {
                    return Base.extend(sizeTypeMap[columnSize], {
                        computeStaticValue: getConstantValue.bind(null, "c" + columnIdx)
                    });
                }
            })(columnIdx - 1)
        });
    }
}

function attachMulMethod(prototype, size, columnSize) {
    prototype.mul = {
        type: TYPES.FUNCTION,
        evaluate: function (result, args) {
            if (args.length === 1) {
                if (args[0].getType() !== TYPES.OBJECT)
                    throw "nope";
                if (args[0].getKind() === sizeTypeMap[size].kind)
                    return sizeTypeMap[size];
            }

            var count = args.reduce(function (count, arg) {
                if (arg.getType() === "object")
                    return count + kindSizeMap[arg.getKind()];

                if (arg.canNumber())
                    return count + 1;

                throw "Cannot";
            }, 0);

            if (count !== columnSize)
                throw "Nope";

            return sizeTypeMap[count];
        }
    }
}

exports.attachSwizzles = attachSwizzles;
exports.attachMethods = attachMethods;
exports.evaluateConstructor = evaluateConstructor;
exports.attachElementAccessor = attachElementAccessor;
exports.attachColumnAccessor = attachColumnAccessor;
exports.attachMulMethod = attachMulMethod;
},{"../../../base/index.js":142,"../../../interface/utils":186,"../../../interfaces":188,"../../../interfaces.js":188}],132:[function(require,module,exports){
(function (ns) {

    // dependencies
    var assert = require('assert');
    var esgraph = require('esgraph');
    var worklist = require('analyses');
    var common = require("../../base/common.js");
    var Base = require("../../base/index.js");
    var codegen = require('escodegen');
    var annotateRight = require("./infer_expression.js");
    var InferenceScope = require("./registry/").InferenceScope;
    var System = require("./registry/system.js");
    var annotate = require("./../../utils").annotate;
    var walk = require('estraverse');
    var astTools = require("../utils/ast");
    var Shade = require("../../interfaces.js");
    var walkes = require('walkes');
    var validator = require('../validation');
    var TypeInfo = require("../../type-system/typeinfo.js");

    // shortcuts
    var Syntax = common.Syntax;
    var Set = worklist.Set;








    function findConstantsFor(ast, names, constantVariables) {
        var result = new Set(), annotation, name, formerValue;
        constantVariables = constantVariables ? constantVariables.values() : [];

        walkes(ast, {
            AssignmentExpression: function(recurse) {


                if (this.left.type != Syntax.Identifier) {
                    Shade.throwError(ast, "Can't find constant for computed left expression");
                }
                name = this.left.name;
                if(names.has(name)) {
                    annotation = annotate(this.right);
                    if(annotation.hasConstantValue()) {
                        switch(this.operator) {
                            case "=":
                                result.add({ name: name, constant: TypeInfo.copyStaticValue(annotation)});
                                break;
                            case "-=":
                            case "+=":
                            case "*=":
                            case "/=":
                                formerValue = constantVariables.filter(function(v){ return v.name == name; });
                                if(formerValue.length) {
                                    var c = formerValue[0].constant, v;
                                    switch(this.operator) {
                                        case "+=":
                                            v = c + TypeInfo.copyStaticValue(annotation);
                                            break;
                                        case "-=":
                                            v = c - TypeInfo.copyStaticValue(annotation);
                                            break;
                                        case "*=":
                                            v = c * TypeInfo.copyStaticValue(annotation);
                                            break;
                                        case "/=":
                                            v = c / TypeInfo.copyStaticValue(annotation);
                                            break;
                                    }
                                    result.add({ name: name, constant: v});
                                }
                                break;
                            default:
                                assert(!this.operator);
                        }

                    }
                }
                recurse(this.right);
            },

            VariableDeclarator: function(recurse) {
                name = this.id.name;
                if (this.init && names.has(name)) {
                    annotation = annotate(this.init);
                    if(annotation.hasConstantValue()) {
                        result.add({ name: name, constant: TypeInfo.copyStaticValue(annotation)});
                    }
                }
                recurse(this.init);
            },

            UpdateExpression: function(recurse) {
                if(this.argument.type == Syntax.Identifier) {
                    name = this.argument.name;
                    annotation = annotate(this);
                    if(annotation.hasConstantValue()) {
                        var value = TypeInfo.copyStaticValue(annotation);
                        if (!this.prefix) {
                            value = this.operator == "--" ? --value : ++value;
                        }
                        result.add({ name: name, constant: value});
                    }
                }
            }
        });

        return result;
    }



    /**
     *
     * @param ast
     * @param {AnalysisContext} context
     * @param {*} opt
     * @constructor
     */
    var TypeInference = function (ast, context, opt, analyzer) {
        opt = opt || {};
        this.analyzer = analyzer;
        this.context = context;

        this.propagateConstants = opt.propagateConstants || false;
    };

    Base.extend(TypeInference.prototype, {

        /**
         * @param {*} ast
         * @param {*} opt
         * @returns {*}
         */
        inferBody: function (ast, opt) {
             var cfg = esgraph(ast, { omitExceptions: true }),
                 context = this.context,
                 propagateConstants = this.propagateConstants;

        //console.log("infer body", cfg)
        var self = this
        var result = worklist(cfg,
            /**
             * @param {Set} input
             * @this {FlowNode}
             * @returns {*}
             */
                function (input) {

                if (!this.astNode || this.type) // Start and end node do not influence the result
                    return input;

                //console.log("Analyze", codegen.generate(this.astNode), this.astNode.type);

                // Local
                if(propagateConstants) {
                    this.kill = this.kill || astTools.findVariableDefinitions(this.astNode, true);
                }

                annotateRight(context, this.astNode, propagateConstants ? input : null, self.analyzer);

                this.decl = this.decl || context.declare(this.astNode);

                //context.computeConstants(this.astNode, input);

                if(!propagateConstants) {
                    return input;
                }



                var filteredInput = null, generate = null;
                if (this.kill.size) {
                    // Only if there's an assignment, we need to generate
                    generate = findConstantsFor(this.astNode, this.kill, propagateConstants ? input : null);
                    var that = this;
                    filteredInput = new Set(input.filter(function (elem) {
                            return !that.kill.some(function(tokill) { return elem.name == tokill });
                    }));
                }

                var result = Set.union(filteredInput || input, generate);
               // console.log("input:", input);
               // console.log("kill:", this.kill);
               // console.log("generate:", generate);
               // console.log("filteredInput:", filteredInput);
               // console.log("result:", result);
                return result;
            }
            , {
                direction: 'forward',
                merge: worklist.merge(function(a,b) {
                    if (!a && !b)
                        return null;
                    //console.log("Merge", a && a.values(), b && b.values())
                    var result = Set.intersect(a, b);
                    //console.log("Result", result && result.values())
                    return result;
                }),
                equals: function (a, b) {
                    if (a.size !== b.size)
                        return false;

                    var bvalues = b.values();
                    return a.values().every(function (v) {
                        return bvalues.some(function (bv) {
                            return bv.name === v.name && bv.constant === v.constant;
                        });
                    })
                }
            });
        //Tools.printMap(result, cfg);
        return ast;
        }

    });




    /**
     *
     * @param ast
     * @param {AnalysisContext} context
     * @param opt
     * @returns {*}
     */
    var inferProgram = function (ast, context, opt, analyzer) {
        opt = opt || {};
        //var globalScope = createGlobalScope(ast);
        //registerSystemInformation(globalScope, opt);

        var typeInference = new TypeInference(ast, context, opt, analyzer);
        var result = typeInference.inferBody(ast, opt);


        return result;
    };

    ns.infer = inferProgram;

}(exports));

},{"../../base/common.js":140,"../../base/index.js":142,"../../interfaces.js":188,"../../type-system/typeinfo.js":203,"../utils/ast":137,"../validation":139,"./../../utils":206,"./infer_expression.js":116,"./registry/":118,"./registry/system.js":125,"analyses":46,"assert":25,"escodegen":54,"esgraph":58,"estraverse":61,"walkes":95}],133:[function(require,module,exports){
(function (ns) {

    // Dependencies
    var traverse = require('estraverse'),
        common = require("./../../base/common.js"),
        Shade = require("../../interfaces.js"),
        codegen = require('escodegen'),
        Set = require('analyses').Set,
        astTools = require('../utils/ast.js');


    // Shortcuts
    var Syntax = traverse.Syntax, ANNO = common.ANNO;

    function toMap(uniformSet) {
        var result = {};
        uniformSet && uniformSet.forEach(function(entry) {
            result[entry.name] = {
                dependencies: entry.dependencies,
                costs: entry.costs
            };
        });
        return result;
    }

    var allowedMemberCalls = ["Math", "Shade"];

    ns.generateUniformExpressions = function (ast, input) {

        var uniformVariables = toMap(input);

        traverse.traverse(ast, {
            leave: function (node, parent) {
                var result = ANNO(node);
                result.clearUniformDependencies();

                switch (node.type) {

                    // New uniforms can come via the env object
                    case Syntax.MemberExpression:
                        var propertyAnnotation = ANNO(node.property);
                        if (propertyAnnotation.getSource() == Shade.SOURCES.UNIFORM) {
                            result.setUniformDependencies(node.property.name);
                            result.setUniformCosts(0);
                            break;
                        }
                        if (ANNO(node.object).isUniformExpression() && propertyAnnotation.getType() !== "function") {
                            result.setUniformDependencies(ANNO(node.object).getUniformDependencies());
                            result.setUniformCosts(1);
                            break;
                        }

                        break;

                    case Syntax.Identifier:
                        // Not a variable
                        if(!astTools.isVariableReference(node, parent))
                            return;

                        // Not a variable on the right side
                        if(parent.type == Syntax.AssignmentExpression && parent.left == node)
                            return;

                        if(uniformVariables.hasOwnProperty(node.name)) {
                            var propagatedUniform = uniformVariables[node.name];
                            result.setUniformDependencies(propagatedUniform.dependencies);
                            result.setUniformCosts(propagatedUniform.costs);
                        }

                        break;
                    case Syntax.BinaryExpression:
                         var left = ANNO(node.left),
                             right = ANNO(node.right);

                        if (left.canUniformExpression() && right.canUniformExpression()) {
                            result.setUniformDependencies(left.getUniformDependencies(), right.getUniformDependencies());
                            result.setUniformCosts(left.getUniformCosts() + right.getUniformCosts() + 2);
                        }
                        break;
                    case Syntax.UnaryExpression:
                        var argument = ANNO(node.argument);

                        if(argument.isUniformExpression()) {
                            result.setUniformDependencies(argument.getUniformDependencies());
                            result.setUniformCosts(argument.getUniformCosts() + 1);
                        }
                        break;
                    case Syntax.CallExpression:
                        if(node.callee.type == Syntax.MemberExpression) {
                            var object = node.callee.object;
                            var args = node.arguments.map(function(arg) { return ANNO(arg);});

                            if(object.name && ~allowedMemberCalls.indexOf(object.name)) {
                                var dependencies = mergeUniformDependencies(args);
                                if(dependencies) {
                                    result.setUniformDependencies(dependencies);
                                    var costs = args.reduce(function(prev, next) { return prev + next.getUniformCosts(); }, 1);
                                    result.setUniformCosts(costs)
                                }
                            } else {
                                // TODO: CleanCode: Merge with above as soon as all differences are clear
                                var objectAnno = ANNO(object);
                                if(objectAnno.isUniformExpression()) {
                                    var dependencies = mergeUniformDependencies(args);
                                    if (dependencies || args.length == 0) {
                                        result.setUniformDependencies(dependencies, objectAnno.getUniformDependencies());
                                        var costs = args.reduce(function(prev, next) { return prev + next.getUniformCosts(); }, 1);
                                        result.setUniformCosts(costs)
                                    }
                                }  else {
                                    // console.log("No exp:", Shade.toJavaScript(node))
                                }
                            }
                        }
                        break;
                    case Syntax.NewExpression:
                        if(node.callee.type == Syntax.Identifier && node.callee.name !== "Array") {
                            var args = node.arguments.map(function(arg) { return ANNO(arg);});
                            var dependencies = mergeUniformDependencies(args);
                            if(dependencies) {
                                result.setUniformDependencies(dependencies);
                                var costs = args.reduce(function(prev, next) { return prev + next.getUniformCosts(); }, 1);
                                result.setUniformCosts(costs);
                            }
                        }
                        break;

                }
            }
        });

        var result = new Set();
        switch (ast.type) {
            case Syntax.AssignmentExpression:
                var right = ANNO(ast.right);
                if (right.isUniformExpression()) {
                    result.add({ name: ast.left.name, dependencies: right.getUniformDependencies(), costs: right.getUniformCosts() });
                }
                break;
            case Syntax.VariableDeclaration:
                ast.declarations.forEach(function (declaration) {
                    if (declaration.init) {
                        var init = ANNO(declaration.init);
                        if (init.isUniformExpression()) {
                            result.add({ name: declaration.id.name, dependencies: init.getUniformDependencies(), costs: init.getUniformCosts() });
                        }
                    }
                });
                break;
        }
        return result;
    }
    
    
    function atLeastOneArgumentIsUniform(args) {
        var allUniformOrStatic = true,
            oneUniform = false;

        for(var i = 0; i < args.length && allUniformOrStatic; i++) {
            var thisUniform = args[i].isUniformExpression();
            allUniformOrStatic = allUniformOrStatic && (thisUniform || args[i].hasConstantValue());
            oneUniform = oneUniform || thisUniform;
        }
        return allUniformOrStatic && oneUniform;
    };

    function mergeUniformDependencies(args) {
        var uniformDependencies = null;

        if(atLeastOneArgumentIsUniform(args)) {
            uniformDependencies = []
            for(var i = 0; i< args.length;i++) {
                if (args[i].isUniformExpression())        {
                    uniformDependencies = uniformDependencies.concat(args[i].getUniformDependencies());
                }
            }
        }
        return uniformDependencies;
    };

}(exports));

},{"../../interfaces.js":188,"../utils/ast.js":137,"./../../base/common.js":140,"analyses":46,"escodegen":54,"estraverse":61}],134:[function(require,module,exports){
(function (ns) {

    // Dependencies
    var common = require("../../base/common.js");
    var esgraph = require('esgraph');
    var worklist = require('analyses');
    var evaluator = require('./evaluator.js');
    var transformer = require('./uniformTransformer.js');
    var astTools = require("../utils/ast");
    var assert = require("assert");

    // Shortcuts
    var Set = worklist.Set,
        Syntax = common.Syntax;

    /**
     * @param root
     * @param opt
     * @constructor
     */
    function UniformAnalysis(root, opt) {
        this.root = root;
        this.opt = opt || {};
    }


    UniformAnalysis.prototype = {
        analyzeBody: function (body) {
            var cfg = esgraph(body, { omitExceptions: true });


            var result = worklist(cfg,
            /**
             * @param {Set} input
             * @this {FlowNode}
             * @returns {*}
             */
                function (input) {

                if (!this.astNode || this.type) // Start and end node do not influence the result
                    return input;

                var generate = evaluator.generateUniformExpressions(this.astNode, input);
                this.kill = this.kill || astTools.findVariableDefinitions(this.astNode, true);

                var filteredInput = input;
                if (this.kill.size) {
                    var that = this;
                    filteredInput = new Set(input.filter(function (elem) {
                            return !that.kill.some(function(tokill) { return elem.name == tokill });
                    }));
                }

                var result = Set.union(filteredInput, generate);

//                console.log("input:", input);
//                console.log("kill:", this.kill);
//                console.log("generate:", generate);
//                console.log("filteredInput:", filteredInput);
//                //console.log("result:", result);
                return result;
                }, {
                direction: 'forward',
                merge: worklist.merge(function(a,b) {
                    if (!a && !b)
                        return null;
                    return Set.intersect(a, b);
                })
            });
            //Tools.printMap(result, cfg);

        },

        transform: function () {
            var result = transformer.transform(this.root, this.opt);
            return result;
        }
    };


    ns.extract = function (ast, opt) {

        assert(ast.type == Syntax.Program || ast.type == Syntax.BlockStatement);

        var analysis = new UniformAnalysis(ast, opt);

        // Propagate and analyze
        analysis.analyzeBody(ast.type == Syntax.Program ? ast.body : ast);

        // Transform
        return analysis.transform();
    };


}(exports));

},{"../../base/common.js":140,"../utils/ast":137,"./evaluator.js":133,"./uniformTransformer.js":136,"analyses":46,"assert":25,"esgraph":58}],135:[function(require,module,exports){
(function (ns) {

    var walk = require('estraverse');
    var Syntax = walk.Syntax;
    var annotate = require("../../utils").annotate;

    function getConstructor(kind){
        switch(kind){
            case "Vec2": return "Shade.Vec2"; break;
            case "Vec3": return "Shade.Vec3"; break;
            case "Vec4": return "Shade.Vec4"; break;
            case "Mat3": return "Shade.Mat3"; break;
            case "Mat4": return "Shade.Mat4"; break;
            default: throw "Unsupported object kind in uniform expression argument: " + kind;
        }
    }


    function isMathCall(node) {
        return (node.callee.type === Syntax.MemberExpression && node.callee.object.type === Syntax.Identifier && node.callee.object.name === "Math");
    }

    function isVecMathCall(node) {
        if(!isMathCall(node))
            return false;
        var firstArgument = annotate(node.arguments[0]);
        return firstArgument.isVector();
    }

    var leaveVisitor = function (node, parent, variables, controller) {
        if (node.type == Syntax.MemberExpression) {
            var object = annotate(node.object);
            if (node.object.type == Syntax.Identifier && object.isUniformExpression()) {
                if(variables.hasOwnProperty(node.object.name)) {
                //console.log("Found: " + node.object.name, variables[node.object.name]);
                    node.object = variables[node.object.name].code;
                }
            }
            if (object.isGlobal() && node.property.type == Syntax.Identifier) {
                var property = annotate(node.property);

                if(property.isObject()){
                    // Is the accessed parameter is a vector or matrix , we have to
                    // wrap the typed array in the respective constructor
                    var constructor = getConstructor(property.getKind());
                    return {
                        type: Syntax.NewExpression,
                        callee: { type: Syntax.Identifier, name: constructor},
                        arguments:  [node]
                    }
                }
                else if((parent == node) || parent.type != Syntax.MemberExpression){
                    // Is the accessed parameter is a scalar value, we have to
                    // access the first entry of the input array
                    return {
                        type: Syntax.MemberExpression,
                        computed: true,
                        object: node,
                        property: {
                            type: Syntax.Literal,
                            value: 0
                        }
                    }
                }
            }
        }

        if (node.type == Syntax.CallExpression) {
            if (isVecMathCall(node)) {
                node.callee.object.name = "Math";
            }
        }


        if (node.type == Syntax.Identifier) {
            if (~[Syntax.MemberExpression, Syntax.FunctionDeclaration, Syntax.VariableDeclarator].indexOf(parent.type))
                return;

            if (parent.type == Syntax.NewExpression && parent.callee == node)
                return;

            // Not a variable on the right side
            if (parent.type == Syntax.AssignmentExpression && parent.left == node)
                return;

            if(variables.hasOwnProperty(node.name)) {
                //console.log("Found: " + node.name, this[node.name]);
                var code = variables[node.name].code;
                return code;
            }
        }

        if (node.type == Syntax.NewExpression) {
            if (node.callee.type == Syntax.Identifier) {
                var name = node.callee.name;
                switch(name) {
                    case "Vec2":
                    case "Vec3":
                    case "Vec4":
                        node.callee.name = "Shade." + name;
                        break;

                }
            }
        }

        if (node.type == Syntax.ReturnStatement) {
            var anno = annotate(node.argument);
            if(anno.isObject()){
                node.argument = { type: Syntax.CallExpression,
                    callee: {
                        type: Syntax.MemberExpression,
                        object: node.argument,
                        property: {type: Syntax.Identifier,
                            name: "_toFloatArray"
                        }
                    },
                    arguments: []
                };
                return node;
            }
        }
        }

    ns.transformUniformSetter = function (ast, variables) {
        return walk.replace(ast, { leave: function(node, parent) {
            return leaveVisitor(node, parent, variables, this);
        }});
    };


}(exports));

},{"../../utils":206,"estraverse":61}],136:[function(require,module,exports){
(function(ns){

    // Dependencies
    var traverse = require('estraverse'),
        common = require("./../../base/common.js"),
        codegen = require('escodegen'),
        setterGenerator = require('./uniformSetterTransformation.js');

    // Shortcuts
    var ANNO = common.ANNO,
        Syntax = traverse.Syntax;
    var counter = 1;
    function getCounter() {
        return counter++;
    }
    var UniformTransformer = function(opt){
        opt = opt || {};

        this.uniformExpressions = {};
        this.activeUniformVariables = {};
    };

    UniformTransformer.prototype = {
        transform: function(ast) {
            var that = this;
            return traverse.replace(ast, {
                enter: function(node) {
                    var anno = ANNO(node);
                    if(anno.isUniformExpression() && shouldGenerateUniformExpression(node, anno)) {
                        return that.generateUniformExpression(node);
                    }
                    if (node.type == Syntax.AssignmentExpression || (node.type == Syntax.VariableDeclarator && node.init)) {
                        var right = ANNO(node.right || node.init);
                        var leftNode = node.left || node.id;
                        if (right.isUniformExpression() && leftNode.type == Syntax.Identifier) {
                            that.activeUniformVariables[leftNode.name] = {
                                code: setterGenerator.transformUniformSetter(node.right || node.init, that.activeUniformVariables),
                                dependencies: right.getUniformDependencies()
                            }
                        }
                    }
                }
            });
        },
        getUniformExpression: function(uexp) {
            for(var name in this.uniformExpressions) {
                var other = this.uniformExpressions[name];
                if(uexp.code == other.code && equalDependencies(uexp.dependencies, other.dependencies))
                    return name;
            }
            return "";
        },
        generateUniformExpression: function(node) {
            var anno = ANNO(node);
            var uexp = {
                code: codegen.generate(setterGenerator.transformUniformSetter(node, this.activeUniformVariables)),
                dependencies: anno.getUniformDependencies()

            };

            var name = this.getUniformExpression(uexp);
            if(!name) {
                name = "u" + getCounter();
                this.uniformExpressions[name] = uexp;
            }
            var result = {
                type: Syntax.MemberExpression,
                object: {
                    type: Syntax.Identifier,
                    name: "uexp"
                },
                property: {
                    type: Syntax.Identifier,
                    name: name
                }
            }

            ANNO(result).copyFrom(anno);
            return result;
        }
    };

    function equalDependencies(a, b) {
        if(a.length != b.length)
            return false;
        a.forEach(function(elem) {
            if(b.indexOf(elem) == -1)
                return false;
        });
        return true;
    }

    function shouldGenerateUniformExpression(node, anno) {
        var costs = anno.getUniformCosts();
        return costs > 0;
    };

    var transform = ns.transform = function (ast, opt) {
        var transformer = new UniformTransformer(opt);
        var result = transformer.transform(ast);
        opt.uniformExpressions = transformer.uniformExpressions;
        return result;
    };

}(exports));

},{"./../../base/common.js":140,"./uniformSetterTransformation.js":135,"escodegen":54,"estraverse":61}],137:[function(require,module,exports){
"use strict";

var estraverse = require("estraverse");
var Syntax = estraverse.Syntax;
var Set = require("analyses").Set;

function findVariableDefinitions(ast, ignoreUninitializedDeclarations) {
	var definitions = new Set();
	estraverse.traverse(ast, {
		leave: function(node) {
			switch (node.type) {
			case Syntax.AssignmentExpression:
				if (node.left.type === Syntax.Identifier)
					definitions.add(node.left.name);
				break;
			case Syntax.VariableDeclarator:
				if (node.id.type === Syntax.Identifier
					&& (!ignoreUninitializedDeclarations || node.init))
					definitions.add(node.id.name);
				break;
			case Syntax.UpdateExpression:
				if (node.argument.type === Syntax.Identifier)
					definitions.add(node.argument.name);
				break;
			}
		}
	});
	return definitions;
}

function findVariableReferences(ast) {
	var references = new Set();
	estraverse.traverse(ast, {
		leave: function(node, parent) {
			switch (node.type) {
			case Syntax.AssignmentExpression:
				references = Set.union(references, findVariableReferences(node.right));
				this.break();
				break;
			case Syntax.Identifier:
				if (isVariableReference(node, parent))
					references.add(node.name);
				break;
			case Syntax.MemberExpression:
				if (isMemberReference(node, parent)) {
					if (isVariableReference(node.object, node))
						references.add(node.name);
					references.add(node.object.name + "." + node.property.name);
				}
				break;
			case Syntax.CallExpression:
				if (node.callee.type === Syntax.MemberExpression && parent
					&& parent.type !== Syntax.MemberExpression) {
					var object = node.callee.object;
					if (object.type == Syntax.Identifier)
						references.add(object.name)
				}

				break;
			}
		}
	});
	return references;
}

function isVariableReference(node, parent) {
    return isVariableName(node, parent) && parent.type !== Syntax.VariableDeclarator;
}

function isVariableName(node, parent) {
	if (node.type !== Syntax.Identifier)
        return false;

    if (parent) {
        if (parent.type === Syntax.FunctionDeclaration)
            return false;
        if (parent.type === Syntax.MemberExpression && parent.property === node)
            return false;
        if (parent.type === Syntax.NewExpression && parent.callee === node)
            return false;
        if (parent.type === Syntax.CallExpression && parent.callee === node)
            return false;
    }

    return true;
}

function isMemberReference(node, parent) {
    if (node.type !== Syntax.MemberExpression)
        return false;
    if (node.object.type !== Syntax.Identifier)
        return false;
    if (node.property.type !== Syntax.Identifier)
        return false;
    if (!parent)
        return false;
    if (parent.type === Syntax.CallExpression && parent.callee === node)
        return false;
    
    return true;
}


exports.findVariableDefinitions = findVariableDefinitions;
exports.findVariableReferences = findVariableReferences;
exports.isVariableReference = isVariableReference;
exports.isVariableName = isVariableName;

},{"analyses":46,"estraverse":61}],138:[function(require,module,exports){
"use strict";

var worklist = require("analyses");
var Set = worklist.Set;

function computePostDominators(cfg) {
    return worklist(cfg, function (input) {
        if (this.type || !this.astNode)
            return input;

        return Set.union(input, new Set([this]));
    }, {direction: "backward", start: new Set(), merge:  worklist.merge(Set.intersect)});
}

exports.computePostDominators = computePostDominators;
},{"analyses":46}],139:[function(require,module,exports){
"use strict";

//var common = require("./../base/common.js");
var utils = require("../../utils");
var estraverse = require('estraverse');
var Syntax = estraverse.Syntax;
var TYPES = require("../../type-system/constants").TYPES;

exports = module.exports = function (ast) {
    return estraverse.traverse(ast, {
        leave: function(node, parent) {
            var annotation = utils.annotate(node), right;
            if(!annotation.isValid()) {
                var errorInfo = annotation.getError();
                var error = new Error(errorInfo.message);
                error.loc = errorInfo.loc;
                throw error;
            }

            if(node.type == Syntax.VariableDeclarator) {
                if(node.init) {
                    right = utils.annotate(node.init);
                    annotation.copyFrom(right);
                }

                if (annotation.isNullOrUndefined()) {
                    utils.throwError(node, "No type could be calculated for ")
                }
            }
            if(node.type == Syntax.AssignmentExpression) {
                right = utils.annotate(node.right);
                annotation.copyFrom(right);
                annotation.clearUniformDependencies();

                if (annotation.isNullOrUndefined()) {
                    utils.throwError(node, "No type could be calculated for ")
                }
            } else if(node.type == Syntax.ExpressionStatement) {
                var exp = utils.annotate(node.expression);
                annotation.copyFrom(exp);
            }
        }
    });
};

},{"../../type-system/constants":200,"../../utils":206,"estraverse":61}],140:[function(require,module,exports){
(function (ns) {

    var annotate = require("../utils").annotate,
        estraverse = require('estraverse'),
        ErrorHandler = require("../type-system/errors.js");


    var Syntax = estraverse.Syntax;

    /**
     *
     * @param {object|Array.<object>} node
     * @param scope
     * @returns {TypeInfo|Array.<TypeInfo>}
     */
    ns.createTypeInfo = function (node, scope) {
        if(Array.isArray(node)) {
            return node.map(function (arg) {
                return scope.createTypeInfo(arg);
            });
        }
        var result = annotate(node);
        if (node.type == Syntax.Identifier || node.type == Syntax.ThisExpression) {
            var name = node.type == Syntax.Identifier ? node.name : 'this';
            var binding = scope.getBindingByName(name);
            if (binding) {
                result.copyFrom(binding);
                return binding;
            }
        }
        return result;
    };

    /**
     *
     * @param {object|Array.<object>} node
     * @param scope
     * @param {Array?} constants Additional array of constants
     * @param {boolean} check
     * @returns {TypeInfo|Array.<TypeInfo>}
     */
    ns.getTypeInfo = function getTypeInfo(node, scope, constants, check) {
        if(!node)
            return null;

        check = check == undefined ? false : check;

        if(Array.isArray(node)) {
            return node.map(function (arg) {
                return getTypeInfo(arg, scope, constants, check);
            });
        }
        var binding;
        if (node.type == Syntax.Identifier) {
            var name = node.name;

            if(name == 'undefined')
                return annotate(node);

            binding = scope.get(name);
            if(binding == undefined && check) {
                annotate(node).setInvalid(ErrorHandler.generateErrorInformation(node, ErrorHandler.ERROR_TYPES.REFERENCE_ERROR, name, "is not defined"));
                return annotate(node);
            }
            if(binding) {
                var result = annotate(node);
                result.copyFrom(binding);
                // A variable is dynamic per default. Only if it's listed in constant
                // we can assume a static value
                result.setDynamicValue();
                binding.setDynamicValue();
                if (constants && !binding.isNullOrUndefined()) {
                    var propagatedConstant = constants.filter(function (constant) {
                        return constant.name == name;
                    });

                    if (propagatedConstant.length) {
                        binding.setConstantValue(propagatedConstant[0].constant);
                        result.setConstantValue(propagatedConstant[0].constant);
                    }
                }
                return binding;

            }
        } else if (node.type == Syntax.ThisExpression) {
            binding = scope.get("this");
        }
        return binding || annotate(node);
    };



    ns.Syntax = Syntax;
    ns.VisitorOption = estraverse.VisitorOption;

    ns.ANNO = annotate;
    ns.getObjectReferenceFromNode = ns.getTypeInfo;


}(exports));

},{"../type-system/errors.js":201,"../utils":206,"estraverse":61}],141:[function(require,module,exports){
var Context = function (root, opt) {

    this.options = opt || {};

    /**
     * The root of the program to analyze
     * @type {*}
     */
    this.root = root;

    /**
     * To identify the main method of the shader
     * @type {*|string}
     */
    this.mainFunction = opt.mainFunction || "shade";

    /**
     * @type {Array.<Scope>}
     */
    this.scopeStack = opt.scope ? [opt.scope] : [];

    /**
     * Reserved keywords
     * @type {Array.<string>}
     */
    this.blockedNames = opt.blockedNames || [];

    /**
     * Used names
     * @type {Array.<string>}
     */
    this.usedNames = [];


    this.declaration = false;
};

Context.prototype = {
    getScope: function () {
        return this.scopeStack[this.scopeStack.length - 1];
    },
    pushScope: function (scope) {
        return this.scopeStack.push(scope);
    },
    popScope: function () {
        return this.scopeStack.pop();
    },
    inMainFunction: function () {
        return this.getScope().toString() == "global." + this.mainFunction;
    },
    setInDeclaration: function (inDeclaration) {
        this.declaration = inDeclaration;
    },
    inDeclaration: function () {
        return this.declaration;
    },
    getSafeName: function (baseName) {
        var index = 0, searchName = baseName;
        while (this.blockedNames.indexOf(searchName) != -1) {
            searchName = baseName + index++;
        }
        return searchName;
    },
    getSafeUniqueName: function (baseName) {
        var index = 1, searchName = baseName;
        while (!(this.usedNames.indexOf(searchName) == -1 && this.blockedNames.indexOf(searchName) == -1)) {
            searchName = baseName + index++;
        }
        this.usedNames.push(searchName);
        return searchName;
    }

};


module.exports = Context;


},{}],142:[function(require,module,exports){
(function(ns){

    ns.extend = require("lodash.assign");



    ns.deepExtend = function(destination, source) {
        for (var property in source) {
            var srcValue = source[property];
            var dstValue = destination[property];
            var copy;
            if (Array.isArray(srcValue)) {
                copy = dstValue || [];
                ns.deepExtend(copy, srcValue);
            } else if (typeof srcValue === "object" && srcValue !== null) {
                copy = dstValue || {};
                ns.deepExtend(copy, srcValue);
            } else {
                copy = srcValue;
            }
            destination[property] = copy;
        }
        return destination;
    };

    ns.shallowExtend = function(destination, source) {
        for (var property in source) {
            destination[property] = source[property];
        }
        return destination;
    };

    /**
     *
     * @param {Object} ctor Constructor
     * @param {Object} parent Parent class
     * @param {Object=} methods Methods to add to the class
     * @return {Object!}
     */
    ns.createClass = function(ctor, parent, methods) {
        methods = methods || {};
        if (parent) {
            /** @constructor */
            var F = function() {
            };
            F.prototype = parent.prototype;
            ctor.prototype = new F();
            ctor.prototype.constructor = ctor;
            ctor.superclass = parent.prototype;
        }
        for ( var m in methods) {
            ctor.prototype[m] = methods[m];
        }
        return ctor;
    };


}(exports))

},{"lodash.assign":81}],143:[function(require,module,exports){
(function(ns){

    ns.swizzleToIndex = function(swizzleKey){
        switch(swizzleKey){
            case 'x':case 'r' :case 's': return 0;
            case 'y':case 'g' :case 't': return 1;
            case 'z':case 'b' :case 'p': return 2;
            case 'w':case 'a' :case 'q': return 3;
        }
        throw new Error("Unknown swizzle key: '" + swizzleKey + "'");
    };
    ns.indexToSwizzle = function(index){
        switch(index){
            case 0: return 'x';
            case 1: return 'y';
            case 2: return 'z';
            case 3: return 'w';
        }
        throw new Error("Unknown swizzle index: '" + index + "'");
    };
    ns.swizzleSets = [
        ['x', 'y', 'z', 'w'],
        ['r', 'g', 'b', 'a'],
        ['s', 't', 'p', 'q']
    ];
    ns.swizzleOperators = {
        'Add' : '+',
        'Sub' : '-',
        'Mul' : '*',
        'Div' : '/'
    }


}(exports))

},{}],144:[function(require,module,exports){
(function(ns){

    var OneParameterNumberMethods = ["acos", "asin", "atan", "cos", "exp", "log", "round", "sin", "sqrt", "tan", "ceil", "floor"];

    function oneParameterFunction(name) {

        var func = Math[name];

        return function(vec) {
            var length = vec.length,
                result = new Float32Array(length);
            while(length--) {
                result[length] = func(vec[length]);
            }
            return result;
        }
    }

    var VecMath = {
        mix : function(x,y,a) {
            var length = x.length,
                result = new Float32Array(length),
                oneMinusA;

            if (Array.isArray(a) && a.length >= length) {
                while(length--) {
                    var a = a[length];
                    result[length] = x[length] * (1 - a) + y[length] * a;
                }
            } else {
                oneMinusA = 1 - a;
                while(length--) {
                    result[length] = x[length] * oneMinusA + y[length] * a;
                }
            }
            return result;

        },
        step : function(edge, x) {
            var length = edge.length,
                result = new Float32Array(length);

            while(length--) {
                var e = edge[length];
                var x0 = x[length];
                result[length] = (x0 <= e) ? 0 : 1;
            }
            return result;
        },
        smoothstep : function(edge0, edge1, x) {
            var length = edge0.length,
                result = new Float32Array(length);

            while(length--) {
                var e0 = edge0[length];
                var e1 = edge1[length];
                var x0 = x[length];
                var t = Math.clamp((x0 - e0) / (e1 - e0), 0.0, 1.0);
                result[length] = t * t * (3.0 - 2.0 * t);
            }
            return result;
        }
    };

    OneParameterNumberMethods.forEach(function(name) {
        VecMath[name] = oneParameterFunction(name);
    });

    ns.VecMath = VecMath;


}(exports));

},{}],145:[function(require,module,exports){
(function (ns) {

    // Dependencies
    var common = require("../../base/common.js");
    var Shade = require("../../interfaces.js");

    // Shortcuts
    var Syntax = common.Syntax;

    function generateFloat(value) {
        if (isNaN(value))
            throw Error("Internal: Expression generated NaN!");
        var result = '' + value;
        if (result.indexOf(".") == -1 && result.indexOf("e") == -1) {
            result += ".0";
        }
        return result;
    }

    /**
     *
     * @param controller
     * @param {object?} options
     * @constructor
     */
    var ExpressionHandler = function (controller, options) {
        this.controller = controller;
        this.controller.generateFloat = this.controller.generateFloat || generateFloat;
        this.options = options || {};
    };

    ExpressionHandler.prototype = {
        binary: function (node) {
            var result = this.expression(node);
            //noinspection FallthroughInSwitchStatementJS
            switch (node.type) {
                case Syntax.BinaryExpression:
                case Syntax.LogicalExpression:
                case Syntax.AssignmentExpression:
                case Syntax.ConditionalExpression:
                    result = "( " + result + " )";
                    break;
            }
            return result;
        },
        arguments: function (container) {
            var result = "(";
            container.forEach(function (arg, index) {
                result += this.expression(arg);
                if (index < container.length - 1) {
                    result += ", ";
                }
            }, this);
            return result + ")";
        },
        literal: function (extra, alternative) {
            var extra = extra || {},
                value = extra.staticValue !== undefined ? extra.staticValue : alternative;

            if (extra.type == Shade.TYPES.NUMBER)
                return this.controller.generateFloat(value); else
                return value;
        },
        expression: function (node) {
            if (!node) return "";

            var result = "";

            //noinspection FallthroughInSwitchStatementJS
            switch (node.type) {
                case Syntax.NewExpression:
                    result = this.controller.type(node.extra, { constructor: true });
                    result += this.arguments(node.arguments);
                    break;

                case Syntax.Literal:
                    result = this.literal(node.extra, node.value);
                    break;

                case Syntax.Identifier:
                    result = node.name;
                    break;

                case Syntax.AssignmentExpression:
                case Syntax.BinaryExpression:
                case Syntax.LogicalExpression:
                    result += this.binary(node.left);
                    result += " " + node.operator + " ";
                    result += this.binary(node.right);
                    break;
                case Syntax.UnaryExpression:
                    result = node.operator;
                    result += this.binary(node.argument);
                    break;

                case Syntax.CallExpression:
                    result = this.expression(node.callee);
                    result += this.arguments(node.arguments);
                    break;

                case Syntax.MemberExpression:
                    result = this.binary(node.object);
                    result += node.computed ? "[" : ".";
                    result += this.expression(node.property);
                    node.computed && (result += "]");
                    break;

                case Syntax.ConditionalExpression:
                    result = this.expression(node.test);
                    result += " ? ";
                    result += this.expression(node.consequent);
                    result += " : ";
                    result += this.expression(node.alternate);
                    break;

                case Syntax.UpdateExpression:
                    result = "";
                    if (node.isPrefix) {
                        result += node.operator;
                    }
                    result += this.expression(node.argument);
                    if (!node.isPrefix) {
                        result += node.operator;
                    }
                    break;
                case Syntax.ExpressionStatement:
                    result = this.expression(node.expression);
                    break;
                default:
                    result = "<unhandled: " + node.type + ">"
            }
            return result;
        },
        statement: function (node) {
            var result = "unhandled statement";
            switch (node.type) {
                case Syntax.ReturnStatement:
                    var hasArguments = node.argument;
                    result = "return" + (hasArguments ? (" " + this.expression(node.argument)) : "") + ";";
                    break;
            }
            return result;
        }
    };

    // Exports
    ns.ExpressionHandler = ExpressionHandler;


}(exports));

},{"../../base/common.js":140,"../../interfaces.js":188}],146:[function(require,module,exports){
"use strict";

var estraverse = require("estraverse");
var Syntax = estraverse.Syntax;

function createDeclaration(name, init) {
    return {
        type: Syntax.VariableDeclaration,
        declarations: [
            {
                type: Syntax.VariableDeclarator,
                id: {
                    type: Syntax.Identifier,
                    name: name
                },
                init: init !== undefined ? createIdentifierLiteralOrStripExpression(init) : undefined
            }
        ],
        kind: "var"
    }
}

function createBinaryExpression(lhs, rhs, operator) {
    return {
        type: Syntax.ExpressionStatement,
        expression: {
            type: operator === "=" ? Syntax.AssignmentExpression : Syntax.BinaryExpression,
            operator: operator,
            left: createIdentifierLiteralOrStripExpression(lhs),
            right: createIdentifierLiteralOrStripExpression(rhs),
        }
    }
}

function createMemberExpression(object, property, info) {
    return annotate({
        type: Syntax.MemberExpression,
        object: createIdentifierLiteralOrStripExpression(object),
        property: createIdentifierLiteralOrStripExpression(property),
    }, info);
}

function createIdentifierLiteralOrStripExpression(node) {
    if (typeof node === "string")
        return {
            type: Syntax.Identifier,
            name: node
        };
    if (typeof node === "number")
        return {
            type: Syntax.Literal,
            value: node
        };

    if (node.type === Syntax.ExpressionStatement)
        return node.expression;

    return node;
}

function createLiteral(value) {
    if (value < 0)
        return {
            type: Syntax.UnaryExpression,
            operator: "-",
            argument: {
                type: Syntax.Literal,
                value: -value
            },
            prefix: true
        };

    return {
        type: Syntax.Literal,
        value: value
    }
}

function createIdentifier(name, info) {
    return annotate({
        type: Syntax.Identifier,
        name: name
    }, info);
}

function createFunctionCall(fn, args, info) {
    args = args === undefined ? [] : args;
    args = Array.isArray(args) ? args : [args];
    return annotate({
        type: Syntax.CallExpression,
        callee: createIdentifierLiteralOrStripExpression(fn),
        arguments: args.map(createIdentifierLiteralOrStripExpression)
    }, info);
}

function createArrayAccess(object, index, info) {
    return annotate({
        type: Syntax.MemberExpression,
        computed: true,
        object: createIdentifierLiteralOrStripExpression(object),
        property: createIdentifierLiteralOrStripExpression(index)
    }, info);
}

function createArrayExpression(args, info) {
    return annotate({
        type: Syntax.ArrayExpression,
        elements: args,
    }, info)
}

function createNewExpression(name, args) {
    return {
        type: Syntax.NewExpression,
        callee: {
            type: Syntax.Identifier,
            name: name
        },
        arguments: args,
        extra: {
            type: "object",
            kind: name
        }
    }
}

function annotate(node, info) {
    node.extra = info;
    return node;
}

exports.createDeclaration = createDeclaration;
exports.createBinaryExpression = createBinaryExpression;
exports.createIdentifier = createIdentifier;
exports.createMemberExpression = createMemberExpression;
exports.createLiteral = createLiteral;
exports.createFunctionCall = createFunctionCall;
exports.createArrayAccess = createArrayAccess;
exports.createArrayExpression = createArrayExpression;
exports.createNewExpression = createNewExpression;

},{"estraverse":61}],147:[function(require,module,exports){
"use strict";

var assert = require("assert");

var estraverse = require("estraverse");
var Syntax = estraverse.Syntax;

var constants = require("./constants");
var simdMarker = require("./simd_marker");
var vectorizer = require("./vectorizer");
var simplify = require("./simplify");
var propagateConstants = require("./optimizer/constant_propagation");
var inlineInternalFunctions = require("./optimizer/inline_internal_functions");
var utils = require("../../utils");
var astUtils = require("./ast_utils");
var math = require("./math");
Shade.math = math;
Shade.texture = require("./texture");

var supportedTypes = constants.supportedTypes;
var typeSizeMap = constants.typeSizeMap;
var swizzleToIndexMap = constants.swizzleToIndexMap;
var columnToSingleSwizzle = constants.columnToSingleSwizzle;
var vectorIndexToSwizzleMap = constants.vectorIndexToSwizzleMap;
var matrixIndexToSwizzleMap = constants.matrixIndexToSwizzleMap;
var indexToSwizzleMap = constants.indexToSwizzleMap;

function FastlaneCompiler(opt) {
	opt = Object.assign({useSIMD: false}, opt);

	this._useSIMD = opt.useSIMD;
	this._counter = 0;
	this._isSIMDType = new Set();
}

FastlaneCompiler.prototype.compile = function(aast, opt) {
	var normalizer = require("./normalizer");
	normalizer.normalize(aast);
	if (this._useSIMD) {
		vectorizer.vectorize(aast.body[0].body);
		simdMarker.mark(aast.body[0].body);
	}

	aast = this.traverse(aast);

	var DeclarationSimplifier = require("../../analyze/sanitizer/declaration_simplifier");
	var RedundantBlocksRemover
		= require("../../analyze/sanitizer/redundant_blocks_remover");

	var declarationSimplifier = new DeclarationSimplifier();
	declarationSimplifier.execute(aast);

	inlineInternalFunctions(aast);

	estraverse.replace(aast, {
		enter: function(node) {
			if (node.type === Syntax.ExpressionStatement) {
				if (node.expression.type === Syntax.BlockStatement)
					return node.expression;
				if (node.expression.type === Syntax.AssignmentExpression && node.expression.right.type === Syntax.BlockStatement)
					return node.expression.right;
			}
		}
	});

	var redundantBlocksRemover = new RedundantBlocksRemover();
	declarationSimplifier.execute(aast);
	redundantBlocksRemover.execute(aast);

	propagateConstants(aast);

	estraverse.replace(aast, {
		enter: function (node) {
			if (node.type === Syntax.ExpressionStatement && node.expression.type === Syntax.EmptyStatement)
				return this.remove();
			if (node.type === Syntax.EmptyStatement)
				return this.remove();
		}
	});

    opt = opt || {};

    if (opt.name)
		aast.body[0].id.name = opt.name;

	if (opt.benchmark) {
		insertBenchmarking(aast);
	}

	return utils.toJavaScript(aast);
};

function insertBenchmarking(aast) {
	var t0Name = "__benchmark_t0";
	aast.body[0].body.body.unshift(astUtils.createDeclaration(t0Name, astUtils.createFunctionCall("performance.now")));
	estraverse.traverse(aast.body[0].body, {
		enter: function (node) {
			if (node.type === Syntax.ReturnStatement) {
				node.argument.properties.push({
					type: Syntax.Property,
					key: {type: Syntax.Identifier, name: "__time"},
					value: astUtils.createBinaryExpression(astUtils.createFunctionCall("performance.now"), t0Name, "-").expression
				})
			}
		}
	});
}

FastlaneCompiler.prototype.traverse = function(block) {
	var self = this;

	var currentBlock = null;
	var oldBlock = null;
	var parent = -1;
	block = estraverse.replace(block, {
		enter: function(node) {
			if (node.type === Syntax.BlockStatement) {
				oldBlock = currentBlock;
				currentBlock = node;
			}
			if (node.type === Syntax.ExpressionStatement) {
				parent = node;
			}
		},
		leave: function(node) {
			if (node.type === Syntax.BlockStatement)
				currentBlock = oldBlock;
			if (node.type === Syntax.CallExpression)
				node.arguments = node.arguments.filter(function(arg) {
					return !utils.annotate(arg).isUndefined();
				});
			if (node.type === Syntax.NewExpression)
				return self.handleNewExpression(
					node, currentBlock, currentBlock.body.indexOf(parent));
			if (node.type === Syntax.MemberExpression)
				return self.handleMemberExpression(
					node, currentBlock, currentBlock.body.indexOf(parent));
			if (node.type === Syntax.CallExpression
				&& node.callee.type === Syntax.MemberExpression)
				return self.handleMemberCallExpression(
					node, currentBlock, currentBlock.body.indexOf(parent));
			if (node.type === Syntax.ReturnStatement)
				return self.handleReturnStatement(
					node, currentBlock, currentBlock.body.indexOf(parent));
			if (node.type === Syntax.AssignmentExpression) {
				return self.handleAssignmentExpression(
					node, currentBlock, currentBlock.body.indexOf(parent));
			}
		}
	});

	return block;
};

FastlaneCompiler.prototype.handleNewExpression = function(node, currentBlock,
														  index) {
	var annotation = utils.annotate(node);
	var kind = annotation.getKind();
	if (supportedTypes.has(kind)) {
		var args = node.arguments;
		var size = typeSizeMap[kind];
		var tmp = this.createTmpVariableName();
		var init = null;
		if (node.__simd) {
			if (args.length === 1) {
				init = astUtils.createFunctionCall(
					"SIMD.Float32x4.splat",
					node.arguments[0],
					node.extra);
			} else {
				init = astUtils.createFunctionCall(
					"SIMD.Float32x4",
					this.convertArguments(node.arguments),
					node.extra);
			}
			this._isSIMDType.add(tmp);
		} else {
			if (args.length === 1) {
				for (var i = 1; i < size; ++i)
					args[i] = args[0];
			}
			init = astUtils.createArrayExpression(
				this.convertArguments(node.arguments),
				node.extra);
		}

		currentBlock.body.splice(
			index, 0,
			astUtils.createDeclaration(createOffsetVariableName(tmp), 0),
			astUtils.createDeclaration(tmp, init)
		);

		return astUtils.createIdentifier(tmp, node.extra);
	}
	return node;
};

FastlaneCompiler.prototype.createTmpVariableName = function() {
	return "__tmp" + this._counter++;
};

function createOffsetVariableName(name) {
	return "__offset" + name;
}

function isTmpVariable(name) {
	return name ? name.indexOf("__") === 0 : false;
}

FastlaneCompiler.prototype.convertArguments = function(values) {
	var scalarList = [];
	var self = this;
	values.forEach(function(value) {
		var valueAnnotation = utils.annotate(value);
		if (valueAnnotation.canNumber()) {
			scalarList.push(value);
		} else if (valueAnnotation.isVector()) {
			var kind = valueAnnotation.getKind();
			var size = typeSizeMap[kind];
			for (var i = 0; i < size; ++i)
				scalarList.push(
					self.swizzleToExtract(astUtils.createMemberExpression(
						value, indexToSwizzleMap[kind][i], {type: "number"})))
		} else {
			scalarList.push(value)
		}
	});

	return scalarList;
};

FastlaneCompiler.prototype.createFromValuesCall = function(kind, args,
														   typeSize) {
	if (args.length === 1) {
		for (var i = 1; i < typeSize; ++i)
			args[i] = args[0];
	}

	return astUtils.createArrayExpression(args, {type: "object", kind: kind});
};

FastlaneCompiler.prototype.handleMemberExpression = function(node, currentBlock,
															 index) {
	var resultAnnotation = utils.annotate(node);
	var objectAnnotation = utils.annotate(node.object);

	if (resultAnnotation.getType() === "any")
		return;

	if (objectAnnotation.isTexture()) {
		if (node.property.name === "width")
			node.property.name = "shape[0]";
		if (node.property.name === "height")
			node.property.name = "shape[1]";
	}

	if (node.computed) {
		if (objectAnnotation.isArray()) {
			var elementSize = determineLogicalElementSize(node.object);
			var offset = astUtils.createBinaryExpression(node.property,
														 elementSize, "*")
							 .expression;
			if (isTmpVariable(node.object.name)) {
				offset = astUtils.createBinaryExpression(
									 offset,
									 createOffsetVariableName(node.object.name),
									 "+")
							 .expression;
			}

			if (resultAnnotation.canNumber()) {
				return astUtils.createArrayAccess(node.object, offset)
			} else {
				var tmp = this.createTmpVariableName();
				currentBlock.body.splice(
					index, 0, astUtils.createDeclaration(tmp, node.object),
					astUtils.createDeclaration(createOffsetVariableName(tmp),
											   offset));
				return astUtils.createIdentifier(tmp, resultAnnotation.info);
			}
		}
		if (objectAnnotation.isTexture()) {
			var elementSize = objectAnnotation.info.width * 4;
			var offset = astUtils.createBinaryExpression(node.property,
														 elementSize, "*")
							 .expression;
			if (node.object.name && node.object.name.indexOf("__") === 0) {
				offset = astUtils.createBinaryExpression(
									 offset,
									 createOffsetVariableName(node.object.name),
									 "+")
							 .expression;
			}
			var tmp = this.createTmpVariableName();
			currentBlock.body.splice(
				index, 0, astUtils.createDeclaration(tmp, node.object),
				astUtils.createDeclaration(createOffsetVariableName(tmp),
										   offset));
			return astUtils.createIdentifier(tmp, resultAnnotation.info);
		}
	}

	if (!node.computed && supportedTypes.has(objectAnnotation.getKind())
		&& node.property.type === Syntax.Identifier)
		return this.swizzleToExtract(node);
};

function determineLogicalElementSize(object) {
	var annotation = utils.annotate(object);
	var elementType = annotation.getArrayElementType();
	var size = 1;

	while (elementType.extra.type === "array") {
		size *= elementType.extra.staticSize;
		elementType = elementType.extra.elements;
	}

	return size * typeSizeMap[elementType.extra.kind || elementType.extra.type];
}

FastlaneCompiler.prototype.swizzleToExtract = function(node) {
	var resultAnnotation = utils.annotate(node);
	var objectAnnotation = utils.annotate(node.object);

	var self = this;
	function swizzleToAccess(swizzle) {
		var index = swizzleToIndexMap[objectAnnotation.getKind()][swizzle];
		if (node.object.type === Syntax.Identifier) {
			if (self._isSIMDType.has(node.object.name)) {
				return astUtils.createFunctionCall("SIMD.Float32x4.extractLane", [node.object, index], {type: "number"})
			} else {
				return astUtils.createArrayAccess(
					node.object,
					astUtils.createBinaryExpression(
						createOffsetVariableName(node.object.name), index, "+"),
					{type: "number"});
			}
		}
		else {
			return astUtils.createArrayAccess(node.object, index, {type: "number"});
		}
	}

	if (resultAnnotation.isNumber()) {
		return swizzleToAccess(node.property.name);
	}

	if (resultAnnotation.isVector()) {
		if (objectAnnotation.isVector()) {
			var elements
				= node.property.name.split("").map(swizzleToAccess);
		} else if (objectAnnotation.isMatrix()) {
			var elements
				= columnToSingleSwizzle[node.property.name]
					  .split(",")
					  .slice(0, typeSizeMap[resultAnnotation.getKind()])
					  .map(swizzleToAccess);
		}
		return this.createFromValuesCall(resultAnnotation.getKind(), elements,
										 elements.length);
	}
};

FastlaneCompiler.prototype.handleAssignmentExpression = function(
	node, currentBlock, index) {
	var lhs = node.left;
	var rhs = node.right;
	var rhsAnnotation = utils.annotate(rhs);

	if (lhs.type === Syntax.Identifier && rhs.__simd || this._isSIMDType.has(rhs.name))
		this._isSIMDType.add(lhs.name);

	if (lhs.type === Syntax.Identifier && isTmpVariable(lhs.name)
		&& rhs.type === Syntax.Identifier
		&& rhs.name.indexOf("_call") !== -1) {

		var fnNode = null;
		estraverse.replace(currentBlock, {
			enter: function (node) {
				if (node.type === Syntax.AssignmentExpression && node.left.type === Syntax.Identifier && node.left.name === rhs.name) {
					node.right.callee.name += "Store";
					node.right.arguments.unshift(astUtils.createIdentifier(createOffsetVariableName(lhs.name)));
					node.right.arguments.unshift(lhs);
					fnNode = node;
					return {type: Syntax.EmptyStatement};
				}
			}
		});

		return fnNode;
	}

	if (lhs.type == Syntax.Identifier && isTmpVariable(lhs.name)) {
		var rhsKind = rhsAnnotation.getKind();
		var object = lhs;
		var objectAnnotation = utils.annotate(object);
		var body = [];
		if (objectAnnotation.isVector() || objectAnnotation.isMatrix()) {
			var varName = rhs.name;
			if (rhs.type !== Syntax.Identifier) {
				var tmp = this.createTmpVariableName();
				body.push(astUtils.createDeclaration(tmp, rhs));
				if (rhs.type === Syntax.Identifier && isTmpVariable(rhs.name))
					body.push(astUtils.createDeclaration(
						createOffsetVariableName(tmp),
						astUtils.createIdentifier(
							createOffsetVariableName(rhs.name))));
				else
					body.push(astUtils.createDeclaration(
						createOffsetVariableName(tmp), astUtils.createLiteral(0)));
				varName = tmp;
			}

			for (var i = 0; i < typeSizeMap[rhsKind]; ++i) {
				body.push(astUtils.createBinaryExpression(
					astUtils.createArrayAccess(
						object,
						astUtils.createBinaryExpression(
							createOffsetVariableName(object.name), i, "+")),
					this.swizzleToExtract(astUtils.createMemberExpression(
						astUtils.createIdentifier(
							varName, {type: "object", kind: rhsKind}),
						rhsAnnotation.isMatrix()
							? matrixIndexToSwizzleMap[rhsKind][i]
							: vectorIndexToSwizzleMap[i],
						{type: "number"})),
					"="))
			}
			return {type: Syntax.BlockStatement, body: body};
		}
	}

	if (lhs.type === Syntax.Identifier) {
		if (rhsAnnotation.isArray() || rhs.type === Syntax.ArrayExpression || (rhs.type === Syntax.CallExpression && rhs.callee.type === Syntax.Identifier && rhs.callee.name.indexOf("Shade.") !== -1)) {
			var offset = astUtils.createLiteral(0);
			if (rhs.name && rhs.name.indexOf("__") === 0) {
				offset = astUtils.createIdentifier("__offset" + rhs.name);
			}
			var varName = lhs.name;
			currentBlock.body.splice(
				index, 0,
				astUtils.createDeclaration("__offset" + varName, offset));
			return node;
		} else if (rhsAnnotation.isMatrix() || rhsAnnotation.isVector()) {
			if (rhs.name && rhs.name.indexOf("__") === 0) {
				var offset = astUtils.createIdentifier("__offset" + rhs.name);
				var varName = lhs.name;
				currentBlock.body.splice(
					index, 0,
					astUtils.createDeclaration("__offset" + varName, offset));
				if (this._isSIMDType.has(rhs.name))
					this._isSIMDType.add(lhs.name);
				return node;
			}
		}
	}
};

FastlaneCompiler.prototype.handleMemberCallExpression = function(node) {
	var lhs = node.callee.object;
	var lhsAnnotation = utils.annotate(lhs);
	var resultAnnotation = utils.annotate(node);

	if (lhsAnnotation.isTexture()) {
		var fnName = "Shade.texture.sample";
		if (node.__simd) {
			fnName += "SIMD";
			if (lhs.extra.isByteTexture)
				fnName += "Byte";
		}
		var uv = node.arguments[0];
		if (uv.type === Syntax.Identifier && isTmpVariable(uv.name)) {
			var newNode = astUtils.createFunctionCall(
				fnName,
				[lhs, uv, createOffsetVariableName(uv.name)],
				resultAnnotation.info);
			newNode.__simd = node.__simd;
			return newNode;
		}

		var newNode = astUtils.createFunctionCall(fnName,
										   [lhs, uv, astUtils.createLiteral(0)],
										   resultAnnotation.info);
		newNode.__simd = node.__simd;
		return newNode;
	}

	if (!lhsAnnotation.isVector() && !lhsAnnotation.isMatrix())
		return node;

	var lhsType = lhsAnnotation.getKind();
	var fun = node.callee.property.name;

	if (fun === "mul" && lhsAnnotation.isMatrix()
		&& resultAnnotation.isVector())
		fun = "mulVec";

	var args = node.arguments;

	if (node.__simd && math[lhsAnnotation.getKind().toLowerCase()][fun + "SIMD"]) {
		if (args.length === 1 && utils.annotate(args[0]).canNumber()
			&& fun === "mul") {
			fun = "scale";
		}
		fun = fun + "SIMD";
		var loadFunctionName = "SIMD.Float32x4.load" + (typeSizeMap[lhsType] !== 4 ? typeSizeMap[lhsType] : "");
		var newArgs = [];
		if (this._isSIMDType.has(lhs.name)) {
			newArgs.push(lhs.name);
		}
		else {
			if (lhs.type === Syntax.Identifier) {
				if (lhsAnnotation.isVector()) {
					newArgs.push(astUtils.createFunctionCall(
						loadFunctionName,
						[lhs.name, createOffsetVariableName(lhs.name)]));
				}
				else {
					newArgs.push(lhs.name);
					newArgs.push(createOffsetVariableName(lhs.name));
				}
			} else {
				newArgs.push(lhs);
				newArgs.push(0);
			}
		}

		if (args.length > 0) {
			if (this._isSIMDType.has(args[0].name)) {
				newArgs.push(args[0].name);
			}
			else {
				if (args[0].type === Syntax.Identifier) {
					if (utils.annotate(args[0]).isVector()) {
						newArgs.push(astUtils.createFunctionCall(
							"SIMD.Float32x4.load" + (typeSizeMap[utils.annotate(args[0]).getKind()] !== 4 ? typeSizeMap[utils.annotate(args[0]).getKind()] : ""),
							[args[0], createOffsetVariableName(args[0].name)]));
					}
					else {
						newArgs.push(args[0].name);
						newArgs.push(createOffsetVariableName(args[0].name));
					}

				} else {
					newArgs.push(args[0]);
				}
			}
		}

		args = newArgs;
	} else {
		if (args.length !== 0) {
			if (args.length === 1 && utils.annotate(args[0]).canNumber()
				&& fun === "mul") {
				fun = "scale";
				var rhs = args[0];
				args.push(rhs);
			} else {
				var arg = this.convertFunctionArguments(
					args, lhsAnnotation.getKind());
				if (arg.type === Syntax.Identifier) {
					args = [arg, "__offset" + arg.name];
				} else {
					args = [arg, 0];
				}
			}
		}

		if (lhs.type === Syntax.Identifier) {
			args.unshift("__offset" + lhs.name);
			args.unshift(lhs.name);
		} else {
			args.unshift(0);
			args.unshift(lhs);
		}
	}

	var newNode = astUtils.createFunctionCall("Shade.math." + lhsType.toLowerCase()
										   + "." + fun,
									   args, resultAnnotation.info);
	newNode.__simd = node.__simd;
	return newNode;
};

FastlaneCompiler.prototype.convertFunctionArguments = function(args, vecType) {
	if (args.length === 0)
		return;

	if (args.length === 1) {
		if (utils.annotate(args[0]).canNumber()) {
			var scalar = args[0];
			var newArgs = [];
			for (var i = 0; i < typeSizeMap[vecType]; ++i)
				newArgs.push(scalar);
			return this.createFromValuesCall(vecType, newArgs,
											 typeSizeMap[vecType]);
		} else
			return args[0]
	}

	return this.createFromValuesCall(vecType, this.convertArguments(args),
									 typeSizeMap[vecType]);
};

FastlaneCompiler.prototype.handleReturnStatement = function(node) {
	// todo: handle array return
};

exports = module.exports = FastlaneCompiler;

},{"../../analyze/sanitizer/declaration_simplifier":109,"../../analyze/sanitizer/redundant_blocks_remover":110,"../../utils":206,"./ast_utils":146,"./constants":148,"./math":150,"./normalizer":151,"./optimizer/constant_propagation":152,"./optimizer/inline_internal_functions":153,"./simd_marker":161,"./simplify":162,"./texture":163,"./vectorizer":164,"assert":25,"estraverse":61}],148:[function(require,module,exports){
"use strict";

exports.supportedTypes = new Set(["Vec2", "Vec3", "Vec4", "Mat2", "Mat3", "Mat4"]);
exports.typeSizeMap = {
    "int": 1,
    "number": 1,
    "Vec2": 2,
    "Vec3": 3,
    "Vec4": 4,
    "Mat2": 4,
    "Mat3": 9,
    "Mat4": 16
};

var swizzleToIndexMap = {
    "Mat2": {
        "m11": 0,
        "m21": 1,
        "m12": 2,
        "m22": 3
    },
    "Mat3": {
        "m11": 0,
        "m21": 1,
        "m31": 2,
        "m12": 3,
        "m22": 4,
        "m32": 5,
        "m13": 6,
        "m23": 7,
        "m33": 8
    },
    "Mat4": {
        "m11": 0,
        "m21": 1,
        "m31": 2,
        "m41": 3,
        "m12": 4,
        "m22": 5,
        "m32": 6,
        "m42": 7,
        "m13": 8,
        "m23": 9,
        "m33": 10,
        "m43": 11,
        "m14": 12,
        "m24": 13,
        "m34": 14,
        "m44": 15
    }
};

swizzleToIndexMap.Vec2 = swizzleToIndexMap.Vec3 = swizzleToIndexMap.Vec4 = {
    "x": 0,
    "y": 1,
    "z": 2,
    "w": 3,
    "r": 0,
    "g": 1,
    "b": 2,
    "a": 3,
    "s": 0,
    "t": 1,
    "p": 2,
    "q": 3
};

exports.swizzleToIndexMap = swizzleToIndexMap;

exports.columnToSingleSwizzle = {
    c1: "m11,m21,m31,m41",
    c2: "m12,m22,m32,m42",
    c3: "m13,m23,m33,m43",
    c4: "m14,m24,m34,m44"
};

exports.vectorIndexToSwizzleMap = {0: "x", 1: "y", 2: "z", 3: "w"};

exports.matrixIndexToSwizzleMap = {
    "Mat2": {
        0: "m11",
        1: "m21",
        2: "m12",
        3: "m22"
    },
    "Mat3": {
        0: "m11",
        1: "m21",
        2: "m31",
        3: "m12",
        4: "m22",
        5: "m32",
        6: "m13",
        7: "m23",
        8: "m33"
    },
    "Mat4": {
        0: "m11",
        1: "m21",
        2: "m31",
        3: "m41",
        4: "m12",
        5: "m22",
        6: "m32",
        7: "m42",
        8: "m13",
        9: "m23",
        10: "m33",
        11: "m43",
        12: "m14",
        13: "m24",
        14: "m34",
        15: "m44"
    }
};

var indexToSwizzleMap = {
    "Mat2": {
        0: "m11",
        1: "m21",
        2: "m12",
        3: "m22"
    },
    "Mat3": {
        0: "m11",
        1: "m21",
        2: "m31",
        3: "m12",
        4: "m22",
        5: "m32",
        6: "m13",
        7: "m23",
        8: "m33"
    },
    "Mat4": {
        0: "m11",
        1: "m21",
        2: "m31",
        3: "m41",
        4: "m12",
        5: "m22",
        6: "m32",
        7: "m42",
        8: "m13",
        9: "m23",
        10: "m33",
        11: "m43",
        12: "m14",
        13: "m24",
        14: "m34",
        15: "m44"
    }
};
indexToSwizzleMap.Vec2 = indexToSwizzleMap.Vec3 = indexToSwizzleMap.Vec4 = {
    0: "x",
    1: "y",
    2: "z",
    3: "w"
};
exports.indexToSwizzleMap = indexToSwizzleMap;
},{}],149:[function(require,module,exports){
"use strict";

var annotate = require("../../utils/annotate");
var typeSizeMap = require("./constants").typeSizeMap;

exports = module.exports = function (node) {
    var annotation = annotate(node);
    var elementType = annotation.getArrayElementType();
    var size = 1;

    while (elementType.extra.type === "array") {
        size *= elementType.extra.staticSize;
        elementType = elementType.extra.elements;
    }

    return size * typeSizeMap[elementType.extra.kind || elementType.extra.type];
}

},{"../../utils/annotate":204,"./constants":148}],150:[function(require,module,exports){
"use strict";

var vec2 = {};
vec2.add = function add(vec, vecOffset, vec2, vecOffset2) {
    var x1 = vec[vecOffset], y1 = vec[vecOffset + 1];
    var x2 = vec2[vecOffset2], y2 = vec2[vecOffset2 + 1];
    return [x1 + x2, y1 + y2];
};

vec2.addStore = function addStore(result, resultOffset, vec, vecOffset, vec2, vecOffset2) {
    var x1 = vec[vecOffset], y1 = vec[vecOffset + 1];
    var x2 = vec2[vecOffset2], y2 = vec2[vecOffset2 + 1];``
    result[resultOffset] = x1 + x2;
    result[resultOffset + 1] = y1 + y2;
};

var vec3 = {};
vec3.add = function add(vec, vecOffset, vec2, vecOffset2) {
    var x1 = vec[vecOffset + 0], y1 = vec[vecOffset + 1], z1 = vec[vecOffset + 2];
    var x2 = vec2[vecOffset2 + 0], y2 = vec2[vecOffset2 + 1], z2 = vec2[vecOffset2 + 2];
    return [x1 + x2, y1 + y2, z1 + z2];
};

// vec3.addSIMD = function add(vec, vec2) {
//     return SIMD.Float32x4.add(vec, vec2);
// };

vec3.addStore = function addStore(result, resultOffset, vec, vecOffset, vec2, vecOffset2) {
    var x1 = vec[vecOffset + 0], y1 = vec[vecOffset + 1], z1 = vec[vecOffset + 2];
    var x2 = vec2[vecOffset2 + 0], y2 = vec2[vecOffset2 + 1], z2 = vec2[vecOffset2 + 2];
    result[resultOffset] = x1 + x2;
    result[resultOffset + 1] = y1 + y2;
    result[resultOffset + 2] = z1 + z2;
};

// vec3.addSIMDStore = function add(result, resultOffset, vec, vec2) {
//     SIMD.Float32x4.store3(result, resultOffset, SIMD.Float32x4.add(vec, vec2));
// };

vec3.sub = function sub(vec, vecOffset, vec2, vecOffset2) {
    var x1 = vec[vecOffset + 0], y1 = vec[vecOffset + 1], z1 = vec[vecOffset + 2];
    var x2 = vec2[vecOffset2 + 0], y2 = vec2[vecOffset2 + 1], z2 = vec2[vecOffset2 + 2];
    return [x1 - x2, y1 - y2, z1 - z2];
};

vec3.subStore = function subStore(result, resultOffset, vec, vecOffset, vec2, vecOffset2) {
    var x1 = vec[vecOffset + 0], y1 = vec[vecOffset + 1], z1 = vec[vecOffset + 2];
    var x2 = vec2[vecOffset2 + 0], y2 = vec2[vecOffset2 + 1], z2 = vec2[vecOffset2 + 2];
    result[resultOffset] = x1 - x2;
    result[resultOffset + 1] = y1 - y2;
    result[resultOffset + 2] = z1 - z2;
};

// vec3.subSIMD = function sub(vec, vec2) {
//     return SIMD.Float32x4.sub(vec, vec2);
// };

vec3.mul = function mul(vec, vecOffset, vec2, vecOffset2) {
    var x1 = vec[vecOffset + 0], y1 = vec[vecOffset + 1], z1 = vec[vecOffset + 2];
    var x2 = vec2[vecOffset2 + 0], y2 = vec2[vecOffset2 + 1], z2 = vec2[vecOffset2 + 2];
    return [x1 * x2, y1 * y2, z1 * z2];
};

// vec3.mulSIMD = function mul(vec, vec2) {
//     return SIMD.Float32x4.mul(vec, vec2);
// };

vec3.normalize = function normalize(vec, vecOffset) {
    var x1 = vec[vecOffset + 0], y1 = vec[vecOffset + 1], z1 = vec[vecOffset + 2];
    var norm = 1 / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1);
    return [x1 * norm, y1 * norm, z1 * norm];
};

vec3.normalizeStore = function normalizeStore(result, resultOffset, vec, vecOffset) {
    var x1 = vec[vecOffset + 0], y1 = vec[vecOffset + 1], z1 = vec[vecOffset + 2];
    var norm = 1 / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1);
    result[resultOffset] = x1 * norm;
    result[resultOffset + 1] = y1 * norm;
    result[resultOffset + 2] = z1 * norm;
};

vec3.scale = function scale(vec, vecOffset, scalar) {
    return [vec[vecOffset] * scalar, vec[vecOffset + 1] * scalar, vec[vecOffset + 2] * scalar];
};

vec3.scaleStore = function scale(result, resultOffset, vec, vecOffset, scalar) {
    result[resultOffset] = vec[vecOffset] * scalar;
    result[resultOffset + 1] = vec[vecOffset + 1] * scalar;
    result[resultOffset + 2] = vec[vecOffset + 2] * scalar;
};

// vec3.scaleSIMD = function scale(vec, scalar) {
//     return SIMD.Float32x4.mul(vec, SIMD.Float32x4.splat(scalar));
// };

// vec3.scaleSIMDStore = function scale(result, offset, vec, scalar) {
//     SIMD.Float32x4.store3(result, offset, SIMD.Float32x4.mul(vec, SIMD.Float32x4.splat(scalar)));
// };

var vec4 = {};
vec4.add = function add(vec, vecOffset, vec2, vecOffset2) {
    var x1 = vec[vecOffset], y1 = vec[vecOffset + 1], z1 = vec[vecOffset + 2], w1 = vec[vecOffset + 3];
    var x2 = vec2[vecOffset2], y2 = vec2[vecOffset2 + 1], z2 = vec2[vecOffset2 + 2], w2 = vec2[vecOffset2 + 3];
    return [x1 + x2, y1 + y2, z1 + z2, w1 + w2];
};

vec4.addSIMD = function add(vec, vec2) {
    return SIMD.Float32x4.add(vec, vec2);
};

vec4.addStore = function addStore(result, resultOffset, vec, vecOffset, vec2, vecOffset2) {
    var x1 = vec[vecOffset], y1 = vec[vecOffset + 1], z1 = vec[vecOffset + 2], w1 = vec[vecOffset + 3];
    var x2 = vec2[vecOffset2], y2 = vec2[vecOffset2 + 1], z2 = vec2[vecOffset2 + 2], w2 = vec2[vecOffset2 + 3];
    result[resultOffset] = x1 + x2;
    result[resultOffset + 1] = y1 + y2;
    result[resultOffset + 2] = z1 + z2;
    result[resultOffset + 3] = w1 + w2;
};

vec4.sub = function sub(vec, vecOffset, vec2, vecOffset2) {
    var x1 = vec[vecOffset], y1 = vec[vecOffset + 1], z1 = vec[vecOffset + 2], w1 = vec[vecOffset + 3];
    var x2 = vec2[vecOffset2], y2 = vec2[vecOffset2 + 1], z2 = vec2[vecOffset2 + 2], w2 = vec2[vecOffset2 + 3];
    return [x1 - x2, y1 - y2, z1 - z2, w1 - w2];
};

vec4.subSIMD = function sub(vec, vec2) {
    return SIMD.Float32x4.sub(vec, vec2);
};

vec4.subStore = function subStore(result, resultOffset, vec, vecOffset, vec2, vecOffset2) {
    var x1 = vec[vecOffset], y1 = vec[vecOffset + 1], z1 = vec[vecOffset + 2], w1 = vec[vecOffset + 3];
    var x2 = vec2[vecOffset2], y2 = vec2[vecOffset2 + 1], z2 = vec2[vecOffset2 + 2], w2 = vec2[vecOffset2 + 3];
    result[resultOffset] = x1 - x2;
    result[resultOffset + 1] = y1 - y2;
    result[resultOffset + 2] = z1 - z2;
    result[resultOffset + 3] = w1 - w2;
};

vec4.mul = function mul(vec, vecOffset, vec2, vecOffset2) {
    return [vec[vecOffset + 0] * vec2[vecOffset2 + 0], vec[vecOffset + 1] * vec2[vecOffset2 + 1], vec[vecOffset + 2] * vec2[vecOffset2 + 2], vec[vecOffset + 3] * vec2[vecOffset2 + 3]];
};

vec4.mulSIMD = function mul(vec, vec2) {
    return SIMD.Float32x4.mul(vec, vec2);
};

vec4.div = function mul(vec, vecOffset, vec2, vecOffset2) {
    return [vec[vecOffset + 0] / vec2[vecOffset2 + 0], vec[vecOffset + 1] / vec2[vecOffset2 + 1], vec[vecOffset + 2] / vec2[vecOffset2 + 2], vec[vecOffset + 3] / vec2[vecOffset2 + 3]];
};

vec4.divSIMD = function mul(vec, vec2) {
    return SIMD.Float32x4.div(vec, vec2);
};

vec4.scale = function scale(vec, vecOffset, scalar) {
    return [vec[vecOffset] * scalar, vec[vecOffset + 1] * scalar, vec[vecOffset + 2] * scalar, vec[vecOffset + 3] * scalar];
};

vec4.scaleSIMD = function scale(vec, scalar) {
    return SIMD.Float32x4.mul(vec, SIMD.Float32x4.splat(scalar));
};

vec4.sqrtSIMD = function scale(vec) {
    return SIMD.Float32x4.sqrt(vec);
};

vec4.sinSIMD = function scale(vec) {
    var PI = SIMD.Float32x4.splat(3.1415926536);
    var PI2 = SIMD.Float32x4.splat(2 * 3.1415926536);
    vec = SIMD.Float32x4.add(vec, PI);
    var x = SIMD.Float32x4.sub(vec, SIMD.Float32x4.mul(SIMD.Float32x4.fromInt32x4(SIMD.Int32x4.fromFloat32x4(SIMD.Float32x4.div(vec, PI2))), PI2));
    var ltzero = SIMD.Float32x4.lessThan(x, SIMD.Float32x4.splat(0));
    var normed = SIMD.Float32x4.select(ltzero, SIMD.Float32x4.add(x, PI), SIMD.Float32x4.sub(x, PI));

    var square  = SIMD.Float32x4.mul(normed, normed);

    return SIMD.Float32x4.mul(normed, SIMD.Float32x4.add(SIMD.Float32x4.splat(0.99997937679290771484375), SIMD.Float32x4.mul(square, SIMD.Float32x4.add(SIMD.Float32x4.splat(-0.166624367237091064453125), SIMD.Float32x4.mul(square, SIMD.Float32x4.add(SIMD.Float32x4.splat(8.30897875130176544189453125e-3), SIMD.Float32x4.mul(square, SIMD.Float32x4.add(SIMD.Float32x4.splat(-1.92649182281456887722015380859375e-4), SIMD.Float32x4.mul(SIMD.Float32x4.splat(2.147840177713078446686267852783203125e-6), square)))))))));
};

vec4.cosSIMD = function scale(vec) {
    var PI = SIMD.Float32x4.splat(3.1415926536);
    var PI2 = SIMD.Float32x4.splat(2 * 3.1415926536);
    vec = SIMD.Float32x4.add(vec, PI);
    var x = SIMD.Float32x4.sub(vec, SIMD.Float32x4.mul(SIMD.Float32x4.fromInt32x4(SIMD.Int32x4.fromFloat32x4(SIMD.Float32x4.div(vec, PI2))), PI2));
    var ltzero = SIMD.Float32x4.lessThan(x, SIMD.Float32x4.splat(0));
    var normed = SIMD.Float32x4.select(ltzero, SIMD.Float32x4.add(x, PI), SIMD.Float32x4.sub(x, PI));
    var square  = SIMD.Float32x4.mul(normed, normed);

    return SIMD.Float32x4.add(SIMD.Float32x4.splat(0.999959766864776611328125), SIMD.Float32x4.mul(square, SIMD.Float32x4.add(SIMD.Float32x4.splat(-0.4997930824756622314453125), SIMD.Float32x4.mul(square, SIMD.Float32x4.add(SIMD.Float32x4.splat(4.1496001183986663818359375e-2), SIMD.Float32x4.mul(square, SIMD.Float32x4.add(SIMD.Float32x4.splat(-1.33926304988563060760498046875e-3), SIMD.Float32x4.mul(SIMD.Float32x4.splat(1.8791708498611114919185638427734375e-5), square))))))));
};

var mat3 = {};

var mat4 = {};
mat4.mulVec = function mulVec(mat, matOffset, vec, vecOffset) {
    var x = vec[vecOffset + 0], y = vec[vecOffset + 1], z = vec[vecOffset + 2], w = vec[vecOffset + 3];
    return [
    mat[matOffset + 0] * x + mat[matOffset + 4] * y + mat[matOffset + 8] * z + mat[matOffset + 12] * w,
    mat[matOffset + 1] * x + mat[matOffset + 5] * y + mat[matOffset + 9] * z + mat[matOffset + 13] * w,
    mat[matOffset + 2] * x + mat[matOffset + 6] * y + mat[matOffset + 10] * z + mat[matOffset + 14] * w,
    mat[matOffset + 3] * x + mat[matOffset + 7] * y + mat[matOffset + 11] * z + mat[matOffset + 15] * w,
    ]
};

mat4.mulVecStore = function mulVec(result, resultOffset, mat, matOffset, vec, vecOffset) {
    var x = vec[vecOffset + 0], y = vec[vecOffset + 1], z = vec[vecOffset + 2], w = vec[vecOffset + 3];
    result[resultOffset] = mat[matOffset + 0] * x + mat[matOffset + 4] * y + mat[matOffset + 8] * z + mat[matOffset + 12] * w;
    result[resultOffset + 1] = mat[matOffset + 1] * x + mat[matOffset + 5] * y + mat[matOffset + 9] * z + mat[matOffset + 13] * w;
    result[resultOffset + 2] = mat[matOffset + 2] * x + mat[matOffset + 6] * y + mat[matOffset + 10] * z + mat[matOffset + 14] * w;
    result[resultOffset + 3] = mat[matOffset + 3] * x + mat[matOffset + 7] * y + mat[matOffset + 11] * z + mat[matOffset + 15] * w;
};

mat4.mulVecSIMD = function mulVec(mat, offset, vec) {
    var a0 = SIMD.Float32x4.load(mat, offset);
    var a1 = SIMD.Float32x4.load(mat, offset + 4);
    var a2 = SIMD.Float32x4.load(mat, offset + 8);
    var a3 = SIMD.Float32x4.load(mat, offset + 12);
    return SIMD.Float32x4.add(
        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0), a0),
        SIMD.Float32x4.add(
            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1), a1),
            SIMD.Float32x4.add(
                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2), a2),
                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(vec, 3, 3, 3, 3), a3))));
};

mat4.mulVecSIMDStore = function mulVec(result, resultOffset, mat, offset, vec) {
    var a0 = SIMD.Float32x4.load(mat, offset);
    var a1 = SIMD.Float32x4.load(mat, offset + 4);
    var a2 = SIMD.Float32x4.load(mat, offset + 8);
    var a3 = SIMD.Float32x4.load(mat, offset + 12);
    SIMD.Float32x4.store(result, resultOffset, SIMD.Float32x4.add(
        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0), a0),
        SIMD.Float32x4.add(
            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1), a1),
            SIMD.Float32x4.add(
                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2), a2),
                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(vec, 3, 3, 3, 3), a3)))));
};

mat4.mul = function mul(mat, offset1, mat2, offset2) {
    var a11 = mat[offset1];
    var a21 = mat[offset1 + 1];
    var a31 = mat[offset1 + 2];
    var a41 = mat[offset1 + 3];
    var a12 = mat[offset1 + 4];
    var a22 = mat[offset1 + 5];
    var a32 = mat[offset1 + 6];
    var a42 = mat[offset1 + 7];
    var a13 = mat[offset1 + 8];
    var a23 = mat[offset1 + 9];
    var a33 = mat[offset1 + 10];
    var a43 = mat[offset1 + 11];
    var a14 = mat[offset1 + 12];
    var a24 = mat[offset1 + 13];
    var a34 = mat[offset1 + 14];
    var a44 = mat[offset1 + 15];

    var b11 = mat2[offset2];
    var b21 = mat2[offset2 + 1];
    var b31 = mat2[offset2 + 2];
    var b41 = mat2[offset2 + 3];
    var b12 = mat2[offset2 + 4];
    var b22 = mat2[offset2 + 5];
    var b32 = mat2[offset2 + 6];
    var b42 = mat2[offset2 + 7];
    var b13 = mat2[offset2 + 8];
    var b23 = mat2[offset2 + 9];
    var b33 = mat2[offset2 + 10];
    var b43 = mat2[offset2 + 11];
    var b14 = mat2[offset2 + 12];
    var b24 = mat2[offset2 + 13];
    var b34 = mat2[offset2 + 14];
    var b44 = mat2[offset2 + 15];

    var dest = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    dest[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
    dest[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
    dest[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
    dest[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;

    dest[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
    dest[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
    dest[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
    dest[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;

    dest[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
    dest[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
    dest[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
    dest[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;

    dest[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
    dest[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
    dest[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
    dest[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

    return dest;
};

mat4.mulStore = function mulStore(result, resultOffset, mat, offset, mat2, offset2) {
    var a11 = mat[offset];
    var a21 = mat[offset + 1];
    var a31 = mat[offset + 2];
    var a41 = mat[offset + 3];
    var a12 = mat[offset + 4];
    var a22 = mat[offset + 5];
    var a32 = mat[offset + 6];
    var a42 = mat[offset + 7];
    var a13 = mat[offset + 8];
    var a23 = mat[offset + 9];
    var a33 = mat[offset + 10];
    var a43 = mat[offset + 11];
    var a14 = mat[offset + 12];
    var a24 = mat[offset + 13];
    var a34 = mat[offset + 14];
    var a44 = mat[offset + 15];

    var b11 = mat2[offset2];
    var b21 = mat2[offset2 + 1];
    var b31 = mat2[offset2 + 2];
    var b41 = mat2[offset2 + 3];
    var b12 = mat2[offset2 + 4];
    var b22 = mat2[offset2 + 5];
    var b32 = mat2[offset2 + 6];
    var b42 = mat2[offset2 + 7];
    var b13 = mat2[offset2 + 8];
    var b23 = mat2[offset2 + 9];
    var b33 = mat2[offset2 + 10];
    var b43 = mat2[offset2 + 11];
    var b14 = mat2[offset2 + 12];
    var b24 = mat2[offset2 + 13];
    var b34 = mat2[offset2 + 14];
    var b44 = mat2[offset2 + 15];

    result[resultOffset] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
    result[resultOffset + 1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
    result[resultOffset + 2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
    result[resultOffset + 3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;

    result[resultOffset + 4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
    result[resultOffset + 5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
    result[resultOffset + 6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
    result[resultOffset + 7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;

    result[resultOffset + 8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
    result[resultOffset + 9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
    result[resultOffset + 10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
    result[resultOffset + 11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;

    result[resultOffset + 12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
    result[resultOffset + 13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
    result[resultOffset + 14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
    result[resultOffset + 15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
};

mat4.mulSIMD = function mulStoreSIMD(mat, offset, mat2, offset2) {
    var out = new Float32Array(16);
    var resultOffset = 0;
    var a0 = SIMD.Float32x4.load(mat, offset);
    var a1 = SIMD.Float32x4.load(mat, offset + 4);
    var a2 = SIMD.Float32x4.load(mat, offset + 8);
    var a3 = SIMD.Float32x4.load(mat, offset + 12);

    var b0 = SIMD.Float32x4.load(mat2, offset2);
    var out0 = SIMD.Float32x4.add(
        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 0, 0, 0, 0), a0),
        SIMD.Float32x4.add(
            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 1, 1, 1, 1), a1),
            SIMD.Float32x4.add(
                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 2, 2, 2, 2), a2),
                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 3, 3, 3, 3), a3))));
    SIMD.Float32x4.store(out, resultOffset, out0);

    var b1 = SIMD.Float32x4.load(mat2, offset2 + 4);
    var out1 = SIMD.Float32x4.add(
        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 0, 0, 0, 0), a0),
        SIMD.Float32x4.add(
            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 1, 1, 1, 1), a1),
            SIMD.Float32x4.add(
                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 2, 2, 2, 2), a2),
                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 3, 3, 3, 3), a3))));
    SIMD.Float32x4.store(out, resultOffset + 4, out1);

    var b2 = SIMD.Float32x4.load(mat2, offset2 + 8);
    var out2 = SIMD.Float32x4.add(
        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 0, 0, 0, 0), a0),
        SIMD.Float32x4.add(
            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 1, 1, 1, 1), a1),
            SIMD.Float32x4.add(
                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 2, 2, 2, 2), a2),
                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 3, 3, 3, 3), a3))));
    SIMD.Float32x4.store(out, resultOffset + 8, out2);

    var b3 = SIMD.Float32x4.load(mat2, offset2 + 12);
    var out3 = SIMD.Float32x4.add(
        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 0, 0, 0, 0), a0),
        SIMD.Float32x4.add(
            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 1, 1, 1, 1), a1),
            SIMD.Float32x4.add(
                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 2, 2, 2, 2), a2),
                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 3, 3, 3, 3), a3))));
    SIMD.Float32x4.store(out, resultOffset + 12, out3);

    return out;
};

mat4.mulSIMDStore = function mulStoreSIMD(result, resultOffset, mat, offset, mat2, offset2) {
    var out = result;
    var a0 = SIMD.Float32x4.load(mat, offset);
    var a1 = SIMD.Float32x4.load(mat, offset + 4);
    var a2 = SIMD.Float32x4.load(mat, offset + 8);
    var a3 = SIMD.Float32x4.load(mat, offset + 12);

    var b0 = SIMD.Float32x4.load(mat2, offset2);
    var b1 = SIMD.Float32x4.load(mat2, offset2 + 4);
    var b2 = SIMD.Float32x4.load(mat2, offset2 + 8);
    var b3 = SIMD.Float32x4.load(mat2, offset2 + 12);

    var out0 = SIMD.Float32x4.add(
        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 0, 0, 0, 0), a0),
        SIMD.Float32x4.add(
            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 1, 1, 1, 1), a1),
            SIMD.Float32x4.add(
                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 2, 2, 2, 2), a2),
                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 3, 3, 3, 3), a3))));

    var out1 = SIMD.Float32x4.add(
        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 0, 0, 0, 0), a0),
        SIMD.Float32x4.add(
            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 1, 1, 1, 1), a1),
            SIMD.Float32x4.add(
                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 2, 2, 2, 2), a2),
                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 3, 3, 3, 3), a3))));

    var out2 = SIMD.Float32x4.add(
        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 0, 0, 0, 0), a0),
        SIMD.Float32x4.add(
            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 1, 1, 1, 1), a1),
            SIMD.Float32x4.add(
                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 2, 2, 2, 2), a2),
                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 3, 3, 3, 3), a3))));

    var out3 = SIMD.Float32x4.add(
        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 0, 0, 0, 0), a0),
        SIMD.Float32x4.add(
            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 1, 1, 1, 1), a1),
            SIMD.Float32x4.add(
                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 2, 2, 2, 2), a2),
                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 3, 3, 3, 3), a3))));

    SIMD.Float32x4.store(out, resultOffset, out0);
    SIMD.Float32x4.store(out, resultOffset + 4, out1);
    SIMD.Float32x4.store(out, resultOffset + 8, out2);
    SIMD.Float32x4.store(out, resultOffset + 12, out3);
};

exports.vec2 = vec2;
exports.vec3 = vec3;
exports.vec4 = vec4;
exports.mat3 = mat3;
exports.mat4 = mat4;
},{}],151:[function(require,module,exports){
exports.normalize = require("./sanitizer");

},{"./sanitizer":160}],152:[function(require,module,exports){
"use strict";

var estraverse = require("estraverse");
var Syntax = estraverse.Syntax;
var esgraph = require("esgraph");
var worklist = require("./worklist");
var astUtils = require("../ast_utils");

function propagateConstants(aast) {
    var cfg = esgraph(aast.body[0].body);

    worklist(cfg, function (input) {
        if (this.type)
            return;

        this.input = input;
        var result = findValue(this.astNode);
        var rvalues = [...result];
        var dif = [...input].filter(function (i) {
            return !rvalues.some(function (rv) {
                return i.left.name === rv.left.name;
            })
        });
        return new Set([...dif, ...result]);
    });

    worklist(cfg, function (input) {
        if (this.type)
            return;

        if (this.input.size > 0)
            propagateValues(this.astNode, this.input);

        this.gen = this.gen || findVariableReferences(this.astNode);
        return new Set([...input, ...this.gen]);
    });

    cfg[2].forEach(function (node) {
        node.gen = node.kill = null;
    });

    var changed = true;
    while (changed) {
        changed = false;
        var result = worklist(cfg, function (input) {
            if (this.type)
                return input;

            var gen = this.gen = findVariableReferences(this.astNode);
            var kill = this.kill = findVariableDefinitions(this.astNode);
            return new Set([...gen, ...[...input].filter(x => !kill.has(x))]);
        }, {direction: "backward"});

        cfg[2].forEach(function (cfgNode) {
            if (cfgNode.type)
                return;

            var node = cfgNode.astNode;
            if (cfgNode.kill.size > 0) {
                cfgNode.kill.forEach(function (kill) {
                    if (cfgNode.next.some(function (cfgNode) {
                            return result.get(cfgNode).has(kill);
                        }))
                        return;
                    if (node.type === Syntax.AssignmentExpression && node.left.type === Syntax.Identifier && node.left.name === kill) {
                        node.type = Syntax.EmptyStatement;
                        changed = true;
                    }
                })
            }
        });
    }

    return aast;
}

exports = module.exports = propagateConstants;

function propagateValues(ast, input) {
    var multipleValues = [];
    var values = [...input].reduce(function (map, v) {
        var name = v.left.name;
        if (map.has(name))
            multipleValues.push(name);
        else
            map.set(name, v.right);
        return map;
    }, new Map());

    multipleValues.forEach(function (name) {
        values.delete(name);
    });

    function getValue(name, idx) {
        var v = values.get(name);
        if (!v)
            return;
        if (v.type === Syntax.Literal)
            return v;
        if (v.type === Syntax.ArrayExpression && idx !== undefined) {
            var value = v.elements[idx];
            // if (value.type !== Syntax.Literal)
            //     return;
            return value;
        }
        if (v.type === Syntax.Identifier) {
            var value = getValue(v.name);
            if (value)
                return value;
            return v;
        }
    }

    estraverse.replace(ast, {
        leave: function (node, parent) {
            if (node.type === Syntax.Identifier) {
                if (parent.type === Syntax.AssignmentExpression && parent.left === node)
                    return;
                if (parent.type === Syntax.UpdateExpression)
                    return;
                if (parent.type === Syntax.Property && parent.key === node)
                    return;
                if (parent.type === Syntax.MemberExpression && parent.property === node && !parent.computed)
                    return;

                return getValue(node.name);
            } else if (node.type === Syntax.BinaryExpression) {
                if (node.left.type === Syntax.Literal && node.right.type === Syntax.Literal)
                    return astUtils.createLiteral(eval(node.left.value + "" + node.operator + "" + node.right.value));
            } else if (node.type === Syntax.ExpressionStatement && node.expression.type === Syntax.Literal) {
                return node.expression;
            } else if (node.computed) {
                if (node.object.type !== Syntax.Identifier || node.property.type !== Syntax.Literal)
                    return;
                return getValue(node.object.name, node.property.value);
            }
        }
    });
}

function findVariableDefinitions(ast) {
    var definitions = new Set();
    estraverse.traverse(ast, {
        leave: function(node) {
            switch (node.type) {
                case Syntax.AssignmentExpression:
                    if (node.left.type === Syntax.Identifier)
                        definitions.add(node.left.name);
                    break;
                case Syntax.UpdateExpression:
                    if (node.argument.type === Syntax.Identifier)
                        definitions.add(node.argument.name);
                    break;
            }
        }
    });
    return definitions;
}

function findVariableReferences(ast) {
    var references = new Set();
    estraverse.traverse(ast, {
        enter: function(node, parent) {
            if (isVariableReference(node, parent))
                references.add(node.name);
        }
    });
    return references;
}

function isVariableReference(node, parent) {
    if (node.type !== Syntax.Identifier)
        return false;

    if (parent) {
        if (parent.type === Syntax.FunctionDeclaration)
            return false;
        if (parent.type === Syntax.NewExpression && parent.callee === node)
            return false;
        if (parent.type === Syntax.CallExpression && parent.callee === node)
            return false;
        if (parent.type === Syntax.Property && parent.key === node)
            return false;
        if (parent.type === Syntax.AssignmentExpression && parent.left === node)
            return false;
    }

    return true;
}


function isMemberReference(node, parent) {
    if (node.type !== Syntax.MemberExpression)
        return false;
    if (node.object.type !== Syntax.Identifier)
        return false;
    if (node.property.type !== Syntax.Identifier)
        return false;
    if (!parent)
        return false;
    if (parent.type === Syntax.CallExpression && parent.callee === node)
        return false;

    return true;
}

function findValue(ast) {
    var values = new Set();
    estraverse.traverse(ast, {
        enter: function (node) {
            switch(node.type) {
                case Syntax.AssignmentExpression:
                    if (node.left.type !== Syntax.Identifier)
                        return;
                    values.add(node);
                    this.skip();
                    break;
                case Syntax.UpdateExpression:
                    node.left = node.argument;
                    node.right = node;
                    values.add(node);
                    break;
            }
        }
    });

    return values;
}

},{"../ast_utils":146,"./worklist":154,"esgraph":58,"estraverse":61}],153:[function(require,module,exports){
"use strict";

var esprima = require("esprima");
var estraverse = require("estraverse");
var Syntax = estraverse.Syntax;

var internalFunctions = require("../math");
internalFunctions.texture = require("../texture");
var astUtils = require("../ast_utils");

var inlineCounter = 0;

function inlineInternalFunctions(aast) {
    estraverse.replace(aast, {
        enter: function (node, parent) {
            if (node.type === Syntax.CallExpression && node.callee.type === Syntax.Identifier) {
                if (parent.type === Syntax.AssignmentExpression && parent.left.type !== Syntax.Identifier)
                    return;
                if (parent.type !== Syntax.AssignmentExpression && parent.type !== Syntax.ExpressionStatement)
                    return;
                var lhs = null;
                if (parent.type === Syntax.AssignmentExpression)
                    lhs = parent.left.name;

                var name = node.callee.name;
                var components = name.split(".");
                var fnName = components[components.length - 1];
                var typeName = components[components.length - 2];
                if (!internalFunctions[typeName] || !internalFunctions[typeName][fnName])
                    return;
                var fnAst = esprima.parse(internalFunctions[typeName][fnName].toString()).body[0];
                var fnParameterNames = fnAst.params.map(function (param) {
                    return param.name;
                });
                var resultName = "__inline_" + typeName + fnName + "result" + inlineCounter;
                var functionVariables = new Set();
                fnParameterNames.forEach(function (parameter, idx) {
                    functionVariables.add(parameter);
                    fnAst.body.body.unshift(astUtils.createDeclaration(parameter, node.arguments[idx]));
                });
                estraverse.replace(fnAst, {
                    enter: function (node) {
                        if (node.type === Syntax.VariableDeclaration) {
                            node.declarations.forEach(function (declaration) {
                                functionVariables.add(declaration.id.name);
                            });
                        }

                        if (node.type === Syntax.Identifier) {
                            if (functionVariables.has(node.name))
                                node.name = "__inline_" + typeName + fnName + node.name + inlineCounter;
                        }

                        if (node.type === Syntax.ReturnStatement) {
                            return astUtils.createBinaryExpression(resultName, node.argument, "=");
                        }
                    }
                });
                if (lhs)
                    fnAst.body.body.push(astUtils.createBinaryExpression(lhs, resultName, "="));
                fnAst.body.body.unshift(astUtils.createDeclaration(resultName));

                inlineCounter++;
                return fnAst.body;
            }
        },
        leave: function (node) {
            if (node.type === Syntax.ExpressionStatement && node.expression.type === Syntax.AssignmentExpression && node.expression.right.type === Syntax.BlockStatement)
                return node.expression.right;
        }
    })
}

exports = module.exports = inlineInternalFunctions;
},{"../ast_utils":146,"../math":150,"../texture":163,"esprima":60,"estraverse":61}],154:[function(require,module,exports){

var Queue = require('analyses/lib/queue');

var exports = module.exports = worklist;

// expose the utilities to have them tested separately
exports.Queue = Queue;

/**
 * Implementation of a general worklist algorithm
 * `cfg` is a control flow graph created by `esgraph`,
 * `transferFunction` gets called with (this = node, input, worklist)
 * it operates on the input `Set` and can return an output set, in which case
 * the worklist algorithm automatically enqueues all the successor nodes, or it
 * might return an {output: output, enqueue: false} object in which case it is
 * itself responsible to enqueue the successor nodes.
 * `options` defines the `direction`, a `merge` function and an `equals`
 * function which merge the inputs to a node and determine if a node has changed
 * its output respectively.
 * Returns a `Map` from node -> output
 */
function worklist(cfg, transferFunction, options) {
	options = options || {};
	var direction = options.direction || 'forward';
	var merge = options.merge || worklist.merge(Set.union);
	var equals = options.equals || Set.equals;
	var list = new Queue();
	if (direction === 'forward') {
		list.push(cfg[0]);
		var predecessors = worklist.predecessors;
		var successors = worklist.successors;
	} else {
		list.push(cfg[1]);
		var predecessors = worklist.successors;
		var successors = worklist.predecessors;
	}
	var start = options.start || new Set();

	var output = new Map();
	while (list.length) {
		var node = list.shift();
		var pre = predecessors(node)
			.map(function (n) {return output.get(n);})
		var input = pre.length ? merge(pre) : start;
		var oldOutput = output.get(node);
		var out = transferFunction.call(node, input, list, oldOutput);
		if (!out || out instanceof Set)
			out = {output: out, enqueue: true};
		output.set(node, out.output);
		if (out.enqueue && (!oldOutput || !equals(out.output, oldOutput)))
			successors(node).forEach(function (aSuccessor) {	list.push(aSuccessor);	});
	}
	return output;
};

worklist.predecessors = function (node) {
	return node.prev;
};

worklist.successors = function (node) {
	return node.next;
};

worklist.merge = function (fn) {
	return function (inputs) {
		if (inputs.length == 1)
			return new Set(inputs[0]);
		return inputs.reduce(fn);
	};
};

if (!Set.equals)
	Set.equals = function (a, b) {
		if (a.size != b.size)
			return false;
		return [...a].every(function (val) {
			return b.has(val);
		});
	};

if (!Set.union)
	Set.union = function (a, b) {
		if (!a)
			return b;
		if (!b)
			return a;
		return new Set([...a, ...b]);
	};

if (!Set.minus)
	Set.minus = function (a, b) {
		if (!b)
			return a;
		if (!a)
			return new Set();
		return new Set([...a].filter(x => !b.has(x)));
	};
},{"analyses/lib/queue":51}],155:[function(require,module,exports){
"use strict";

var estraverse = require("estraverse");
var Syntax = estraverse.Syntax;

var utils = require("../../../utils");
var astUtils = require("../ast_utils");
var swizzleToIndexMap = require("../constants").swizzleToIndexMap;
var determineLogicalElementSize = require("../determine_logical_element_size");

exports.nodeTypes = [Syntax.MemberExpression];
exports.enter = function (node) {
    if (!node.object.computed || node.computed)
        return;

    var annotation = utils.annotate(node);
    if (!annotation.canNumber())
        return;

    var swizzleIndex = swizzleToIndexMap[utils.annotate(node.object).getKind()][node.property.name];
    var stride = astUtils.createBinaryExpression(node.object.property, determineLogicalElementSize(node.object.object), "*");
    node.object.property = astUtils.createBinaryExpression(stride, swizzleIndex, "+").expression;
    node.object.extra = {
        type: "number"
    };

    node.object.object.extra = {
        type: "array",
        elements: {
            extra: {
                type: "number"
            }
        }
    };

    return [node.object];
};


},{"../../../utils":206,"../ast_utils":146,"../constants":148,"../determine_logical_element_size":149,"estraverse":61}],156:[function(require,module,exports){
"use strict";

var estraverse = require("estraverse");
var Syntax = estraverse.Syntax;

var utils = require("../../../utils");

var determineLogicalElementSize = require("../determine_logical_element_size");
var constants = require("../constants");
var astUtils = require("../ast_utils");

exports.nodeTypes = [Syntax.AssignmentExpression];
exports.enter = function (node) {
    if (node.left.type !== Syntax.MemberExpression || !node.left.computed || node.right.type !== Syntax.NewExpression)
        return;

    var destinationAnnotation = utils.annotate(node.left);
    var type = destinationAnnotation.getKind();
    var index = node.left.property;

    var assignments = [];

    for (var i = 0; i < constants.typeSizeMap[type]; ++i) {
        assignments.push(astUtils.createBinaryExpression(
            astUtils.createArrayAccess(
                node.left.object,
                astUtils.createBinaryExpression(astUtils.createBinaryExpression(index, determineLogicalElementSize(node.left.object), "*"), i, "+"), {type: "number"}),
            node.right.arguments[i],
            "=",
            {type: "number"}));
    }
    node.left.object.extra.elements = {
        extra: {
            type: "number"
        }
    };
    assignments[assignments.length - 1] = assignments[assignments.length - 1].expression;

    return assignments;
};

},{"../../../utils":206,"../ast_utils":146,"../constants":148,"../determine_logical_element_size":149,"estraverse":61}],157:[function(require,module,exports){
"use strict";

var estraverse = require("estraverse");
var Syntax = estraverse.Syntax;

var astUtils = require("../ast_utils");

var validOperators = ["+", "-", "*", "/", "%"];
var counter = 0;

exports.nodeTypes = [Syntax.BinaryExpression];
exports.enter = function (node, parent) {
    if (parent.type === Syntax.MemberExpression) {
        node.__ignore_binary_expression = true;
        return;
    }

    node.__ignore_binary_expression = parent.__ignore_binary_expression;
};
exports.leave = function (node) {
    if (validOperators.indexOf(node.operator) === -1 || node.__ignore_binary_expression)
        return;

    var tmp = "_bop" + counter++;
    node.__tmp = tmp;
    return [astUtils.createDeclaration(tmp, astUtils.createBinaryExpression(getVarNameOrLiteral(node.left), getVarNameOrLiteral(node.right), node.operator).expression, node.extra), astUtils.createIdentifier(node.__tmp, node.extra)]
};

function getVarNameOrLiteral(node) {
    if (node.__tmp)
        return astUtils.createIdentifier(node.__tmp, node.extra);
    return node;
}

},{"../ast_utils":146,"estraverse":61}],158:[function(require,module,exports){
"use strict";

var estraverse = require("estraverse");
var Syntax = estraverse.Syntax;

exports.nodeTypes = [Syntax.IfStatement, Syntax.WhileStatement, Syntax.ForStatement];
exports.enter = function (node) {
    if (node.type === Syntax.IfStatement) {
        node.consequent = wrapInBlockStatement(node.consequent);
        node.alternate = wrapInBlockStatement(node.alternate);
    }
    if (node.type === Syntax.WhileStatement
        || node.type === Syntax.ForStatement) {
        node.body = wrapInBlockStatement(node.body);
    }
};

function wrapInBlockStatement(node) {
    if (node && node.type !== Syntax.BlockStatement)
        return {type: Syntax.BlockStatement, body: [node]};
    return node;
}
},{"estraverse":61}],159:[function(require,module,exports){
"use strict";

var estraverse = require("estraverse");
var Syntax = estraverse.Syntax;

var astUtils = require("../ast_utils");

var counter = 0;

exports.nodeTypes = [Syntax.CallExpression];
exports.leave = function (node) {
    if (node.__tmp)
        return;
    var tmp = "_call" + counter++;
    node.arguments = node.arguments.map(getVarNameOrLiteral);
    node.__tmp = tmp;
    return [astUtils.createDeclaration(tmp, node, node.extra), astUtils.createIdentifier(node.__tmp, node.extra)];
};

function getVarNameOrLiteral(node) {
    if (node.__tmp)
        return astUtils.createIdentifier(node.__tmp, node.extra);
    return node;
}

},{"../ast_utils":146,"estraverse":61}],160:[function(require,module,exports){
"use strict";

var estraverse = require("estraverse");
var Syntax = estraverse.Syntax;

var DeclarationSimplifier = require("../../../analyze/sanitizer/declaration_simplifier");
var RedundantBlocksRemover
    = require("../../../analyze/sanitizer/redundant_blocks_remover");

var transformers = [require("./block_wrapper"), require("./binary_expression"), require("./assignment_expression"), require("./array_access_swizzle"), require("./call_expression")];

function sanitize(ast) {
    transformers.forEach(function (transformer) {
        var currentBlock = null;
        var lastBlock = null;
        var currentExpression = null;
        estraverse.replace(ast, {
            enter: function (node, parent) {
                if (node.type === Syntax.BlockStatement) {
                    lastBlock = currentBlock;
                    currentBlock = node;
                }

                if (node.type === Syntax.ExpressionStatement || node.type === Syntax.VariableDeclaration || node.type == Syntax.IfStatement || node.type === Syntax.WhileStatement || node.type === Syntax.ForStatement || node.type === Syntax.ReturnStatement) {
                    currentExpression = node;
                }

                if (!currentBlock)
                    return;

                var currentIndex = currentBlock.body.indexOf(currentExpression);
                if (currentIndex === -1)
                    return;

                if (transformer.nodeTypes.indexOf(node.type) === -1 || !transformer.enter)
                    return;

                var result = transformer.enter(node, parent);

                if (!result)
                    return;

                var replacementNode = result.pop();
                insertNewNodes(result, currentBlock, currentIndex);
                return replacementNode;
            },
            leave: function (node, parent) {
                if (node.type === Syntax.BlockStatement) {
                    currentBlock = lastBlock;
                }
                if (!currentBlock)
                    return;

                var currentIndex = currentBlock.body.indexOf(currentExpression);
                if (currentIndex === -1)
                    return;

                if (transformer.nodeTypes.indexOf(node.type) === -1 || !transformer.leave)
                    return;

                var result = transformer.leave(node, parent);
                if (!result)
                    return;

                var replacementNode = result.pop();
                insertNewNodes(result, currentBlock, currentIndex);
                return replacementNode;
            }
        });
    });

    var declarationSimplifier = new DeclarationSimplifier();
    declarationSimplifier.execute(ast);
    var redundantBlocksRemover = new RedundantBlocksRemover();
    redundantBlocksRemover.execute(ast);

    return ast;
}

exports = module.exports = sanitize;

function insertNewNodes(nodes, block, expressionIdx) {
    if (!nodes || nodes.length === 0)
        return false;

    nodes.forEach(function (replacementNode, idx) {
         block.body.splice(expressionIdx + idx, 0 , replacementNode);
    });

    return true;
}

},{"../../../analyze/sanitizer/declaration_simplifier":109,"../../../analyze/sanitizer/redundant_blocks_remover":110,"./array_access_swizzle":155,"./assignment_expression":156,"./binary_expression":157,"./block_wrapper":158,"./call_expression":159,"estraverse":61}],161:[function(require,module,exports){
"use strict";

var estraverse = require("estraverse");
var Syntax = estraverse.Syntax;
var esgraph = require("esgraph");
var analyses = require("analyses");
var utils = require("../../utils");
var math = require("./math");

exports.mark = function(ast) {
    var cfg = esgraph(ast, {omitExceptions: true});

    var variablesVisited = new Set();
    var shouldSIMD = analyses(cfg, function (input) {
        if (this.type)
            return input;

        var shouldSIMD = new analyses.Set();
        var shouldNotSIMD = new analyses.Set();

        var node = this.astNode;
        if (node.type === Syntax.AssignmentExpression) {
            if (node.left.type === Syntax.Identifier) {
                var name = node.left.name;
                if (variablesVisited.has(name) && !input.has(name)) {
                    return input;
                }
                if (node.right.type === Syntax.Identifier) {
                    if (input.has(node.left.name))
                        shouldSIMD.add(node.right.name)
                }
            }
            if (node.right.type === Syntax.CallExpression && node.right.callee.type === Syntax.MemberExpression) {
                var lhsAnnotation = utils.annotate(node.right.callee.object);
                if (!lhsAnnotation.isVector() && !lhsAnnotation.isMatrix())
                    return input;

                var fnName = node.right.callee.property.name;

                if (fnName === "mul" && lhsAnnotation.isMatrix() && utils.annotate(node.right.arguments[0]).isVector())
                    fnName += "Vec";

                if (fnName === "mul" && lhsAnnotation.isVector() && utils.annotate(node.right.arguments[0]).canNumber())
                    fnName = "scale";

                if (math[lhsAnnotation.getKind().toLowerCase()][fnName + "SIMD"]) {
                    if (node.left.type === Syntax.Identifier) {
                        shouldSIMD.add(node.left.name);
                        variablesVisited.add(node.left.name);
                    } else {
                        shouldSIMD.add(node.right);
                    }

                    if (node.right.callee.object.type === Syntax.Identifier) {
                        shouldSIMD.add(node.right.callee.object.name);
                        variablesVisited.add(node.right.callee.object.name);
                    }

                    node.right.arguments.forEach(function (arg) {
                        if (arg.type === Syntax.Identifier) {
                            shouldSIMD.add(arg.name);
                            variablesVisited.add(arg.name);
                        }
                    });
                } else {
                    if (node.left.type === Syntax.Identifier && !shouldSIMD.has(node.left.name)) {
                        shouldNotSIMD.add(node.left.name);
                        variablesVisited.add(node.left.name);
                    }
                    if (node.right.callee.object.type === Syntax.Identifier) {
                        shouldNotSIMD.add(node.right.callee.object.name);
                    }

                    node.right.arguments.forEach(function (arg) {
                        if (arg.type === Syntax.Identifier) {
                            shouldNotSIMD.add(arg.name);
                            variablesVisited.add(arg.name);
                        }
                    });
                }
            }
        }
        return new analyses.Set.union(shouldSIMD, analyses.Set.minus(input, shouldNotSIMD));
    }, {direction: "backward"}).get(cfg[0]);

    // do {
    //     var lastShouldSIMD = new analyses.Set(shouldSIMD)
    //     analyses(cfg, function (input) {
    //         if (this.type)
    //             return input;
    //
    //         var shouldNotSIMD = new analyses.Set();
    //         if (this.astNode.type === Syntax.AssignmentExpression) {
    //             var name = null;
    //             if (this.astNode.left.type === Syntax.Identifier)
    //                 name = this.astNode.left.name;
    //             estraverse.traverse(this.astNode.right, {
    //                 enter: function (node, parent) {
    //                     if (node.type === Syntax.NewExpression)
    //                         this.break();
    //                     if (node.type === Syntax.CallExpression && node.callee.type === Syntax.MemberExpression && node.callee.object.name !== "Math") {
    //                         var allArgsSIMD = true;
    //                         node.arguments.forEach(function (arg) {
    //                             if (arg.name && arg.extra.type === "object" && !lastShouldSIMD.has(arg.name))
    //                                 allArgsSIMD = false;
    //                         });
    //                         if (!allArgsSIMD && node.callee.object.name)
    //                             shouldNotSIMD.add(node.callee.object.name)
    //                     }
    //                     if (node.type === Syntax.MemberExpression && node.computed)
    //                         this.skip();
    //                     if (node.type === Syntax.Identifier && !lastShouldSIMD.has(node.name)) {
    //                         if (parent && (parent.property === node || parent.object === node))
    //                             return;
    //                         if (name)
    //                             shouldNotSIMD.add(name)
    //                     }
    //                 }
    //             });
    //         }
    //
    //         shouldSIMD = analyses.Set.minus(shouldSIMD, shouldNotSIMD);
    //         return shouldNotSIMD;
    //     }, {direction: "backward"}).get(cfg[0]);
    // } while (shouldSIMD.size !== 0 && !analyses.Set.equals(lastShouldSIMD, shouldSIMD));

    var canSIMD = analyses(cfg, function (input) {
        if (this.type)
            return input;

        var canSIMD = input;
        estraverse.traverse(this.astNode, {
            enter: function (node) {
                if (node.type === Syntax.AssignmentExpression && node.left.type === Syntax.Identifier && canSIMD.has(node.left.name)) {
                    estraverse.traverse(node.right ? node.right : node, {
                        leave: function (node) {
                            if (node.type === Syntax.Identifier && shouldSIMD.has(node.name))
                                node.__simd = true;
                            if (node.type === Syntax.CallExpression && node.callee.type === Syntax.MemberExpression && node.callee.object.name !== "Math") {
                                node.__simd = true;
                            }
                            if (node.type === Syntax.MemberExpression && node.computed)
                                node.__simd = true;
                            if (node.type === Syntax.NewExpression)
                                node.__simd = true;
                        }
                    });
                }

                if (node.right && node.right.__simd && node.left.name)
                    canSIMD.add(node.left.name);
            }
        });

        return canSIMD;
    }, {direction: "forward", start: shouldSIMD}).get(cfg[1]);

    return canSIMD;
};

},{"../../utils":206,"./math":150,"analyses":46,"esgraph":58,"estraverse":61}],162:[function(require,module,exports){
"use strict";

var estraverse = require("estraverse");
var Syntax = estraverse.Syntax;
var esgraph = require("esgraph");
var analyses = require("analyses");
var astUtils = require("./ast_utils");
var external = require("./math");
external.texture = require("./texture");
var esprima = require("esprima");

var RedundantBlocksRemover
    = require("../../analyze/sanitizer/redundant_blocks_remover");
var DeclarationSimplifier = require("../../analyze/sanitizer/declaration_simplifier");

function simplify(aast) {
    inlineFunctions(aast);

    estraverse.replace(aast, {
        enter: function(node) {
            if (node.type === Syntax.ExpressionStatement) {
                if (node.expression.type === Syntax.BlockStatement)
                    return node.expression;
                if (node.expression.type === Syntax.AssignmentExpression && node.expression.right.type === Syntax.BlockStatement)
                    return node.expression.right;
            }
        }
    });

    var declarationSimplifier = new DeclarationSimplifier();
    declarationSimplifier.execute(aast);

    var redundantBlocksRemover = new RedundantBlocksRemover();
    redundantBlocksRemover.execute(aast);

    propagateCopies(aast);
    propagateConstants(aast);
    deadCodeElimination(aast);
    removeEmptyStatements(aast);
}

exports = module.exports = simplify;

function inlineFunctions(aast) {
    var inlineCounter = 0;
    estraverse.replace(aast, {
        enter: function (node, parent) {
            if (parent.type === Syntax.AssignmentExpression && parent.left.type !== Syntax.Identifier)
                return;
            if (parent.type !== Syntax.AssignmentExpression && parent.type !== Syntax.ExpressionStatement)
                return;
            if (node.type === Syntax.CallExpression && node.callee.type === Syntax.Identifier) {
                var lhs = null;
                if (parent.type === Syntax.AssignmentExpression)
                    lhs = parent.left.name;

                var name = node.callee.name;
                var components = name.split(".");
                var fnName = components[components.length - 1];
                var typeName = components[components.length - 2];
                if (!external[typeName][fnName])
                    return;
                var fnAst = esprima.parse(external[typeName][fnName].toString()).body[0];
                var fnParameterNames = fnAst.params.map(function (param) {
                    return param.name;
                });
                var resultName = "__inline_" + typeName + fnName + "result" + inlineCounter;
                var functionVariables = new Set();
                fnParameterNames.forEach(function (parameter, idx) {
                    functionVariables.add(parameter);
                    fnAst.body.body.unshift(astUtils.createDeclaration(parameter, node.arguments[idx]));
                });
                estraverse.replace(fnAst, {
                    enter: function (node) {
                        if (node.type === Syntax.VariableDeclaration) {
                            node.declarations.forEach(function (declaration) {
                                functionVariables.add(declaration.id.name);
                            });
                        }

                        if (node.type === Syntax.Identifier) {
                            if (functionVariables.has(node.name))
                                node.name = "__inline_" + typeName + fnName + node.name + inlineCounter;
                        }

                        if (node.type === Syntax.ReturnStatement) {
                            return astUtils.createBinaryExpression(resultName, node.argument, "=");
                        }
                    }
                });
                if (lhs)
                    fnAst.body.body.push(astUtils.createBinaryExpression(lhs, resultName, "="));
                fnAst.body.body.unshift(astUtils.createDeclaration(resultName));

                inlineCounter++;
                return fnAst.body;
            }
        }
    })
}

function propagateCopies(aast) {
    var changed = true;
    while (changed) {
        changed = false;
        var cfg = esgraph(aast.body[0].body);
        var result =  reachingDefinitions(cfg, findAssignedVariablesAndCopyValues);
        cfg[2].forEach(function (cfgNode, idx) {
            if (cfgNode.type)
                return;

            var input = result.get(cfgNode);
            function findDefintion(name) {
                var defs = input.values().filter(function (value) {
                    return value.name === name;
                });

                if (defs.length === 1)
                    return defs[0];

                var first = defs[0];
                if (defs.every(function (def) {
                        if (def.name !== first.name)
                            return false;
                        return equalValue(def.value, first.value);
                    }))
                    return first;
            }

            estraverse.replace(cfgNode.astNode, {
                enter: function (node, parent) {
                    if (node.type === Syntax.Identifier) {
                        if (parent.type === Syntax.MemberExpression && !parent.computed && parent.property.type === Syntax.Identifier && parent.property.name === node.name)
                            return;
                        if (parent.type === Syntax.Property)
                            return;
                        var definition = findDefintion(node.name);

                        if (definition && definition.value.type === Syntax.Identifier) {
                            if (definition === parent)
                                return;
                            if (parent.type === Syntax.AssignmentExpression && parent.right === definition.value)
                                return;
                            if (parent.type === Syntax.AssignmentExpression && parent.left === node)
                                return;
                            changed = true;
                            return definition.value;
                        }
                    }
                }
            });
        });
    }
}


function propagateConstants(aast) {
    var changed = true;
    while (changed) {
        changed = false;
        var cfg = esgraph(aast.body[0].body);
        var result =  reachingDefinitions(cfg, findAssignedVariablesAndLiteralValues);
        cfg[2].forEach(function (cfgNode, idx) {
            if (cfgNode.type)
                return;

            var input = result.get(cfgNode);
            function findDefinition(name) {
                var defs = input.values().filter(function (value) {
                    return value.name === name;
                });

                if (defs.length === 1)
                    return defs[0];

                var first = defs[0];
                if (defs.every(function (def) {
                        if (def.name !== first.name)
                            return false;
                        return equalValue(def.value, first.value);
                    }))
                    return first;
            }

            estraverse.replace(cfgNode.astNode, {
                enter: function (node, parent) {
                    if (node.type === Syntax.Identifier) {
                        if (parent.type === Syntax.MemberExpression && !parent.computed && parent.property.type === Syntax.Identifier && parent.property.name === node.name)
                            return;
                        if (parent.type === Syntax.Property)
                            return;
                        var definition = findDefinition(node.name);

                        if (definition && definition.value && definition.value.type === Syntax.Literal) {
                            if (definition === parent)
                                return;
                            if (parent.type === Syntax.AssignmentExpression && parent.right === definition.value)
                                return;
                            if (parent.type === Syntax.AssignmentExpression && parent.left === node)
                                return;
                            changed = true;
                            return definition.value;
                        }
                    }
                }
            });

            estraverse.replace(cfgNode.astNode, {
                enter: function (node, parent) {
                    if (parent.type === Syntax.AssignmentExpression && parent.left === node)
                        return;
                    if (node.computed && node.type === Syntax.MemberExpression && node.object.type === Syntax.Identifier && node.property.type === Syntax.Literal) {
                        var name = node.object.name;
                        var idx = node.property.value;
                        var definition = findDefinition(name);

                        if (definition && definition.value && definition.value.type === Syntax.ArrayExpression) {
                            changed = true;
                            return definition.value.elements[idx];
                        }
                    }
                }
            });

            foldConstants(aast);
        });
    }
}

function reachingDefinitions(cfg, gatherVariableDefinitions) {
    return analyses(cfg, function (input) {
        if (this.type)
            return input;

        var gen = this.gen = this.gen || gatherVariableDefinitions(this);

        var result = input.values().filter(function (i) {
            return !gen.values().some(function (v) {
                return i.name === v.name;
            });
        });

        return analyses.Set.union(gen, new analyses.Set(result));
    }, {
        equals: function (a, b) {
            if (a.size !== b.size)
                return;

            return a.values().every(function (v) {
                var x = b.values().find(function (bv) {
                    return bv.name === v.name && bv.value === v.value;
                });
                return x !== undefined;
            });
        }
    });
}

function findAssignedVariablesAndCopyValues(cfgNode) {
    var result = new analyses.Set();
    if (cfgNode.parent.type !== Syntax.ForStatement &&
        cfgNode.parent.type !== Syntax.WhileStatement &&
        cfgNode.astNode.type === Syntax.AssignmentExpression &&
        cfgNode.astNode.left.type === Syntax.Identifier) {
        result.add({name: cfgNode.astNode.left.name, value: cfgNode.astNode.right});
    }

    if (cfgNode.astNode.type === Syntax.CallExpression && cfgNode.astNode.callee.type === Syntax.Identifier && cfgNode.astNode.callee.name.indexOf("Store") !== -1)
        result.add({name: cfgNode.astNode.arguments[0].name, value: cfgNode.astNode.callee.name});

    return result;
}


function findAssignedVariablesAndLiteralValues(cfgNode) {
    var result = new analyses.Set();
    if (cfgNode.parent.type !== Syntax.ForStatement &&
        cfgNode.parent.type !== Syntax.WhileStatement &&
        cfgNode.astNode.type === Syntax.AssignmentExpression &&
        cfgNode.astNode.left.type === Syntax.Identifier) {
        result.add({name: cfgNode.astNode.left.name, value: cfgNode.astNode.right});
    }
    if (cfgNode.astNode.type === Syntax.AssignmentExpression &&
        cfgNode.astNode.left.type === Syntax.MemberExpression &&
        cfgNode.astNode.left.object.type === Syntax.Identifier)
        result.add({name: cfgNode.astNode.left.object.name, value: null});

    if (cfgNode.astNode.type === Syntax.CallExpression && cfgNode.astNode.callee.type === Syntax.Identifier && cfgNode.astNode.callee.name.indexOf("Store") !== -1)
        result.add({name: cfgNode.astNode.arguments[0].name, value: cfgNode.astNode.callee.name});

    return result;}

function equalValue(node1, node2) {
    if (!node1 || !node2)
        return false;
    if (node1.type !== node2.type)
        return false;

    switch (node1.type) {
        case Syntax.Literal:
            return node1.value === node2.value;
        case Syntax.Identifier:
            return node1.name === node2.name;
        case Syntax.ArrayExpression:
            return node1.elements.every(function (element, idx) {
                return node2.elements[idx] === element;
            });
        default:
            return false;
    }
}

function foldConstants(node) {
    estraverse.replace(node, {
        enter: function (node, parent) {
            switch (node.type) {
                case Syntax.BinaryExpression:
                case Syntax.LogicalExpression:
                    if (node.left.type === Syntax.Literal
                        && node.right.type === Syntax.Literal) {
                        var lhs = node.left.value;
                        var rhs = node.right.value;
                        return astUtils.createLiteral(eval(lhs + "" + node.operator + "" + rhs))
                    }
                    break;
            }
        }
    });

    return estraverse.replace(node, {
        enter: function(node) {
            if (node.type === Syntax.ExpressionStatement) {
                if (node.expression.type === Syntax.Literal)
                    return node.expression;
            }
        }
    });
}

function deadCodeElimination(aast) {
    var changed = true;
    while (changed) {
        changed = false;
        var cfg = esgraph(aast.body[0].body);
        // var result = liveVariables(cfg);
        var result = analyses(cfg, function (input) {
            if (this.type)
                return input;

            var gen = this.gen = this.gen || findUsedVariables(this.astNode);
            var kill = this.kill = this.kill || findAssignedVariables(this.astNode);
            return new analyses.Set.union(gen, analyses.Set.minus(input, kill));
        }, {direction: "backward"});

        cfg[2].forEach(function (cfgNode) {
            if (cfgNode.type)
                return;

            var node = cfgNode.astNode;
            if (cfgNode.kill.size > 0) {
                cfgNode.kill.forEach(function (kill) {
                    if (cfgNode.next.some(function (cfgNode) {
                            return result.get(cfgNode).has(kill);
                        }))
                        return;
                    if (node.type === Syntax.AssignmentExpression && node.left.type === Syntax.Identifier && node.left.name === kill) {
                        node.type = Syntax.EmptyStatement;
                        changed = true;
                    }
                })
            }
        });
    }
}

function findUsedVariables(node) {
    var vars = new analyses.Set();
    estraverse.traverse(node, {
        enter: function (node, parent) {
            if (node.type === Syntax.Identifier) {
                if (parent) {
                    if (parent.type === Syntax.AssignmentExpression && parent.left === node && ["+=", "-=", "*=", "/=", "&=", "|="].indexOf(parent.operator) === -1)
                        return;
                    if (parent.type === Syntax.MemberExpression && parent.property === node)
                        return;
                }
                vars.add(node.name);
            }
        }
    });

    return vars;
}

function findAssignedVariables(node) {
    var vars = new analyses.Set();
    estraverse.traverse(node, {
        enter: function (node, parent) {
            if (node.type === Syntax.AssignmentExpression && node.left.type === Syntax.Identifier)
                vars.add(node.left.name);
        }
    });
    return vars;
}

function removeEmptyStatements(aast) {
    estraverse.replace(aast, {
        enter: function (node) {
            if (node.type === Syntax.ExpressionStatement && node.expression.type === Syntax.EmptyStatement)
                return this.remove();
            if (node.type === Syntax.EmptyStatement)
                return this.remove();
        }
    })
}

},{"../../analyze/sanitizer/declaration_simplifier":109,"../../analyze/sanitizer/redundant_blocks_remover":110,"./ast_utils":146,"./math":150,"./texture":163,"analyses":46,"esgraph":58,"esprima":60,"estraverse":61}],163:[function(require,module,exports){
"use strict";

exports.sample = function sampleTexture(array, uv, uvOffset) {
    var u = uv[uvOffset], v = uv[uvOffset + 1];
    var x = Math.floor(u * (array.shape[0] - 1)) % (array.shape[0] - 1);
    var y = Math.floor((1 - v) * (array.shape[1] - 1)) % (array.shape[1] - 1);

    var offset = (x + y * array.shape[0]) * 4;
    return [array[offset], array[offset + 1], array[offset + 2] , array[offset + 3]];
};
},{}],164:[function(require,module,exports){
"use strict";

var estraverse = require("estraverse");
var Syntax = estraverse.Syntax;
var esgraph = require("esgraph");
var analyses = require("analyses");

var utils = require("../../utils");
var math = require("./math");
var astUtils = require("./ast_utils");
var constants = require("./constants");

exports.vectorize = function (ast) {
    estraverse.replace(ast, {
        leave: function (node, parent) {
            if (node.type === Syntax.ForStatement) {
                if (canBeVectorized(node) && !node.__ignore) {
                    vectorize(node, parent);
                }

            }
        }
    });

    return ast;
};

function canBeVectorized(node) {
    var loopVar = node.init.left.name;

    var cannotBeVectorized = false;
    var unsupportedOperators = ["%"];
    estraverse.traverse(node, {
        enter: function (node) {
            if (node.type === Syntax.ExpressionStatement) {
                var annotation = utils.annotate(node.expression);
                if (annotation.isVector() || annotation.isMatrix()) {
                    cannotBeVectorized = true;
                    this.break();
                }
            }
            if (node.type === Syntax.BinaryExpression && unsupportedOperators.indexOf(node.operator) !== -1) {
                cannotBeVectorized = true;
                this.break()
            }
        }
    });

    if (cannotBeVectorized)
        return false;

    var containsAlreadyVectorizedLoop = false;
    var node = JSON.parse(JSON.stringify(node));
    estraverse.replace(node, {
        enter: function (n) {
            if (n !== node && n.type === Syntax.ForStatement) {
                if (n.__vectorized) {
                    containsAlreadyVectorizedLoop = true;
                    this.break();
                }
                this.remove();
            }
        }
    });
    if (containsAlreadyVectorizedLoop)
        return false;

    var cfg = esgraph(node, {omitExceptions: true});
    analyses(cfg, function (input) {
        if (this.type)
            return input;

        var gen = this.gen = this.gen || findUsedVariables(this.astNode);
        this.gen.delete(loopVar);
        var kill = this.kill = this.kill || findAssignedVariables(this.astNode);
        return new analyses.Set.union(gen, analyses.Set.minus(input, kill));
    }, {direction: "backward"});

    var loopDependency = false;
    for (var i = 0; i < cfg[2].length && !loopDependency; ++i) {
        var cfgNode = cfg[2][i];

        if (!cfgNode.gen)
            continue;

        var definedAfter = cfgNode.gen.filter(function (varName) {
            return isDefinedAfter(cfgNode, varName, cfg[1].prev[0]);
        });

        loopDependency = definedAfter.length > 0;
    }

    return !loopDependency;
}

function findUsedVariables(node) {
    var vars = new analyses.Set();
    estraverse.traverse(node, {
        enter: function (node, parent) {
            if (node.type === Syntax.Identifier) {
                if (parent) {
                    if (parent.type === Syntax.AssignmentExpression && parent.left === node && ["+=", "-=", "*=", "/=", "&=", "|="].indexOf(parent.operator) === -1)
                        return;
                    if (parent.type === Syntax.MemberExpression && parent.property === node)
                        return;
                }
                vars.add(node.name);
            }
        }
    });

    return vars;
}

function findAssignedVariables(node) {
    var vars = new analyses.Set();
    estraverse.traverse(node, {
        enter: function (node, parent) {
            if (node.type === Syntax.AssignmentExpression && node.left.type === Syntax.Identifier)
                vars.add(node.left.name);
        }
    });
    return vars;
}

function isDefinedAfter(cfgNode, varName, loopTail, alreadyVisited) {
    alreadyVisited = alreadyVisited || new Set();
    alreadyVisited.add(cfgNode);
    if (!cfgNode.kill)
        return false;

    return cfgNode.next.reduce(function (isDefined, nextNode) {
        if (!nextNode.kill)
            return isDefined;
        if (nextNode.parent.type === Syntax.ForStatement)
            return isDefined;
        if (alreadyVisited.has(nextNode))
            return isDefined;
        if (nextNode === loopTail)
            return isDefined;
        return isDefined || nextNode.kill.has(varName) || isDefinedAfter(nextNode, varName, loopTail, alreadyVisited);
    }, false);
}

function vectorize(ast, parent) {
    ast.__vectorized = true;
    var loopVariable = ast.init.left.name;

    // clean up
    parent.body.splice(parent.body.indexOf(ast) + 1, 0, {
        type: Syntax.ForStatement,
        test: ast.test,
        update: ast.update,
        body: {
            type: Syntax.BlockStatement,
            body: JSON.parse(JSON.stringify(ast.body.body))
        }
    });
    ast.update = astUtils.createBinaryExpression(loopVariable, astUtils.createBinaryExpression(loopVariable, 4, "+"), "=").expression;
    ast.test = astUtils.createBinaryExpression(loopVariable, astUtils.createBinaryExpression(ast.test.right, astUtils.createBinaryExpression(ast.test.right, 4, "%"), "-"), ast.test.operator).expression;

    var vectorizedVariables = new Set();
    estraverse.replace(ast.body, {
        enter: function (node, parent) {
            if (node.type !== Syntax.BlockStatement && parent.type === Syntax.ForStatement) {
                this.skip();
            }
            if (node.type === Syntax.MemberExpression)
                this.skip();
        },
        leave: function (node, parent) {
            if (parent.type === Syntax.ForStatement)
                return;
            if (node.type === Syntax.AssignmentExpression) {
                if (node.left.type === Syntax.Identifier) {
                    var annotation = utils.annotate(node.right);
                    if (annotation.isVector())
                        return;
                    node.right = vectorizeNode(node.right, vectorizedVariables, loopVariable);
                    vectorizedVariables.add(node.left.name);
                    node.left.extra = node.left.extra || {};
                    node.left.extra.type = "object";
                    node.left.extra.kind = "Vec4";
                } else if (node.left.type === Syntax.MemberExpression) {
                    var containsLoopVariable = false;
                    estraverse.traverse(node.left, {
                        enter: function (n) {
                            if (n.type === Syntax.Identifier && n.name === loopVariable)
                                containsLoopVariable = true;
                        }
                    });

                    if (containsLoopVariable) {
                        var assignments = [];
                        for (var i = 0; i < 4; ++i) {
                            var newNode = estraverse.replace(JSON.parse(JSON.stringify(node)), {
                                enter: function (n, parent) {
                                    if (n.type === Syntax.Identifier && n.name === loopVariable) {
                                        this.skip();
                                        return astUtils.createBinaryExpression(n, i, "+").expression;
                                    }
                                }
                            });
                            newNode.right = extractComp(newNode.right, i, loopVariable);

                            newNode.__ignore = true;
                            assignments.push(newNode);
                        }
                        var expressionIdx = ast.body.body.indexOf(parent);
                        assignments.forEach(function (assignment, idx) {
                            ast.body.body.splice(expressionIdx + idx, 0, {type: Syntax.ExpressionStatement, expression: assignment})
                        });
                        return {
                            type: Syntax.EmptyStatement
                        }
                    }
                }
            }

            if (node.type === Syntax.BinaryExpression) {
                var operator = node.operator;
                var method = "";
                switch (operator) {
                    case "+":
                        method = "add";
                        break;
                    case "-":
                        method = "sub";
                        break;
                    case "*":
                        method = "mul";
                        break;
                    case "/":
                        method = "div";
                        break;
                }

                node.left = vectorizeNode(node.left, vectorizedVariables, loopVariable);
                node.right = vectorizeNode(node.right, vectorizedVariables, loopVariable);
                node.left.extra = node.left.extra || {};
                node.left.extra.type = "object";
                node.left.extra.kind = "Vec4";

                return astUtils.createFunctionCall(astUtils.createMemberExpression(node.left, method), [node.right], {type: "object", kind: "Vec4"});
            }
        }
    });
}

function vectorizeNode(node, vectorizedVariables, loopVariable) {
    if (node.type === Syntax.Identifier) {
        if ((vectorizedVariables.has(node.name) || node.name.indexOf("_bop") === 0)) {
            node.extra = node.extra || {};
            node.extra.type = "object";
            node.extra.kind = "Vec4";
            return node;
        } else {
            if (node.name === loopVariable)
                return astUtils.createNewExpression("Vec4", [
                    astUtils.createBinaryExpression(node, 0, "+").expression,
                    astUtils.createBinaryExpression(node, 1, "+").expression,
                    astUtils.createBinaryExpression(node, 2, "+").expression,
                    astUtils.createBinaryExpression(node, 3, "+").expression,
                ]);
            else
                return astUtils.createNewExpression("Vec4", [node]);
        }
    } else {
        var containsLoopVariable = false;
        estraverse.replace(node, {
            enter: function (n) {
                if (n.type === Syntax.Identifier && n.name === loopVariable) {
                    containsLoopVariable = true;
                }
            }
        });

        if (containsLoopVariable) {
            var args = [];
            for (var i = 0; i < 4; ++i) {
                var newNode = estraverse.replace(JSON.parse(JSON.stringify(node)), {
                    enter: function (n, parent) {
                        if (n.type === Syntax.Identifier && n.name === loopVariable) {
                            this.skip();
                            return astUtils.createBinaryExpression(n, i, "+").expression;
                        }
                    }
                });
                newNode.__ignore = true;
                args.push(newNode);
            }
            return astUtils.createNewExpression("Vec4", args);
        }


        if (node.type === Syntax.CallExpression && node.callee.type === Syntax.MemberExpression && node.callee.object.name === "Math" && math.vec4[node.callee.property.name + "SIMD"])
            return astUtils.createFunctionCall(astUtils.createMemberExpression(astUtils.createIdentifier(node.arguments[0].name, {type: "object", kind: "Vec4"}), node.callee.property.name));

        return astUtils.createNewExpression("Vec4", [extractComp(node, 0), extractComp(node, 1), extractComp(node, 2), extractComp(node, 3)]);
    }
}

function extractComp(node, idx, loopVariable) {
    var node = JSON.parse(JSON.stringify(node));
    return estraverse.replace(node, {
        enter: function (node, parent) {
            if (node.type === Syntax.Identifier && parent.type !== Syntax.MemberExpression && node.name !== loopVariable) {
                node.extra = node.extra || {};
                node.extra.type = "object";
                node.extra.kind = "Vec4";
                return astUtils.createMemberExpression(node, constants.vectorIndexToSwizzleMap[idx], {type: "number"});
            }
        }
    });
}

},{"../../utils":206,"./ast_utils":146,"./constants":148,"./math":150,"analyses":46,"esgraph":58,"estraverse":61}],165:[function(require,module,exports){
(function (ns) {

    var Base = require("../../base/index.js");

    var Transformer = require("./transform.js");
    var generate = require("./glsl-generate.js").generate;


    var GLSLCompiler = function () {

    };

    Base.extend(GLSLCompiler.prototype, {

        compileFragmentShader: function (aast, opt) {
            opt = opt || {};

            var transformer = new Transformer(aast, "shade", false, opt);

            //console.log(require("escodegen").generate(aast));
            //console.log(JSON.stringify(aast, 0, " "));

            var transformed = transformer.transform(aast);

            //console.log(JSON.stringify(aast, 0, " "));

            opt.headers = transformed.headers;
            var code = generate(transformed.program, false, opt);

            return {source: code, uniformSetter: transformed.uniformSetter};
        },
        compileVertexShader: function (aast, opt) {
            opt = opt || {};

            var transformer = new Transformer(aast, "global.main", true, opt);

            //console.log(JSON.stringify(aast, 0, " "));

            var transformed = transformer.transform(aast);

            //console.log(JSON.stringify(aast, 0, " "));

            opt.headers = transformed.headers;
            var code = generate(transformed.program, true, opt);

            return {source: code, uniformSetter: transformed.uniformSetter};
        }

    });


    ns.GLSLCompiler = GLSLCompiler;

}(exports));

},{"../../base/index.js":142,"./glsl-generate.js":166,"./transform.js":178}],166:[function(require,module,exports){
// Dependencies
var Shade = require("./../../interfaces.js");
var walk = require('estraverse');
var ExpressionHandler = require('../base/expression-handler.js').ExpressionHandler,
    Syntax = walk.Syntax,
    VisitorOption = walk.VisitorOption,
    annotate = require("../../utils").annotate;


// Shortcuts
var Types = Shade.TYPES,
    Kinds = Shade.OBJECT_KINDS,
    Sources = Shade.SOURCES;

var InternalFunctions = {
    "MatCol": function (name, details) {
        var matType = details.matType,
            colType = details.colType;
        return [matType + " " + name + "(" + matType + " mat, int idx, " + colType + " value){",
            "  " + matType + " result = " + matType + "(mat);",
            "  result[idx] = value;",
            "  return result;",
            "}"];
    }
}

var GLSL = {
    Storage: {
        CONST: "const",
        UNIFORM: "uniform",
        VARYING: "varying",
        ATTRIBUTE: "attribute"
    }
}

var handler = new ExpressionHandler({
    type: toGLSLType
});


/**
 * @param {object} opt
 */
var getHeader = function (opt) {
    if (opt.omitHeader == true)
        return [];
    var header = [
        "// Generated by shade.js"
    ];
    if (opt.headers)
        header = header.concat(opt.headers)
    var floatPrecision = opt.floatPrecision || "highp";
    header.push("precision " + floatPrecision + " float;");
    header.push("");
    return header;
}

function toGLSLType(info, options) {
    if (!info) return "?";
    options = options || {};

    //console.log(info);

    switch (info.type) {
        case Types.OBJECT:
            switch (info.kind) {
                case "Vec4":
                    return "vec4";
                case "Vec3":
                    return "vec3";
                case "Vec2":
                    return "vec2";
                case "Texture":
                    return "sampler2D";
                case "Mat3":
                    return "mat3";
                case Kinds.MATRIX4:
                    return "mat4";
                case Kinds.COLOR_CLOSURE:
                    return "vec4";
                default:
                    throw new Error("Missing GLSL support for:" + info.kind);
            }
        case Types.ARRAY:
            return toGLSLType(info.elements, options);

        case Types.UNDEFINED:
            if (options.allowUndefined)
                return "void";
            throw new Error("Could not determine type");
        case Types.NUMBER:
            return "float";
        case Types.BOOLEAN:
            return "bool";
        case Types.INT:
            return "int";
        default:
            //throw new Error("toGLSLType: Unhandled type: " + info.type);
            return info.type;

    }
}

var toGLSLStorage = function (info, vertexShader) {
    if (!info.source)
        return null;
    if (info.source == Sources.VERTEX) {
        if (vertexShader && !info.output)
            return GLSL.Storage.ATTRIBUTE;
        else
            return GLSL.Storage.VARYING;
    }
    if (info.source == Sources.UNIFORM)
        return GLSL.Storage.UNIFORM;
    if (info.source == Sources.CONSTANT)
        return GLSL.Storage.CONST;
    throw new Error("toGLSLSource: Unhandled type: " + info.source);
}

function filterUndefined(arr) {
    return arr.filter(function (n) {
        return n.extra.type != Types.UNDEFINED;
    });
}

function createLineStack() {
    var arr = [];
    arr.push.apply(arr, arguments);
    var indent = "";
    arr.appendLine = function (line) {
        line ? this.push(indent + line) : this.push("");
    };
    arr.changeIndention = function (add) {
        while (add > 0) {
            indent += "    ";
            add--;
        }
        if (add < 0) {
            indent = indent.substr(0, indent.length + add * 4);
        }
    };
    arr.append = function (str) {
        this[this.length - 1] = this[this.length - 1] + str;
    };
    return arr;
};


/*Base.extend(LineStack.prototype, {

 });*/

var generate = function (ast, vertexshader, opt) {

    opt = opt || {};

    var lines = createLineStack();

    traverse(ast, lines, vertexshader, opt);

    return lines.join("\n");
}

function appendInternalFunctions(lines, internalFunctions) {
    if (!internalFunctions) return;
    for (var key in internalFunctions) {
        var entry = internalFunctions[key];
        if (InternalFunctions[entry.type]) {
            var linesToAdd = InternalFunctions[entry.type](entry.name, entry.details);
            lines.push.apply(lines, linesToAdd);
        }
        else {
            throw Error("Internal: InlineFunction of type '" + entry.type + "' not available!");
        }
    }
}

function traverse(ast, lines, vertexShader, opt) {
    var insideMain = false;


    walk.traverse(ast, {
            enter: function (node) {
                try {
                    var type = node.type;
                    switch (type) {

                        case Syntax.Program:
                            getHeader(opt).forEach(function (e) {
                                lines.push(e)
                            });
                            appendInternalFunctions(lines, annotate(ast).getUserData().internalFunctions);
                            addForwardDeclarations(lines, node);
                            break;


                        case Syntax.FunctionDeclaration:
                            opt.newLines && lines.appendLine();
                            if (node.id.name == "main")
                                insideMain = true;

                            lines.appendLine(generateFunctionSignature(node) + " {");
                            lines.changeIndention(1);
                            return;


                        case Syntax.ReturnStatement:
                            lines.appendLine(handler.statement(node));
                            return;

                        case Syntax.VariableDeclarator :
                            // console.log("Meep!");
                            var decl = handleVariableDeclaration(node, insideMain, vertexShader, opt);
                            lines.appendLine(decl);
                            return;

                        case Syntax.AssignmentExpression:
                        case Syntax.ExpressionStatement:
                            lines.appendLine(handler.expression(node) + ";")
                            return VisitorOption.Skip;

                        case Syntax.IfStatement:
                            lines.appendLine("if(" + handler.expression(node.test, opt) + ") {");

                            lines.changeIndention(1);
                            traverse(node.consequent, lines, opt);
                            lines.changeIndention(-1);

                            if (node.alternate) {
                                lines.appendLine("} else {");
                                lines.changeIndention(1);
                                traverse(node.alternate, lines, opt);
                                lines.changeIndention(-1);
                            }
                            lines.appendLine("}");
                            return VisitorOption.Skip;

                        case Syntax.ForStatement:
                            lines.appendLine("for (" + handleInlineDeclaration(node.init, opt) + "; " + handler.expression(node.test, opt) + "; " + handler.expression(node.update, opt) + ") {");
                            lines.changeIndention(1);
                            traverse(node.body, lines, opt);
                            lines.changeIndention(-1);
                            lines.appendLine("}");
                            return VisitorOption.Skip;

                        case Syntax.NewStatement:


                        case Syntax.ContinueStatement:
                            lines.appendLine("continue;");
                            return;
                        case Syntax.BreakStatement:
                            lines.appendLine("break;");
                            return;


                        default:
                        //console.log("Unhandled: " + type);

                    }
                } catch (e) {
                    throw e;//console.error(e);
                    //Shade.throwError(node, e.message);
                }
            },
            leave: function (node) {
                var type = node.type;
                switch (type) {
                    case Syntax.Program:
                        break;
                    case Syntax.FunctionDeclaration:
                        lines.changeIndention(-1);
                        lines.appendLine("}");
                        break;
                }
            }
        }
    );
}

function addForwardDeclarations(lines, node) {
    var first = true;
    walk.traverse(node, {
        enter: function (node) {
            if (node.type == Syntax.FunctionDeclaration) {
                if (node.id.name == "main") {
                    return;
                }
                if (first) {
                    first = false;
                    lines.appendLine("// Forward declarations");
                }
                lines.appendLine(generateFunctionSignature(node) + ";");
            }
        }
    });
    if (!first) {
        lines.appendLine("");
    }
}

function generateFunctionSignature(node) {
    var func = annotate(node);
    var methodStart = [toGLSLType(func.getReturnInfo(), {allowUndefined: true})];
    methodStart.push(node.id.name, '(');
    if (!(node.params && node.params.length)) {
        methodStart.push("void");
    } else {
        var methodArgs = [];
        node.params.forEach(function (param) {
            methodArgs.push(toGLSLType(param.extra) + " " + param.name);
        })
        methodStart.push(methodArgs.join(", "));
    }
    methodStart.push(")");
    return methodStart.join(" ");
}

function getStaticValue(extra) {
    if (!extra || extra.staticValue === undefined) return "";
    return extra.staticValue;
};

function handleVariableDeclaration(node, writeStorageQualifier, vertexShader, opt) {
    var storageQualifier = !writeStorageQualifier ? toGLSLStorage(node.extra, vertexShader) : null;
    var result = storageQualifier ? storageQualifier + " " : "";
    result += toGLSLType(node.extra) + " " + node.id.name;
    if (node.extra.elements) {
        result += "[" + (node.extra.staticSize ? node.extra.staticSize : "0") + "]";
    }
    if (node.init) result += " = " + handler.expression(node.init);
    if (!node.init && storageQualifier == GLSL.Storage.CONST) {
        result += " = " + getStaticValue(node.extra);
    }
    return result + ";";
}


function handleInlineDeclaration(node, opt) {
    if (!node)
        return "";
    if (node.type == Syntax.VariableDeclaration) {
        var result = node.declarations.reduce(function (declString, declaration) {
            var decl = toGLSLType(declaration.extra) + " " + declaration.id.name;
            if (declaration.init) {
                decl += " = " + handler.expression(declaration.init);
            }
            return declString + decl;
        }, "");
        return result;
    }

    // GLSL allows only declaration in init, but since this is a new scope, it should be fine
    if (node.type == Syntax.AssignmentExpression) {
        return toGLSLType(node.extra) + " " + handler.expression(node.left) + " = " + handler.expression(node.right);
    }
    Shade.throwError(node, "Internal error in GLSL::handleInlineDeclaration, found " + node.type);
}


exports.generate = generate;



},{"../../utils":206,"../base/expression-handler.js":145,"./../../interfaces.js":188,"estraverse":61}],167:[function(require,module,exports){
var GLObjects = new Map();

GLObjects.set("Math", require("./math.js"));
GLObjects.set("Vec2", require("./vec2.js"));
GLObjects.set("Vec3", require("./vec3.js"));
GLObjects.set("Vec4", require("./vec4.js"));
GLObjects.set("System", require("./system.js"));

var TypeSystem = require("../../../type-system/type-system.js");

    var Scope = require("../../../utils/").Scope,
        Context = require("../../../base/context.js"),
        Base = require("../../../base/index.js"),
        common = require("../../../base/common.js");


    var objects = {
        Shade : require("./shade.js"),
        Space : require("./space.js"),
        Math : require("./math.js"),
        System : require("./system.js"),
        Vec2 : require("./vec2.js"),
        Vec3 : require("./vec3.js"),
        Color: require("./vec3.js"),
        Vec4 : require("./vec4.js"),
        Mat3 : require("./mat3.js"),
        Mat4 : require("./mat4.js"),
        Texture : require("./texture.js")
    };

    var Registry = {
        name: "GLSLTransformRegistry",
        getByName: function(name) {
            var result = objects[name];
            return result || null;
        },
        getInstanceForKind: function(kind) {
            for(var obj in objects) {
                //noinspection JSUnfilteredForInLoop
                if (objects[obj].kind == kind) {
                    //noinspection JSUnfilteredForInLoop
                    return objects[obj].instance;
                }
            }
            return null;
        }
    };


    /**
     * @param root
     * @param {string} entry
     * @param opt
     * @extends {Context}
     * @constructor
     */
    var GLTransformContext = function(root, entry, vertexShader, opt) {
        opt.mainFunction = entry;
        Context.call(this, root, opt);
        this.usedParameters = {
            environment: {},
            system: {},
            uexp: {}
        };

        this.outputs = opt.outputs || ["color"];
        this.uniformExpressions = opt.uniformExpressions || {};

        this.vertexShader = vertexShader;
        this.systemParameters = {};
        this.blockedNames = [];
        this.topDeclarations = [];
        this.internalFunctions = {};
        this.idNameMap = {};
        this.headers = []; // Collection of header lines to define

        this.globalParameters = root.globalParameters && root.globalParameters[entry] && root.globalParameters[entry][0] ? root.globalParameters[entry][0].extra.info : {};


    };

    Base.createClass(GLTransformContext, Context, {
        createScope: function(node, parent, name) {
            return new GLTransformScope(node, parent, {name: name});
        },
        getTypeInfo: function(node) {
            return common.getTypeInfo(node, this.getScope());
        },
        addHeader: function(headerStr) {
            if (this.headers.indexOf(headerStr) == -1) {
                this.headers.push(headerStr);
            }
        }
    });

    /**
     * @constructor
     * @extends {Scope}
     */
    var GLTransformScope = function(node, parentScope, opt) {
        Scope.call(this, node, parentScope, opt);
    };

    Base.createClass(GLTransformScope, Scope, {

        registerGlobals: function() {

            this.declarePredefined("Math", TypeSystem.getPredefinedObject("Math"));
		    this.declarePredefined("Vec2", TypeSystem.getPredefinedObject("Vec2"));
		    this.declarePredefined("Vec3", TypeSystem.getPredefinedObject("Vec3"));
		    this.declarePredefined("Vec4", TypeSystem.getPredefinedObject("Vec4"));

            //console.log(TypeSystem.getPredefinedObject("Vec3"));
            //this.declarePredefined("Vec3", TypeSystem.getPredefinedObject("Vec3"));

            /*this.registerObject("Math", objects.Math);
            this.registerObject("Color",  objects.Color);
            this.registerObject("Vec2", objects.Vec2);
            this.registerObject("Vec3", objects.Vec3);
            this.registerObject("Vec4", objects.Vec4);
            this.registerObject("Texture", objects.Texture);
            this.registerObject("Shade", objects.Shade);
            this.registerObject("Mat3", objects.Mat3);
            this.registerObject("Mat4", objects.Mat4);
            this.registerObject("Space", objects.Space);

            this.declare("gl_FragCoord", false);
            this.updateTypeInfo("gl_FragCoord", new TypeInfo({
                extra: {
                    type: Types.OBJECT,
                    kind: "Vec3"
                }
            }));*/
        }
    });



    module.exports = {
        GLTransformScope : GLTransformScope,
        GLTransformContext : GLTransformContext,
        GLObjects: GLObjects
    };


},{"../../../base/common.js":140,"../../../base/context.js":141,"../../../base/index.js":142,"../../../type-system/type-system.js":202,"../../../utils/":206,"./mat3.js":168,"./mat4.js":169,"./math.js":170,"./shade.js":171,"./space.js":172,"./system.js":173,"./texture.js":174,"./vec2.js":175,"./vec3.js":176,"./vec4.js":177}],168:[function(require,module,exports){
(function(ns){

    var Shade = require("../../../interfaces.js");
    var Syntax = require('estraverse').Syntax;
    var Tools = require("../../tools.js");

    var TYPES = Shade.TYPES,
        KINDS = Shade.OBJECT_KINDS;

    var Mat3Instance = {
        col: {
            callExp: Tools.Mat.generateColCall.bind(null, "Mat3")
        }
    }
    Tools.Mat.attachOperators(Mat3Instance, "Mat3", {
        add: '+',
        sub: '-',
        mul: '*',
        div: '/'
    });
    Tools.Vec.attachOperators(Mat3Instance, 3, {
        mulVec: '*'
    });


    Tools.extend(ns, {
        id: "Mat3",
        kind: KINDS.MATRIX3,
        object: {
            constructor: Tools.Vec.generateConstructor,
            static: {}
        },
        instance: Mat3Instance
    });

}(exports));

},{"../../../interfaces.js":188,"../../tools.js":182,"estraverse":61}],169:[function(require,module,exports){
(function(ns){

    var Shade = require("../../../interfaces.js");
    var Syntax = require('estraverse').Syntax;
    var Tools = require("../../tools.js");

    var TYPES = Shade.TYPES,
        KINDS = Shade.OBJECT_KINDS;

    var Mat4Instance = {
        col: {
            callExp: Tools.Mat.generateColCall.bind(null, "Mat4")
        }
    }
    Tools.Mat.attachOperators(Mat4Instance, "Mat4", {
        add: '+',
        sub: '-',
        mul: '*',
        div: '/'
    });
    Tools.Vec.attachOperators(Mat4Instance, 4, {
        mulVec: '*'
    });


    Tools.extend(ns, {
        id: "Mat4",
        kind: KINDS.MATRIX4,
        object: {
            constructor: Tools.Vec.generateConstructor,
            static: {}
        },
        instance: Mat4Instance
    });

}(exports));

},{"../../../interfaces.js":188,"../../tools.js":182,"estraverse":61}],170:[function(require,module,exports){
var Tools = require("../../tools.js");
var TypeInfo = require("../../../type-system/typeinfo.js");

var MathConstants = ["E", "PI", "LN2", "LOG2E", "LOG10E", "PI", "SQRT1_2", "SQRT2"];

// TODO: Implement saturate
// TODO: Rename atan
// TODO: Handle ceil?

var MathCall = function (node, name) {
    // Remove Math.
    node.callee = Tools.removeMemberFromExpression(node.callee);

    // Cast all arguments of the math function to float, as they are
    // not defined for other types (int, bool)
    // Don't replace the arguments array, it's already cached by the traversal
    node.arguments.forEach(function (arg, i) {
        var t = new TypeInfo(arg.extra);
        if (t.isInt()) {
            node.arguments[i] = Tools.castToFloat(node.arguments[i]);
        }
    });
    return node;
};

var MathProperty = function (node, name) {
    if(MathConstants.indexOf(name) != -1) {
        return {type: 'Literal', value: Math[name], extra: {type: "number"}};
    }
};

module.exports = {
    call: MathCall,
    property: MathProperty
};


},{"../../../type-system/typeinfo.js":203,"../../tools.js":182}],171:[function(require,module,exports){
(function (ns) {

    var Shade = require("../../../interfaces.js");
    var Syntax = require('estraverse').Syntax;
    var Tools = require("../../tools.js");

    var ShadeInstance = {
        mix: { callExp: function(node, args) {
            node.callee = Tools.removeMemberFromExpression(node.callee);
            return node;
        }}
    }

    Tools.extend(ns, {
        id: "Shade",
        kind: Shade.OBJECT_KINDS.COLOR_CLOSURE,
        object: {
            constructor: Tools.Vec.generateConstructor,
            static: ShadeInstance
        },
        instance: ShadeInstance
    });

}(exports));

},{"../../../interfaces.js":188,"../../tools.js":182,"estraverse":61}],172:[function(require,module,exports){
(function(ns){

    var Shade = require("../../../interfaces.js");
    var Syntax = require('estraverse').Syntax;
    var Tools = require("../../tools.js");


    function getSpaceTransform(spaceArg, normal){
        if( spaceArg.type != Syntax.MemberExpression ||
            spaceArg.object.type != Syntax.Identifier ||
            spaceArg.object.name != "Space" ||
            spaceArg.property.type != Syntax.Identifier)
            Shade.throwError(spaceArg, "We only support Space enums for the first argument of transformDirection and transformPoint");

        switch(spaceArg.property.name){
            case "VIEW": return normal ? "modelViewMatrixN" : "modelViewMatrix";
            case "WORLD": return normal ? "modelMatrixN" : "modelMatrix";
            default: Shade.throwError(spaceArg, "Unknown Space Type: '" + spaceArg.property.name + "'");
        }
    }

    var annotate = require("../../../utils").annotate;
    var TYPES = Shade.TYPES,
        KINDS = Shade.OBJECT_KINDS;
    var SpaceEntry  = {
        transformDirection: { callExp: function(callExpression, parent, context, state){
            var transform = getSpaceTransform(callExpression.arguments[0], true);
            var result = {  type: Syntax.BinaryExpression, operator: "*",
                            left: { type: Syntax.Identifier, name: transform},
                            right: callExpression.arguments[1]
            };

            annotate(result).setType(TYPES.OBJECT, KINDS.FLOAT3);
            annotate(result.left).setType(TYPES.OBJECT, KINDS.MATRIX3);
            annotate(result.right).setType(TYPES.OBJECT, KINDS.FLOAT3);

            var systemName = Tools.getNameForSystem(transform);
            state.usedParameters.system[systemName] = state.systemParameters[transform];

            return result;
        } },
        transformPoint: { callExp: function(callExpression, parent, context, state){
            var transform = getSpaceTransform(callExpression.arguments[0], false);
            var result = {  type: Syntax.MemberExpression,
                            object: {  type: Syntax.BinaryExpression, operator: "*",
                                left: { type: Syntax.Identifier, name: transform},
                                right: {type: Syntax.CallExpression,
                                   callee: {type: Syntax.Identifier, name: "vec4"},
                                   arguments: [
                                        callExpression.arguments[1],
                                        { type: Syntax.Literal, value: 1, raw: 1}
                                   ]
                                }
                            },
                            property: { type: Syntax.Identifier, name: "xyz" }
                          };
            annotate(result).setType(TYPES.OBJECT, KINDS.FLOAT3);
            annotate(result.object).setType(TYPES.OBJECT, KINDS.FLOAT4);
            annotate(result.object.left).setType(TYPES.OBJECT, KINDS.MATRIX4);
            annotate(result.object.right).setType(TYPES.OBJECT, KINDS.FLOAT4);
            annotate(result.object.right.arguments[1]).setType(TYPES.NUMBER);


            var systemName = Tools.getNameForSystem(transform);
            state.usedParameters.system[systemName] = state.systemParameters[transform];

            return result;
        } },
        VIEW: {
            property: function (memberExpression) {
                return memberExpression;
            }},
        WORLD: {
            property: function (memberExpression) {
                return  memberExpression;
            }}
    };

    Tools.extend(ns, {
        id: "Space",
        object: {
            constructor: null,
            static: SpaceEntry
        },
        instance: SpaceEntry
    });

}(exports));

},{"../../../interfaces.js":188,"../../../utils":206,"../../tools.js":182,"estraverse":61}],173:[function(require,module,exports){
// Dependencies
var Shade = require("../../../interfaces.js");
var Tools = require("../../tools.js");
var Syntax = require('estraverse').Syntax;

// Shortcuts
var TYPES = Shade.TYPES,
    KINDS = Shade.OBJECT_KINDS;


var SystemDefines = {};
SystemDefines.CANVAS_DIMENSIONS = "coords";
SystemDefines.DERIVATE_EXTENSION = "#extension GL_OES_standard_derivatives : enable";

var CoordsType = {
    type: Shade.TYPES.OBJECT,
    kind: Shade.OBJECT_KINDS.FLOAT3,
    source: Shade.SOURCES.UNIFORM
};


var SystemProperties = {
    coords: function (node) {
            node.property.name = "gl_FragCoord";
            return node.property;
    },
    normalizedCoords:  function () {
            return {
                type: Syntax.NewExpression,
                callee: {
                    type: Syntax.Identifier,
                    name: "Vec3"
                },
                arguments: [
                    {
                        type: Syntax.BinaryExpression,
                        left: {
                            type: Syntax.MemberExpression,
                            object: {
                                type: Syntax.Identifier,
                                name: "gl_FragCoord"
                            },
                            property: {
                                type: Syntax.Identifier,
                                name: "xyz"
                            }
                        },
                        right: {
                            type: Syntax.Identifier,
                            name: SystemDefines.CANVAS_DIMENSIONS
                        },
                        operator: "/",
                        extra: {
                            type: Shade.TYPES.OBJECT,
                            kind: "Vec3"
                        }
                    }
                ],
                extra: {
                    type: Shade.TYPES.OBJECT,
                    kind: "Vec3"
                }
            }
    },
    height:  function (node) {
            var parameterName = Tools.getNameForSystem(SystemDefines.CANVAS_DIMENSIONS);
            state.usedParameters.system[parameterName] = state.systemParameters[SystemDefines.CANVAS_DIMENSIONS];

            node.property.name = parameterName + ".y";
            return node.property;
    },
    width:  function (node) {
            var parameterName = Tools.getNameForSystem(SystemDefines.CANVAS_DIMENSIONS);
            state.usedParameters.system[parameterName] = state.systemParameters[SystemDefines.CANVAS_DIMENSIONS];

            node.property.name = parameterName + ".x";
            return node.property;
    },
    fwidth: function (node, context) {
            context.addHeader(SystemDefines.DERIVATE_EXTENSION);
            return Tools.removeMemberFromExpression(node);
    },
    dx: function (node, context) {
            context.addHeader(SystemDefines.DERIVATE_EXTENSION);
            var result = Tools.removeMemberFromExpression(node);
            result.name = "dFdx";
            return result;
    },
    dy:  function (node, context) {
            context.addHeader(SystemDefines.DERIVATE_EXTENSION);
            var s = Tools.removeMemberFromExpression(node);
            var result = Tools.removeMemberFromExpression(node);
            result.name = "dFdy";
            return result;
    }

};

module.exports = {
    call: function (node, name) {},
    property: function (node, name, context) {
        if(SystemProperties.hasOwnProperty(name)) {
            return SystemProperties[name](node, context);
        }

    }
};

},{"../../../interfaces.js":188,"../../tools.js":182,"estraverse":61}],174:[function(require,module,exports){
(function(ns){

    var Shade = require("../../../interfaces.js");
    var Syntax = require('estraverse').Syntax;
    var Tools = require("../../tools.js");

    var TYPES = Shade.TYPES,
        KINDS = Shade.OBJECT_KINDS;

    var TextureInstance = {
        sample2D: {
            callExp: Tools.Vec.createFunctionCall.bind(null, 'texture2D', 2)
        },
        width: {
            property: function (node, parent, context, state) {
                var parameterName = node.object.name;
                node.property.name = parameterName + "_width";
                state.usedParameters.shader[parameterName + "_width"] = {
                    type: Shade.TYPES.INT,
                    kind: Shade.OBJECT_KINDS.INT,
                    source: Shade.SOURCES.UNIFORM
                };
                return node.property;
            }
        },
        height: {
            property: function (node, parent, context, state) {
                var parameterName = node.object.name;
                node.property.name = parameterName + "_height";
                state.usedParameters.shader[parameterName + "_height"] = {
                    type: Shade.TYPES.INT,
                    kind: Shade.OBJECT_KINDS.INT,
                    source: Shade.SOURCES.UNIFORM
                };
                return node.property;
            }
        }
    }

    Tools.extend(ns, {
        id: "Texture",
        kind: KINDS.TEXTURE,
        object: {
            constructor: null,
            static: {}
        },
        instance: TextureInstance
    });

}(exports));

},{"../../../interfaces.js":188,"../../tools.js":182,"estraverse":61}],175:[function(require,module,exports){
var Shade = require("../../../interfaces.js");
var Syntax = require('estraverse').Syntax;
var Tools = require("../../tools.js");

var TYPES = Shade.TYPES,
    KINDS = Shade.OBJECT_KINDS;

var Vec2Instance = {
    normalize: {
        callExp: Tools.Vec.createFunctionCall.bind(null, 'normalize', 0)
    },
    flip: {
        callExp: Tools.Vec.createFunctionCall.bind(null, '-', 0)
    },
    dot: {
        callExp: Tools.Vec.createFunctionCall.bind(null, 'dot', 2)
    },
    reflect: {
        callExp: Tools.Vec.createFunctionCall.bind(null, 'reflect', 2)
    },
    length: {
        callExp: Tools.Vec.generateLengthCall
    }
};

Tools.Vec.attachSwizzles(Vec2Instance, 2, Tools.Vec.createSwizzle, Tools.Vec.createSwizzleOperator);

Tools.Vec.attachOperators(Vec2Instance, 2, {
    add: '+',
    sub: '-',
    mul: '*',
    div: '/',
    mod: '%'
});


module.exports = {
    call: function (node, name) {
        if (Vec2Instance.hasOwnProperty(name)) {
            return Vec2Instance[name].callExp(node)
        }
    },
    property: function () {
    }
};

},{"../../../interfaces.js":188,"../../tools.js":182,"estraverse":61}],176:[function(require,module,exports){
var Tools = require("../../tools.js");
var TypeInfo = require("../../../type-system/typeinfo.js");


var Vec3Instance = {
    normalize: {
        callExp: Tools.Vec.createFunctionCall.bind(null, 'normalize', 0)
    },
    flip: {
        callExp: Tools.Vec.createFunctionCall.bind(null, '-', 0)
    },
    dot: {
        callExp: Tools.Vec.createFunctionCall.bind(null, 'dot', 3)
    },
    reflect: {
        callExp: Tools.Vec.createFunctionCall.bind(null, 'reflect', 3)
    },
    refract: {
        callExp: function (node, args, parent) {
            var eta = node.arguments.pop();
            var result = Tools.Vec.createFunctionCall("refract", 3, node);
            new TypeInfo(eta.extra).setType("number");
            result.arguments.push(eta);
            return result;
        }
    },
    length: {
        callExp: Tools.Vec.generateLengthCall
    },
    cross: {
        callExp: Tools.Vec.createFunctionCall.bind(null, "cross", 3)
    }
};

Tools.Vec.attachSwizzles(Vec3Instance, 3, Tools.Vec.createSwizzle, Tools.Vec.createSwizzleOperator);
Tools.Vec.attachOperators(Vec3Instance, 3, {
    add: '+',
    sub: '-',
    mul: '*',
    div: '/',
    mod: '%'
});


function Vec3Call(node, name) {
    if (Vec3Instance.hasOwnProperty(name)) {
        return Vec3Instance[name].callExp(node)
    }
}

module.exports = {
    call: Vec3Call,
    property: function () {
    }
};

},{"../../../type-system/typeinfo.js":203,"../../tools.js":182}],177:[function(require,module,exports){
var Tools = require("../../tools.js");

var Vec4Instance = {
    normalize: {
        callExp: Tools.Vec.createFunctionCall.bind(null, 'normalize', 0)
    },
    flip: {
        callExp: Tools.Vec.createFunctionCall.bind(null, '-', 0)
    },
    dot: {
        callExp: Tools.Vec.createFunctionCall.bind(null, 'dot', 4)
    },
    reflect: {
        callExp: Tools.Vec.createFunctionCall.bind(null, 'reflect', 4)
    },
    length: {
        callExp: Tools.Vec.generateLengthCall
    }
}
Tools.Vec.attachSwizzles(Vec4Instance, 4, Tools.Vec.createSwizzle, Tools.Vec.createSwizzleOperator);
Tools.Vec.attachOperators(Vec4Instance, 4, {
    add: '+',
    sub: '-',
    mul: '*',
    div: '/',
    mod: '%'
})


module.exports = {
    call: function (node, name) {
        if (Vec4Instance.hasOwnProperty(name)) {
            return Vec4Instance[name].callExp(node)
        }
    },
    property: function () {
    }
};

},{"../../tools.js":182}],178:[function(require,module,exports){
var Base = require("../../base/index.js"),
    common = require("../../base/common.js"),
    Shade = require("./../../interfaces.js"),
    Types = Shade.TYPES,
    analyses = require('analyses'),
    Tools = require('../tools.js'),
    System = require('./registry/system.js'),
    assert = require('assert'),
    TypeInfo = require("../../type-system/typeinfo.js");


var Context = require("./registry/").GLTransformContext;
var GLObjects = require("./registry/").GLObjects;


var walk = require('estraverse');
var Syntax = walk.Syntax;
var ANNO = common.ANNO;
var Set = analyses.Set;


/**
 * Transforms the JS AST to an AST representation convenient
 * for code generation
 * @constructor
 */
var GLASTTransformer = function (root, mainId, vertexShader, opt) {
    this.context = new Context(root, mainId, vertexShader, opt);
};

function createUniformDependencyMap(uniformExpressions) {
    var name, uexpSet, dependencies, dependency, dl, dependencyMap = new Map();
    for (name in uniformExpressions) {
        dependencies = uniformExpressions[name].getUniformDependencies();
        dl = dependencies.length;
        while (dl--) {
            dependency = dependencies[dl];
            if (dependencyMap.has(dependency)) {
                uexpSet = dependencyMap.get(dependency);
            } else {
                uexpSet = new Set();
                dependencyMap.set(dependency, uexpSet);
            }
            uexpSet.add(name);
        }
    }
    return dependencyMap;
}

Base.extend(GLASTTransformer.prototype, {
    /**
     *
     * @param {GLTransformScope} scope
     */
    registerThisObject: function (scope) {
        /*var thisObject = scope.getBindingByName("this");
         if (thisObject && thisObject.isObject()) {
         var properties = thisObject.getNodeInfo();
         for (var name in properties) {
         var prop = ANNO({}, properties[name]);
         if (!prop.isDerived())
         this.context.blockedNames.push(Tools.getNameForSystem(name));
         }
         for (var property in System.derivedParameters) {
         if(properties.hasOwnProperty(property)) {
         Base.deepExtend(properties[property], System.derivedParameters[property]);
         }
         }
         Base.extend(this.context.systemParameters, properties);
         } */
    },


    createUniformSetterFunction: function (parameters) {
        // Reverse uniform expression dependencies
        var c_dependencyMap = createUniformDependencyMap(parameters.uexp);

        return function (envNames, sysNames, inputCollection, cb) {
            var i, base, override, srcName, destName, ul, uniformList;
            if (envNames && inputCollection.envBase) {
                i = envNames.length;
                base = inputCollection.envBase;
                override = inputCollection.envOverride;
                while (i--) {
                    srcName = envNames[i];
                    if (c_dependencyMap.has(srcName)) {
                        uniformList = c_dependencyMap.get(srcName).values();
                        ul = uniformList.length;
                        while (ul--) {
                            var expName = uniformList[ul];
                            var expression = parameters.uexp[expName];
                            var value = expression.setter.call(Shade, inputCollection.envBase);
                            cb(expName, value);
                        }
                    }
                    destName = Tools.getNameForGlobal(envNames[i]);
                    if (!parameters.shader[destName])
                        continue;
                    cb(destName, override && override[srcName] !== undefined ? override[srcName] : base[srcName]);
                    if (parameters.shader[destName].kind === Shade.OBJECT_KINDS.TEXTURE) {
                        cb(destName + "_width", override && override[srcName] !== undefined ? override[srcName].width : base[srcName] && base[srcName][0].width || 0);
                        cb(destName + "_height", override && override[srcName] !== undefined ? override[srcName].height : base[srcName] && base[srcName][0].height || 0)
                    }
                }
            }
            if (sysNames && inputCollection.sysBase) {
                i = sysNames.length;
                base = inputCollection.sysBase;
                while (i--) {
                    srcName = sysNames[i];
                    destName = Tools.getNameForSystem(sysNames[i]);
                    cb(destName, base[srcName]);
                }
            }
        }

    },

    transform: function () {
        var context = this.context,
            program = context.root,
            scope = context.createScope(program, null, "global"),
            name, declaration;

        scope.registerGlobals();
        context.pushScope(scope);

        // TODO: We should also block systemParameters here. We can block all system names, even if not used.
        for (name in context.globalParameters) {
            context.blockedNames.push(Tools.getNameForGlobal(name));
        }

        this.replace(program);

        var usedParameters = context.usedParameters;
        for (var container in usedParameters) {
            for (name in usedParameters[container]) {
                var typeInfo = usedParameters[container][name];
                assert(typeInfo instanceof TypeInfo);
                declaration = createTopDeclaration(name, typeInfo);
                declaration && program.body.unshift(declaration);
            }
        }

        var uniformSetter = this.createUniformSetterFunction(usedParameters);

        var userData = ANNO(program).getUserData();
        userData.internalFunctions = context.internalFunctions;

        return {program: program, uniformSetter: uniformSetter, headers: context.headers};
    },
    /**
     *
     * @param {Object!} ast
     * @returns {*}
     */
    replace: function (ast) {
        var controller = new walk.Controller(),
            context = this.context,
            that = this;

        ast = controller.replace(ast, {

            enter: function (node, parent) {

                switch (node.type) {
                    case Syntax.Identifier:
                        return enterIdentifier(node, parent, context);
                    case Syntax.IfStatement:
                        return enterIfStatement(node);
                    case Syntax.FunctionDeclaration:
                        return enterFunctionDeclaration(node, context);
                }
            },

            leave: function (node, parent) {
                switch (node.type) {
                    case Syntax.MemberExpression:
                        return leaveMemberExpression(node, parent, context);
                    case Syntax.NewExpression:
                        return leaveNewExpression(node, context);
                    case Syntax.LogicalExpression:
                        return leaveLogicalExpression(node);
                    case Syntax.CallExpression:
                        return leaveCallExpression(node, parent, context);
                    case Syntax.UnaryExpression:
                        return leaveUnaryExpression(node);
                    case Syntax.FunctionDeclaration:
                        return leaveFunctionDeclaration(node, context);
                    case Syntax.ReturnStatement:
                        return leaveReturnStatement(node, context);
                    case Syntax.BinaryExpression:
                        return handleBinaryExpression(node, parent, context);

                }
            }
        });
        return ast;
    }
});

/**
 * @param {string} name
 * @param {object} typeInfo
 * @returns {*}
 */
var createTopDeclaration = function (name, typeInfo) {
    var propertyLiteral = {type: Syntax.Identifier, name: name};
    var propertyAnnotation = ANNO(propertyLiteral);
    propertyAnnotation.copyFrom(typeInfo);

    if (propertyAnnotation.isNullOrUndefined() || propertyAnnotation.isDerived() || propertyAnnotation.isFunction())
        return;

    if (propertyAnnotation.isOfType(Types.ARRAY) && typeInfo.staticSize == 0)
        return;

    var decl = {
        type: Syntax.VariableDeclaration,
        declarations: [
            {
                type: Syntax.VariableDeclarator,
                id: propertyLiteral,
                init: null
            }
        ],
        kind: "var"
    };
    var declAnnotation = ANNO(decl.declarations[0]);
    declAnnotation.copyFrom(propertyAnnotation);
    return decl;
};

var enterIdentifier = function (node, parent, state) {
    var blockedNames = state.blockedNames;
    var idNameMap = state.idNameMap;

    if (parent.type == Syntax.MemberExpression)
        return node;
    var name = node.name;
    if (idNameMap[name]) {
        node.name = idNameMap[name];
        return node;
    }
    var newName = Tools.generateFreeName(name, blockedNames);
    idNameMap[name] = newName;
    node.name = newName;
    return node;
};


/**
 * Transform a !number expression into an binary expression, number == 0
 * @param node
 * @returns {*}
 */
var leaveUnaryExpression = function (node) {
    if (node.operator == "!") {
        var argument = ANNO(node.argument);
        //noinspection FallthroughInSwitchStatementJS
        switch (argument.getType()) {
            case Types.INT:
            case Types.NUMBER:
                return {
                    type: Syntax.BinaryExpression,
                    operator: "==",
                    left: node.argument,
                    right: {
                        type: Syntax.Literal,
                        value: 0,
                        extra: {
                            type: argument.getType()
                        }
                    }
                };
                break;
        }
    }
};

/**
 * A return in the main functions sets gl_FragColor or discard if the
 * main method returns without argument
 * @param node
 * @param {GLTransformContext} context
 * @returns {*}
 */
var leaveReturnStatement = function (node, context) {
        var scope = context.getScope(), fragColors;

        if (!context.inMainFunction()) {
            return;
        }

        if (node.argument) {
            var argument = ANNO(node.argument);
            if (argument.isArray()) {
                context.addHeader("#extension GL_EXT_draw_buffers : require");
                fragColors = {type: Syntax.BlockStatement, body: []};
                node.argument.elements.forEach(function (element, index) {
                    fragColors.body.push(createGLFragColor(Tools.castToVec4(element, scope), index, context));
                });
            } else if (!argument.getKind()) {
                assert(node.argument.type == Syntax.ObjectExpression, "GLSL currently support object expressions as output only.");

                var outputs = node.argument.properties.filter(function (p) {
                    return p.key.type == Syntax.Identifier && context.outputs.indexOf(p.key.name) != -1;
                });

                fragColors = {type: Syntax.BlockStatement };
                fragColors.body = outputs.map(function (p) {
                    return createGLFragColor(Tools.castToVec4(p.value, scope), context.outputs.indexOf(p.key.name) , context);
                })


            } else {
                fragColors = createGLFragColor(Tools.castToVec4(node.argument, scope), undefined, context);
            }
            return {
                type: Syntax.BlockStatement,
                body: [fragColors, {type: Syntax.ReturnStatement}]
            };

        }
        else {
            return {
                type: Syntax.ExpressionStatement,
                expression: {
                    type: Syntax.Identifier,
                    name: "discard"
                }
            }
        }
    }
    ;

/**
 * Transform the main function into a GLSL conform main function
 * with signature 'void main(void)'
 * @param node
 */
var leaveMainFunction = function (node) {
    var anno = new TypeInfo(node.extra);
    anno.setReturnInfo({type: Types.UNDEFINED});

    // Main has no parameters
    node.params = [];
    // Rename to 'main'
    node.id.name = "main";
    //console.log(node);
};

function createGLFragColor(result, index, context) {
    var name;
    if (context.vertexShader) {
        name = "gl_Position";
    }
    else if (index !== undefined) {
        name = "gl_FragData[" + index + "]";
    }
    else {
        name = "gl_FragColor";
    }

    return {
        type: Syntax.AssignmentExpression,
        operator: "=",
        left: {
            type: Syntax.Identifier,
            name: name
        },
        right: result
    };
}

function getNameOfNode(node) {
    switch (node.type) {
        case Syntax.Identifier:
            return node.name;
        case Syntax.MemberExpression:
            return getNameOfNode(node.object) + "." + getNameOfNode(node.property);
        case Syntax.NewExpression:
            return getNameOfNode(node.callee);
        default:
            return "unknown(" + node.type + ")";
    }
}

/**
 *
 * @param {object} node
 * @param {object} parent
 * @param {GLTransformContext} context
 * @returns {*}
 */
var leaveCallExpression = function (node, parent, context) {
    var scope = context.getScope();

    /** Filter out undefined arguments, we do the same for the declaration */
    node.arguments = node.arguments.filter(validParameters);

    // Is this a call on an object?
    if (node.callee.type == Syntax.MemberExpression) {
        var calleeReference = common.getTypeInfo(node.callee, scope);
        assert(calleeReference && calleeReference.isFunction(), "Expected function but found: " + calleeReference);

        var object = node.callee.object,
            propertyName = node.callee.property.name;

        var objectReference = common.getTypeInfo(object, scope);
        assert(objectReference && objectReference.isObject(), "Expected object to call but found: " + objectReference);
        assert(objectReference.hasProperty(propertyName), "Expected object to have a property: " + propertyName);
        return handleMethodCall(node, objectReference, propertyName);
    }
};

var leaveNewExpression = function (newExpression, context) {
    var scope = context.getScope();
    if (!newExpression.arguments.length) {
        return Tools.Vec.generateConstructor(newExpression);
    }
};


/**
 *
 * @param {object} node
 * @param {object} parent
 * @param {GLTransformContext} context
 * @returns {*}
 */
var leaveMemberExpression = function (node, parent, context) {
    var propertyName = node.property.name,
        scope = context.getScope();

    if (node.computed) {
        return handleComputedMemberExpression(node, parent, context);
    }

    if (ANNO(node).isUniformExpression()) {
        var uexp = handleUniformExpression(node, context);
        if (uexp)
            return uexp;
    }

    var objectReference = common.getTypeInfo(node.object, scope);
    assert(objectReference && objectReference.isObject(), "Object of Member expression is not an object.");
    assert(objectReference.hasProperty(propertyName), "Object of Member expression has no property '" + propertyName + "'");
    return handleStaticMemberExpression(node, objectReference, propertyName, context);

    // There is a specual handling defined for the object
    /*if (objectInfo.hasOwnProperty(propertyName)) {
     var propertyHandler = objectInfo[propertyName];
     if (typeof propertyHandler.property == "function") {
     return propertyHandler.property(node, parent, scope, context);
     }
     }


     if (node.object.type == Syntax.ThisExpression) {
     parameterName = Tools.getNameForSystem(propertyName);
     if (!usedParameters.system.hasOwnProperty(parameterName)) {
     usedParameters.system[parameterName] = context.systemParameters[propertyName];
     }

     propertyLiteral = {type: Syntax.Identifier, name: parameterName};
     ANNO(propertyLiteral).copy(ANNO(node));
     return propertyLiteral;
     } */

};

var handleStaticMemberExpression = function (node, object, propertyName, context) {
    if (object.isPredefinedObject()) {
        if (GLObjects.has(object.getKind())) {
            var objectHandler = GLObjects.get(object.getKind());
            return objectHandler.property(node, propertyName, context);
        }
        console.log("Unhandled property", object.getKind(), propertyName);
    }
    if (object.isGlobal()) {
        var usedParameters = context.usedParameters;
        var parameterName = Tools.getNameForGlobal(propertyName);

        if (!usedParameters.environment.hasOwnProperty(parameterName)) {
            usedParameters.environment[parameterName] = ANNO(node);
        }

        var propertyLiteral = {type: Syntax.Identifier, name: parameterName};
        ANNO(propertyLiteral).copyFrom(ANNO(node));
        return propertyLiteral;
    }
    return node;
};

var handleMethodCall = function (node, object, methodName) {
    if (object.isPredefinedObject()) {
        if (GLObjects.has(object.getKind())) {
            var objectHandler = GLObjects.get(object.getKind());
            return objectHandler.call(node, methodName);
        }
        console.log("Unhandled call", object.getKind(), methodName);
    }
    return node;
};

/**
 * @param {object} node
 * @param {object} parent
 * @param {GLASTTransformer} context
 */
var handleComputedMemberExpression = function (node, parent, context) {
    var objectReference = context.getTypeInfo(node.object);
    if (!objectReference.isArray()) {
        Shade.throwError(node, "In shade.js, [] access is only allowed on arrays.");
    }
    var propertyType = context.getTypeInfo(node.property);
    if (!propertyType.canInt()) {
        node.property = {
            type: Syntax.CallExpression,
            callee: {type: "Identifier", name: "int"},
            arguments: [node.property]
        }
        ANNO(node.property).setType(Types.INT);
    }
    return node;
};


/**
 * @param {object} node
 * @param {object} parent
 * @param {GLASTTransformer} context
 */
var handleBinaryExpression = function (node, parent, context) {
    // In GL, we can't mix up floats, ints and bool for binary expressions
    var left = context.getTypeInfo(node.left),
        right = context.getTypeInfo(node.right);

    if (left.isNumber() && right.isInt()) {
        node.right = Tools.castToFloat(node.right);
    }
    else if (right.isNumber() && left.isInt()) {
        node.left = Tools.castToFloat(node.left);
    }

    if (node.operator == "%") {
        return Tools.binaryExpression2FunctionCall(node, "mod");
    }
    return node;
};

/*function castToInt(ast, force) {
 var exp = ANNO(ast);

 if (!exp.isInt() || force) {   // Cast
 return {
 type: Syntax.CallExpression,
 callee: {
 type: Syntax.Identifier,
 name: "int"
 },
 arguments: [ast]
 };
 }
 return ast;
 };*/

/**
 * @param {Object} node
 * @param {GLTransformContext} context
 * @returns {*}
 */
var enterFunctionDeclaration = function (node, context) {
    var scope = context.createScope(node, context.getScope(), node.id.name);
    context.pushScope(scope);

    // Remove global parameters and parameters of type undefined (these are not used anyway)
    node.params = node.params.filter(validParameters);
    return node;
};

/**
 * @param {Object} node
 * @param {GLTransformContext} context
 * @returns {*}
 */
var leaveFunctionDeclaration = function (node, context) {
    var wasMain = context.inMainFunction();
    context.popScope();
    if (wasMain)
        return leaveMainFunction(node);
};


var enterIfStatement = function (node) {
    var test = ANNO(node.test);

    assert(!test.hasConstantValue(), "Static value in IfStatement test");
    assert(!test.isObject(), "Object in IfStatement test");

    //noinspection FallthroughInSwitchStatementJS
    switch (test.getType()) {
        // Transform 'if(number)' into 'if(number != 0)'
        case Types.INT:
        case Types.NUMBER:
            node.test = {
                type: Syntax.BinaryExpression,
                operator: "!=",
                left: node.test,
                right: {
                    type: Syntax.Literal,
                    value: 0,
                    extra: {
                        type: test.getType()
                    }
                }
            };
            break;
    }
};

/**
 * Need to transform truth expressions in real boolean expression, because something like if(0) is
 * not allowed in GLSL
 *
 * @param node
 * @returns {*}
 */
var leaveLogicalExpression = function (node) {
    var left = ANNO(node.left);
    var right = ANNO(node.right);

    if (left.isBool() && right.isBool()) {
        // Everything is okay, no need to modify anything
        return;
    }

    // Now we have to implement the JS boolean semantic for GLSL
    if (left.canNumber()) {
        var test = node.left;
        return {
            type: Syntax.ConditionalExpression,
            test: {
                type: Syntax.BinaryExpression,
                operator: "==",
                left: test,
                right: {
                    type: Syntax.Literal,
                    value: left.isNumber() ? 0.0 : left.isInt() ? 0 : "false",
                    extra: {
                        type: left.getType(),
                        staticValue: left.isNumber() ? 0.0 : left.isInt() ? 0 : "false"
                    }
                },
                extra: {type: Types.BOOLEAN}
            },
            consequent: node.right,
            alternate: test
        };
    }
};


function handleUniformExpression(node, context) {
    var exp = ANNO(node);

    assert.equal(node.type, Syntax.MemberExpression);

    if (exp.isUniformExpression() && !(exp.getSource() == Shade.SOURCES.UNIFORM)) {
        var uniformName = node.property.name;
        var result = {
            type: Syntax.Identifier,
            name: uniformName
        };

        if (context.usedParameters.uexp.hasOwnProperty(uniformName)) { // Reuse
            var typeInfo = context.usedParameters.uexp[uniformName];
            ANNO(result).copyFrom(typeInfo);
            return result;
        }

        // Generate new uniform expression
        assert(context.uniformExpressions.hasOwnProperty(uniformName), "Internal: No information about uniform expression available: " + Shade.toJavaScript(node));
        // Use typeinfo from node as basis
        var typeInfo = ANNO(result);
        typeInfo.copyFrom(exp);

        typeInfo.setter = generateUniformSetter(exp, context.uniformExpressions[uniformName]);

        //console.log(uniformName, extra.setter);

        typeInfo.setSource(Shade.SOURCES.UNIFORM);
        typeInfo.setUniformDependencies(exp.getUniformDependencies());

        context.usedParameters.uexp[uniformName] = typeInfo;

        return result;
    }
}

function generateUniformSetter(uniformAnno, expressionInfo) {
    var code = expressionInfo.code;
    if (uniformAnno.isObject())
        code = "(" + expressionInfo.code + ")._toFloatArray()";
    var source = "return " + code + ";";
    return new Function("env", source);
}

function addDeclaration(name, typeInfo, target) {
    var targetContainer, declaration;
    switch (target.type) {
        case Syntax.BlockStatement:
            targetContainer = target.body;
            break;
        default:
            throw new Error("Internal: addDeclaration to " + target.type);
    }
    if (targetContainer.length && targetContainer[0].type == Syntax.VariableDeclaration) {
        declaration = targetContainer[0];
        //console.log(declaration.declarations.push(declaration.declarations[0]));
    } else {
        declaration = {
            type: Syntax.VariableDeclaration,
            kind: "var",
            declarations: []
        }
        targetContainer.unshift(declaration);
    }
    var declarator = {
        type: Syntax.VariableDeclarator,
        id: {
            type: Syntax.Identifier,
            name: name
        },
        init: null
    };
    ANNO(declarator).copy(typeInfo);
    declaration.declarations.push(declarator);
}

function validParameters(p) {
    var ap = ANNO(p);
    return !(ap.isUndefined() || ap.isGlobal());
}

// Exports
module.exports = GLASTTransformer;



},{"../../base/common.js":140,"../../base/index.js":142,"../../type-system/typeinfo.js":203,"../tools.js":182,"./../../interfaces.js":188,"./registry/":167,"./registry/system.js":173,"analyses":46,"assert":25,"estraverse":61}],179:[function(require,module,exports){
(function (ns) {

    var walk = require('estraverse'),
        assert = require("assert"),
        Base = require("../../base/index.js"),
        common = require("./../../base/common.js");

    var SnippetList = function(){
        this.entries = [];
    }

    Base.extend(SnippetList.prototype, {
        addEntry: function(entry){
            this.entries.push(entry);
        }
    });

    var SnippetEntry = function(ast){
        this.inputInfo = [];
        this.outputInfo = [];
        this.ast = ast || null;
    }
 
    
    Base.extend(SnippetEntry.prototype, {
        setAst: function(ast){
            this.ast = ast;
        },
        addVertexInput: function(type, directInputIndex){
            var input = new SnippetInput(type, true, false);
            input.setDirectInput(directInputIndex);
            this.inputInfo.push(input);
        },
        addUniformInput: function(type, directInputIndex){
            var input = new SnippetInput(type, false, false);
            input.setDirectInput(directInputIndex);
            this.inputInfo.push(input);
        },
        addUniformArray: function(type, directInputIndex, arraySize){
            var input = new SnippetInput(type, false, true);
            input.setDirectInput(directInputIndex, arraySize);
            this.inputInfo.push(input);
        },
        addTransferInput: function(type, transferOperatorIndex, transferOutputIndex){
            var input = new SnippetInput(type, true, false);
            input.setTransferInput(transferOperatorIndex, transferOutputIndex);
            this.inputInfo.push(input);
        },
        addLostOutput: function(type, name){
            var output = new SnippetOutput(type, name);
            this.outputInfo.push(output);
        },
        addFinalOutput: function(type, name, index){
            var output = new SnippetOutput(type, name);
            output.setFinalOutputIndex(index);
            this.outputInfo.push(output);
        }
    });


    var SnippetInput = function(type, iterate, arrayAccess){
        this.type = type;
        this.iterate = iterate;
        this.arrayAccess = arrayAccess;
        this.transferOperatorIndex = undefined;
        this.transferOutputIndex = undefined;
        this.directInputIndex = undefined;
        this.arraySize = undefined;
    }

    Base.extend(SnippetInput.prototype, {
        setDirectInput: function(directInputIndex, arraySize){
            this.transferOperatorIndex = this.transferOutputIndex = undefined;
            this.directInputIndex = directInputIndex;
            this.arraySize = arraySize;
        },
        setTransferInput: function(transferOperatorIndex, transferOutputIndex){
            this.transferOperatorIndex = transferOperatorIndex;
            this.transferOutputIndex = transferOutputIndex;
            this.directInputIndex = undefined;
        },
        isTransferInput: function(){
            return this.transferOperatorIndex !== undefined;
        },
        getTransferInputKey: function(){
            return this.transferOperatorIndex + "_" + this.transferOutputIndex;
        }
    });

    var SnippetOutput = function(type, name) {
        this.type = type;
        this.name = name;
        this.finalOutputIndex = undefined;
    }

    Base.extend(SnippetOutput.prototype, {
        setFinalOutputIndex: function(index){
            this.finalOutputIndex = index;
        },
        isFinal: function(){
            return this.finalOutputIndex !== undefined;
        }
    });

    ns.SnippetList = SnippetList;
    ns.SnippetEntry = SnippetEntry;

}(exports));

},{"../../base/index.js":142,"./../../base/common.js":140,"assert":25,"estraverse":61}],180:[function(require,module,exports){
(function (ns) {

    var common = require("../../base/common.js"),
        Shade = require("./../../interfaces.js"),
        Types = Shade.TYPES,
        Kinds = Shade.OBJECT_KINDS,
        SpaceType = Shade.SpaceType,
        VectorType = Shade.VectorType;
    var walk = require('estraverse');
    var Syntax = walk.Syntax;
    var ANNO = common.ANNO;


    ns.getSpaceTransformCall = function(ast, space){
        var callExpression = {
            type: Syntax.CallExpression,
            callee: this.getSpaceConvertFunction(space),
            arguments: [ this.getSpaceConvertArg(space), ast ]
        };
        return callExpression;
    };

    ns.getSpaceConvertFunction = function(space){
        var vectorType = Shade.getVectorFromSpaceVector(space);
        var functionName;
        switch(vectorType){
            case VectorType.POINT: functionName = "transformPoint"; break;
            case VectorType.NORMAL: functionName = "transformDirection"; break;
        }
        var result = {
            type: Syntax.MemberExpression,
            object: {type: Syntax.Identifier, name: "Space"},
            property: { type: Syntax.Identifier, name: functionName }
        };
        ANNO(result).setType(Types.FUNCTION);
        ANNO(result.object).setType(Types.OBJECT, Kinds.ANY);
        return result;
    }

    ns.getSpaceConvertArg = function(space){
        var spaceType = Shade.getSpaceFromSpaceVector(space);
        var spaceName;
        switch(spaceType){
            case SpaceType.VIEW: spaceName = "VIEW"; break;
            case SpaceType.WORLD: spaceName = "WORLD"; break;
        }
        return {
            type: Syntax.MemberExpression,
            object: { type: Syntax.Identifier, name: "Space"  },
            property: { type: Syntax.Identifier, name: spaceName }
        };
    };


}(exports));

},{"../../base/common.js":140,"./../../interfaces.js":188,"estraverse":61}],181:[function(require,module,exports){
(function (ns) {

    var Base = require("../../base/index.js"),
        common = require("../../base/common.js"),
        TypeInfo = require("../../type-system/typeinfo.js"),
        Shade = require("./../../interfaces.js"),
        esgraph = require('esgraph'),
        Types = Shade.TYPES,
        Kinds = Shade.OBJECT_KINDS;
    var spaceAnalyzer = require("../../analyze/space_analyzer.js"),
        SpaceVectorType = Shade.SpaceVectorType,
        SpaceType = Shade.SpaceType,
        VectorType = Shade.VectorType;
    var SpaceTransformTools = require("./space-transform-tools.js");



    var walk = require('estraverse');
    var Syntax = walk.Syntax;
    var ANNO = common.ANNO;


    /**
     * Transforms the JS AST to an AST representation convenient
     * for code generation
     * @constructor
     */
    var SpaceTransformer = function (mainId) {
        this.mainId = mainId;
    };

    function spaceInfo(ast){
        return ast.spaceInfo || {};
    }

    Base.extend(SpaceTransformer.prototype, {
        transformAast: function (aast, opt) {
            opt = opt || {};
            this.root = aast;
            this.functionSpaceInfo = {};
            this.functionTranfserInfo = {};
            this.globalIdentifiers = this.getGlobalIdentifiers(aast);
            this.envSpaces = {};

            this.transformFunctions(aast);
            this.updateGlobalObject(aast, this.envSpaces);
            return this.envSpaces;
        },
        /**
         *
         * @param {Object!} ast
         * @param {Object!} state
         * @returns {*}
         */
        transformFunctions: function(aast) {
            var self = this;
            aast = walk.replace(aast, {
                enter: function (node, parent) {
                    //console.log("Enter:", node.type);
                    switch (node.type) {
                        case Syntax.FunctionDeclaration:
                            self.replaceFunctionInvocations(node.body);
                            self.extractSpaceTransforms(node);
                            this.skip();
                            break;
                    }
                }
            });
            return aast;
        },
        replaceFunctionInvocations: function(functionBodyAast){
            var self = this;
            walk.replace(functionBodyAast, {
                enter: function (node, parent) {
                    if(node.type == Syntax.CallExpression){
                        if(node.callee.type == Syntax.Identifier && self.functionSpaceInfo[node.callee.name]){
                            var paramTransitions = self.functionSpaceInfo[node.callee.name];
                            var oldArgs = node.arguments, newArgs = [];
                            for(var i = 0; i < paramTransitions.length; ++i){
                                var paramT = paramTransitions[i];
                                if(!paramT.space)
                                    oldArgs[paramT.idx] !== undefined && newArgs.push(oldArgs[paramT.idx]);
                                else{
                                    newArgs.push(SpaceTransformTools.getSpaceTransformCall(oldArgs[paramT.idx], paramT.space));
                                }
                            }
                            node.arguments = newArgs;
                        }
                    }
                }
            });
        },

        extractSpaceTransforms: function(functionAast){
            var self = this;
            this.usedIdentifiers = this.getUsedIdentifiers(functionAast);

            var analyzeResult = spaceAnalyzer.analyze(functionAast, this.functionTranfserInfo);
            var nameMap = {}, addDeclarations = [];
            this.extractEnvSpaces(analyzeResult, nameMap);
            this.initFunctionHeader(functionAast, analyzeResult, nameMap, addDeclarations);

            functionAast.body = walk.replace(functionAast.body, {
                enter: function (node, parent) {
                    //console.log("Enter:", node.type);
                    if(node.type == Syntax.ExpressionStatement){
                        var newStatement = self.duplicateSpaceStatement(node, nameMap, addDeclarations);
                        if(newStatement){
                            this.skip();
                            return newStatement;
                        }
                    }
                    else if(spaceInfo(node).hasSpaceOverrides){
                        self.resolveSpaceUsage(node, SpaceVectorType.OBJECT, nameMap);
                        this.skip();
                    }
                }
            });
            this.addDeclarations(functionAast, addDeclarations);
            this.cleanUpDeclarations(functionAast);
        },

        extractEnvSpaces: function(analyzeResult, nameMap){
            for(var name in analyzeResult){
                if(name.indexOf("env.") == 0){
                    var property = name.substr(4);
                    var j = analyzeResult[name].length;
                    while(j--){
                        var space = analyzeResult[name][j];
                        var spaceName = this.getSpaceName(name, space);
                        if(!this.envSpaces[property]) this.envSpaces[property] = [];
                        if( !this.envSpaces[property].some(function(e){return e.space == space}))
                            this.envSpaces[property].push({ name: spaceName.split(".")[1], space: space } );
                        if(!nameMap[name]) nameMap[name] = {};
                        nameMap[name][space] = this.getSpaceName(name, space);
                    }
                }
            }
        },

        initFunctionHeader: function(functionAast, analyzeResult, nameMap, addDeclarations){
            var newParams = [];
            var paramTransitions = [];
            for(var i = 0; i < functionAast.params.length; ++i){
                var param = functionAast.params[i], paramName = param.name;
                if(analyzeResult[paramName]){
                    var j = analyzeResult[paramName].length, hasObjectSpace = false;
                    while(j--){
                        var space = analyzeResult[paramName][j];
                        if(space != SpaceVectorType.OBJECT){
                            if(!nameMap[paramName]) nameMap[paramName] = {};
                            nameMap[paramName][space] = this.getSpaceName(paramName, space);
                            var newParam = {
                                type: Syntax.Identifier,
                                name: nameMap[paramName][space]
                            };
                            ANNO(newParam).copyFrom(ANNO(param));
                            newParams.push(newParam);
                            paramTransitions.push({idx: i, space: space});
                        }
                        else{
                            hasObjectSpace = true;
                            newParams.push(param);
                            paramTransitions.push({idx: i});
                        }
                    }
                    if(!hasObjectSpace){
                        addDeclarations.push(paramName);
                    }
                }
                else{
                    newParams.push(param);
                    paramTransitions.push({idx: i});
                }
            }
            functionAast.params = newParams;
            this.functionSpaceInfo[functionAast.id.name] = paramTransitions;
        },

        duplicateSpaceStatement: function(statementAast, nameMap, addedDeclarations){
            var duplicatedStatements = [];
            var child = statementAast.expression;
            var sInfo = spaceInfo(child);

            var newSpaceNameEntries = {};
            if(!sInfo.finalSpaces){
                nameMap[sInfo.def] = newSpaceNameEntries;
                return;
            }

            sInfo.finalSpaces.forEach(function(space){
                var expressionCopy = JSON.parse(JSON.stringify(child));
                if(space != SpaceVectorType.OBJECT && !this.isSpacePropagrationPossible(sInfo, space)){
                    this.resolveSpaceUsage(expressionCopy, SpaceVectorType.OBJECT, nameMap);
                    expressionCopy.right = SpaceTransformTools.getSpaceTransformCall(expressionCopy.right, space);
                }
                else{
                    this.resolveSpaceUsage(expressionCopy, space, nameMap);
                }
                duplicatedStatements.push({ type: Syntax.ExpressionStatement, expression: expressionCopy });
                if(space != SpaceVectorType.OBJECT){
                    var spaceName = this.getSpaceName(sInfo.def, space);
                    if(addedDeclarations.indexOf(spaceName) == -1)
                        addedDeclarations.push(spaceName);
                    newSpaceNameEntries[space] = spaceName;
                    expressionCopy.left.name = spaceName;
                }

            }.bind(this));
            nameMap[sInfo.def] = newSpaceNameEntries;

            if(duplicatedStatements.length == 0)
                return;
            if(duplicatedStatements.length == 1)
                return duplicatedStatements[0];

            var blockStatement = {
                type: Syntax.BlockStatement,
                body: duplicatedStatements
            };
            return blockStatement

        },

        addDeclarations: function(functionAast, addDeclarations){
            var i = functionAast.params.length;
            while(i--) {
                var idx = addDeclarations.indexOf(functionAast.params[i].name);
                if(idx != -1)
                    addDeclarations.splice(idx, 1);
            }
            if(addDeclarations.length > 0){
                var declarations = { type: Syntax.VariableDeclaration, kind: "var", declarations: []};
                var i = addDeclarations.length;
                while(i--){
                    var name = addDeclarations[i];
                    var decl = {type: Syntax.VariableDeclarator, id: {type: Syntax.Identifier, name: name}, init: null};
                    ANNO(decl).setType(Types.OBJECT, "Vec3");
                    declarations.declarations.push(decl);
                }
                functionAast.body.body.unshift(declarations);
            }
        },

        isSpacePropagrationPossible: function(sInfo, targetSpace){
            if(sInfo.propagateSet.length == 0) // We need to have at least one dependency. Otherwise we can't propagate the space
                return false;
            var vectorType = Shade.getVectorFromSpaceVector(targetSpace)
            if(vectorType == VectorType.NORMAL && sInfo.normalSpaceViolation)
                return false;
            if(vectorType == VectorType.POINT && sInfo.pointSpaceViolation)
                return false;

            return true;
        },

        resolveSpaceUsage: function(aast, targetSpace, nameMap){
            var self = this;
            aast = walk.replace(aast, {
                enter: function (node, parent) {
                    //console.log("Enter:", node.type);
                    switch (node.type) {
                        case Syntax.Identifier:
                            if(targetSpace != SpaceVectorType.OBJECT && spaceInfo(node).propagate){
                                node.name = nameMap[node.name][targetSpace];
                            }
                            break;
                        case Syntax.MemberExpression:
                            if(targetSpace != SpaceVectorType.OBJECT && spaceInfo(node).propagate){
                                var nameKey = "env." + node.property.name;
                                var name = nameMap[nameKey][targetSpace],
                                    token = name.split(".");
                                node.property.name = token[1];
                            }
                            break;
                        case Syntax.CallExpression:
                            var sInfo = spaceInfo(node);
                            if(sInfo.spaceOverride &&
                                self.isSpacePropagrationPossible(sInfo, sInfo.spaceOverride))
                            {
                                var result = self.resolveSpaceUsage(node.arguments[1], sInfo.spaceOverride, nameMap);
                                this.skip();
                                return result;
                            }
                    }
                }
            });
            return aast;
        },

        getSpaceName: function(name, space){
            if(space == SpaceVectorType.OBJECT)
                return name;

            var checkGlobal = false;
            if(name.indexOf("env.") == 0){
                checkGlobal = true;
                name = name.substr(4);
            }
            switch(space){
                case SpaceVectorType.VIEW_POINT : name += "_vps"; break;
                case SpaceVectorType.WORLD_POINT : name += "_wps"; break;
                case SpaceVectorType.VIEW_NORMAL : name += "_vns"; break;
                case SpaceVectorType.WORLD_NORMAL : name += "_wns"; break;
            }
            var result = name;
            var i = 2;
            while( (checkGlobal ? this.globalIdentifiers : this.usedIdentifiers ).indexOf(result) != -1){
                result = name + i++;
            }
            if(checkGlobal)
                result = "env." + result;
            return result;
        },

        getUsedIdentifiers : function(functionAast){
            var result = [];
            walk.traverse(functionAast, {
                enter: function (node, parent) {
                    //console.log("Enter:", node.type);
                    if(node.type == Syntax.Identifier){
                        if( parent.type == Syntax.MemberExpression && parent.property == node)
                            return;
                        if(result.indexOf(node.name) == -1)
                            result.push(node.name);
                    }
                }
            });
            return result;
        },
        getGlobalIdentifiers : function(programAast){
            var result = [];
            walk.traverse(programAast, {
                enter: function (node, parent) {
                    //console.log("Enter:", node.type);
                    if(node.type == Syntax.MemberExpression && node.object.extra.global){
                        if(result.indexOf(node.property.name) == -1)
                            result.push(node.property.name);
                    }
                }
            });
            return result;
        },
        cleanUpDeclarations: function(functionAast){
            var declarators = [];
            var body = functionAast.body.body;
            var i = body.length;
            while(i--){
                if(body[i].type == Syntax.VariableDeclaration){
                    declarators.push.apply(declarators, body[i].declarations);
                    body.splice(i,1);
                }
            }
            var usedIdentifiers = this.getUsedIdentifiers(functionAast.body);
            var declaration = { type: Syntax.VariableDeclaration, kind: "var", declarations: []};
            i = declarators.length;
            while(i--){
                if(usedIdentifiers.indexOf(declarators[i].id.name) != -1){
                    declaration.declarations.push(declarators[i]);
                }
            }
            if(declaration.declarations.length > 0)
                body.unshift(declaration);
        },

        updateGlobalObject: function(aast, envSpaces){
            if(!aast.globalParameters)
                return;
            var globalObject;
            for(var funcName in aast.globalParameters){
                var args = aast.globalParameters[funcName];
                var i = args.length;
                while(i--){
                    if(args[i].extra.global)
                        globalObject = args[i].extra;
                }
            }
            if(!globalObject)
                return;
            var newInfo = {};
            for(var propName in globalObject.info){
                var data = globalObject.info[propName];
                if(!envSpaces[propName]){
                    newInfo[propName] = data;
                    continue;
                }
                var entryList = envSpaces[propName];
                for(var i = 0; i < entryList.length; ++i){
                    var copyData = Base.deepExtend({}, data);
                    newInfo[entryList[i].name]= copyData;
                }
            }
            globalObject.info = newInfo;
            walk.traverse(aast, {
                enter: function (node, parent) {
                    //console.log("Enter:", node.type);
                    if(node.extra && node.extra.global){
                        node.extra.info = newInfo;
                    }
                    if(node.scope && node.scope.bindings){
                        for(var name in node.scope.bindings){
                            if(node.scope.bindings[name].extra.global){
                                node.scope.bindings[name].extra.info = newInfo;
                            }
                        }
                    }
                }
            });
        }


    });

    // Exports
    ns.SpaceTransformer = new SpaceTransformer();


}(exports));

},{"../../analyze/space_analyzer.js":115,"../../base/common.js":140,"../../base/index.js":142,"../../type-system/typeinfo.js":203,"./../../interfaces.js":188,"./space-transform-tools.js":180,"esgraph":58,"estraverse":61}],182:[function(require,module,exports){
var Syntax = require('estraverse').Syntax;
var Base = require("../base/index.js");
var annotate = require("../utils/").annotate;
var TypeInfo = require("../type-system/typeinfo.js");
var Shade = require("../interfaces.js");
var VecBase = require("../base/vec.js");
var assert = require("assert");

var TYPES = Shade.TYPES,
    KINDS = Shade.OBJECT_KINDS;

var ns = {};

ns.removeMemberFromExpression = function (node) {
    return {
        type: Syntax.Identifier,
        name: node.property.name
    }
}

ns.generateFreeName = function (name, blockedNames) {
    var newName = name.replace(/_+/g, "_"), i = 1;
    while (blockedNames.indexOf(newName) != -1) {
        newName = (name + "_" + (++i)).replace(/_+/g, "_");
    }
    blockedNames.push(newName);
    return newName;
}

ns.getInternalFunctionName = function (state, key, type, details) {
    if (!state.internalFunctions[key]) {
        var name = ns.generateFreeName(key, state.blockedNames);
        state.internalFunctions[key] = {
            name: name,
            type: type,
            details: details
        };
    }
    return state.internalFunctions[key].name;
};


ns.binaryExpression2FunctionCall = function (node, name) {
    node.right = ns.castToFloat(node.right);
    node.left = ns.castToFloat(node.left);
    return {
        type: Syntax.CallExpression,
        callee: {
            type: Syntax.Identifier,
            name: name
        },
        arguments: [
            node.left,
            node.right
        ],
        extra: {
            type: TYPES.NUMBER
        }
    }
};

var Vec = {
    getVecArgs: function (args) {
        if (args.length == 0) {
            var result = [
                {
                    type: "Literal",
                    value: "0"
                }
            ];
            annotate(result[0]).setType(TYPES.NUMBER);
            return result;
        }
        else {
            return args;
        }
    },

    generateVecFromArgs: function (vecCount, args) {
        if (vecCount == 1)
            return args[0];
        if (args.length == 0) {
            args = Vec.getVecArgs(args);
        }

        if (args.length == 1 && annotate(args[0]).isOfKind("Vec" + vecCount))
            return args[0];
        var result = {
            type: Syntax.NewExpression,
            callee: {
                type: Syntax.Identifier,
                name: "Vec" + vecCount
            },
            arguments: args
        };
        annotate(result).setType(TYPES.OBJECT, "Vec" + vecCount);
        annotate(result.callee).setType(TYPES.FUNCTION);
        return result;
    },

    createSwizzle: function (vecCount, swizzle, node) {
        if (node.arguments.length == 0) {
            node.callee.extra = node.extra;
            return node.callee;
        }
        var singular = swizzle.length == 1;
        var argObject = singular ? node.arguments[0] : Vec.generateVecFromArgs(swizzle.length, node.arguments);
        var replace = {
            type: Syntax.NewExpression,
            callee: {
                type: Syntax.Identifier,
                name: "Vec" + vecCount
            },
            arguments: []
        };
        var indices = [];
        for (var i = 0; i < swizzle.length; ++i) {
            var idx = VecBase.swizzleToIndex(swizzle.charAt(i));
            indices[idx] = i;
        }

        for (var i = 0; i < vecCount; ++i) {
            if (indices[i] !== undefined) {
                replace.arguments[i] = singular ? argObject : {
                    type: Syntax.MemberExpression,
                    object: argObject,
                    property: {
                        type: Syntax.Identifier,
                        name: VecBase.indexToSwizzle(indices[i])
                    }
                };
            }
            else {
                replace.arguments[i] = {
                    type: Syntax.MemberExpression,
                    object: node.callee.object,
                    property: {
                        type: Syntax.Identifier,
                        name: VecBase.indexToSwizzle(i)
                    }
                };
            }
        }
        annotate(replace).copyFrom(annotate(node));
        return replace;
    },
    createSwizzleOperator: function (vecCount, swizzle, operator, node, args, parent) {
        var singular = swizzle.length == 1;
        var argObject = singular ? node.arguments[0] : Vec.generateVecFromArgs(swizzle.length, node.arguments);
        var replace = {
            type: Syntax.NewExpression,
            callee: {
                type: Syntax.Identifier,
                name: "Vec" + vecCount
            },
            arguments: []
        };
        var indices = [];
        for (var i = 0; i < swizzle.length; ++i) {
            var idx = VecBase.swizzleToIndex(swizzle.charAt(i));
            indices[idx] = i;
        }
        for (var i = 0; i < vecCount; ++i) {
            var thisValue = {
                type: Syntax.MemberExpression,
                object: node.callee.object,
                property: {
                    type: Syntax.Identifier,
                    name: VecBase.indexToSwizzle(i)
                }
            };
            if (indices[i] !== undefined) {
                replace.arguments[i] = {
                    type: Syntax.BinaryExpression,
                    operator: operator,
                    left: thisValue,
                    right: singular ? argObject : {
                        type: Syntax.MemberExpression,
                        object: argObject,
                        property: {
                            type: Syntax.Identifier,
                            name: VecBase.indexToSwizzle(indices[i])
                        }
                    }
                }
            }
            else {
                replace.arguments[i] = thisValue
            }
        }
        annotate(replace).copy(annotate(node));
        return replace;
    },

    attachSwizzles: function (instance, vecCount, callExp, callOperatorExp) {
        for (var s = 0; s < VecBase.swizzleSets.length; ++s) {
            for (var count = 1; count <= 4; ++count) {
                var max = Math.pow(vecCount, count);
                for (var i = 0; i < max; ++i) {
                    var val = i;
                    var key = "";
                    var indices = [], withSetter = (count <= vecCount);
                    for (var j = 0; j < count; ++j) {
                        var idx = val % vecCount;
                        val = Math.floor(val / vecCount);
                        key += VecBase.swizzleSets[s][idx];
                        if (indices[idx])
                            withSetter = false;
                        else
                            indices[idx] = true;
                    }
                    instance[key] = {
                        callExp: callExp.bind(null, vecCount, key)
                    };
                    if (withSetter && callOperatorExp) {
                        for (var operator in VecBase.swizzleOperators) {
                            var opSymbol = VecBase.swizzleOperators[operator];
                            instance[key + operator] = {
                                callExp: callOperatorExp.bind(null, vecCount, key, opSymbol)
                            };
                        }
                    }
                }
            }
        }
    },

    createOperator: function (vecCount, operator, node, args, parent) {
        var other = Vec.generateVecFromArgs(vecCount, node.arguments);
        var replace = {
            type: Syntax.BinaryExpression,
            operator: operator,
            left: node.callee.object,
            right: other
        };
        annotate(replace).copyFrom(annotate(node));
        return replace;
    },

    attachOperators: function (instance, vecCount, operators) {
        for (var name in operators) {
            var operator = operators[name];
            instance[name] = {
                callExp: Vec.createOperator.bind(null, vecCount, operator)
            }
        }
    },

    createFunctionCall: function (functionName, secondVecSize, node) {
        assert(arguments.length == 3);
        var replace = {
            type: Syntax.CallExpression,
            callee: {
                type: Syntax.Identifier,
                name: functionName
            },
            arguments: [
                node.callee.object
            ]
        };
        if (secondVecSize) {
            var other = Vec.generateVecFromArgs(secondVecSize, node.arguments);
            replace.arguments.push(other);
        }
        annotate(replace).copyFrom(annotate(node));
        return replace;
    },

    generateLengthCall: function (node) {
        if (node.arguments.length == 0) {
            return Vec.createFunctionCall('length', 0, node);
        }
        else {
            var replace = {
                type: Syntax.BinaryExpression,
                operator: '*',
                left: node.callee.object,
                right: {
                    type: Syntax.BinaryExpression,
                    operator: '/',
                    left: node.arguments[0],
                    right: Vec.createFunctionCall('length', 0, node)
                }
            };
            annotate(replace.right).setType(TYPES.NUMBER);
            annotate(replace).copyFrom(annotate(node));
            return replace;
        }
    },

    generateConstructor: function (node) {
        node.arguments = Vec.getVecArgs(node.arguments);
    }
};

var Mat = {
    TYPES: {
        "Mat3": {kind: KINDS.MATRIX3, colKind: KINDS.FLOAT3, colCount: 3, glslType: "mat3"},
        "Mat4": {kind: KINDS.MATRIX4, colKind: KINDS.FLOAT4, colCount: 4, glslType: "mat3"}
    },

    generateMatFromArgs: function (matName, args) {
        if (args.length == 0) {
            args = Vec.getVecArgs(args);
        }

        if (args.length == 1 && annotate(args[0]).isOfKind(Mat.TYPES[matName].kind))
            return args[0];
        var result = {
            type: Syntax.NewExpression,
            callee: {
                type: Syntax.Identifier,
                name: matName
            },
            arguments: args
        };
        annotate(result).setType(TYPES.OBJECT, Mat.TYPES[matName].kind);
        annotate(result.callee).setType(TYPES.FUNCTION);
        return result;
    },

    createOperator: function (matName, operator, node, args, parent) {
        var other = Mat.generateMatFromArgs(matName, node.arguments);
        var replace = {
            type: Syntax.BinaryExpression,
            operator: operator,
            left: node.callee.object,
            right: other
        };
        annotate(replace).copy(annotate(node));
        return replace;
    },

    attachOperators: function (instance, matName, operators) {
        for (var name in operators) {
            var operator = operators[name];
            instance[name] = {
                callExp: Mat.createOperator.bind(null, matName, operator)
            }
        }
    },

    generateColCall: function (matName, node, args, parent, state) {
        var memberAccess = {
            type: Syntax.MemberExpression,
            object: node.callee.object,
            property: node.arguments[0],
            computed: true
        };
        annotate(memberAccess).setType(TYPES.OBJECT, Mat.TYPES[matName].colKind);

        if (args.length == 1) {
            return memberAccess;
        }
        else {
            var methodKey = "_" + matName + "_col";
            var methodName = ns.getInternalFunctionName(state, methodKey,
                "MatCol", {colType: "vec" + Mat.TYPES[matName].colCount, matType: Mat.TYPES[matName].glslType});

            var replace = {
                type: Syntax.CallExpression,
                callee: {type: Syntax.Identifier, name: methodName},
                arguments: [
                    node.callee.object,
                    node.arguments[0],
                    node.arguments[1]
                ]
            };
            annotate(replace).copy(annotate(node));
            return replace;
        }
    }

}


ns.Vec = Vec;
ns.Mat = Mat;

ns.castToFloat = function (ast) {
    var exp = annotate(ast);

    if (!exp.isNumber()) {   // Cast
        return {
            type: Syntax.CallExpression,
            callee: {
                type: Syntax.Identifier,
                name: "float"
            },
            arguments: [ast]
        }
    }
    return ast;
}

ns.getNameForSystem = function (baseName) {
    return baseName;
}

ns.getNameForGlobal = function (baseName) {
    var name = "_env_" + baseName;
    return name.replace(/_+/g, "_");
}

/**
 * @param {Object} node
 * @param  {GLTransformContext} context
 * @returns {*}
 */
ns.castToVec4 = function (node, context) {
    var exp = TypeInfo.createForContext(node, context);

    if (exp.isOfKind("Vec4") || exp.isOfKind("Closure"))
        return node;

    if (exp.isOfKind("Vec3")) {
        return {
            type: Syntax.CallExpression,
            callee: {
                type: Syntax.Identifier,
                name: "vec4"
            },
            arguments: [node, {type: Syntax.Literal, value: 1.0, extra: {type: TYPES.NUMBER}}]
        }
    }
    Shade.throwError(node, "Can't cast from '" + exp.getTypeString() + "' to vec4");
}

ns.extend = Base.extend;
ns.createClass = Base.createClass;

module.exports = ns;

},{"../base/index.js":142,"../base/vec.js":143,"../interfaces.js":188,"../type-system/typeinfo.js":203,"../utils/":206,"assert":25,"estraverse":61}],183:[function(require,module,exports){
"use strict";

var parser = require("esprima");
var codegen = require("escodegen");
var extractParameters = require("./analyze/extract_parameters");
var interfaces = require("./interfaces.js");
var sanitizer = require("./analyze/sanitizer/sanitizer.js");
var Base = require("./base/index.js");
var GLSLCompiler = require("./generate/glsl/compiler.js").GLSLCompiler;
var resolver = require("./resolve/resolve.js");
var validator = require("./analyze/validation");
var analyzer = require("./analyze");
var SpaceVectorType = interfaces.SpaceVectorType;
var SnippetList = require("./generate/snippets/snippet-list.js").SnippetList;
var SnippetEntry = require("./generate/snippets/snippet-list.js").SnippetEntry;
var TypeSystem = require("./type-system/type-system.js");
var PluginRegistry = require("./plugin_registry");
function WorkingSet() {
	this.ast = null;
	this.aast = null;
	this.result = null;
	this.processingData = {};
	this.inject = null;
}

WorkingSet.prototype.setAst = function(ast) {
	this.ast = ast;
};

WorkingSet.prototype.parse = function(code, opt) {
	opt = opt || {};
	this.ast = parse(code, opt);
};

WorkingSet.prototype.analyze = function(inject, implementation, opt) {
	opt = opt || {};
	opt.entry = opt.entry || "shade";
	opt.validate = opt.validate !== undefined ? opt.validate : true;
	opt.throwOnError = opt.throwOnError !== undefined ? opt.throwOnError : true;
	opt.implementation = implementation;
	this.inject = opt.inject = inject;
	this.aast = analyzer.analyze(this.ast, this.processingData, opt);
	return this.aast;
};

WorkingSet.prototype.injectMemory = function (mem) {
	this.aast = analyzer.injectMemory(this.aast, mem, {
		inject: this.inject,
		entry: "evaluate"
	});
};

WorkingSet.prototype.getProcessingData = function(key) {
	return this.processingData[key];
};

WorkingSet.prototype.compileFragmentShader = function(opt) {
	this.result = compileFragmentShader(this.aast, opt);
	return this.result;
};

WorkingSet.prototype.compileToFastlane = function (opt) {
	var compiler = new (require("./generate/fastlane/compiler"))(opt);

	return compiler.compile(this.aast, opt);
};

function extractParams(ast, opt) {
	opt = opt || {};
	opt.entry = opt.entry || "shade";
	return extractParameters(ast, opt);
}

function determineUsedParameters(code, opt) {
	opt = opt || {};
	opt.entry = opt.entry || "shade";
	var ast = parse(code, opt);
	var aast = analyze(ast, opt);
	return extractParameters(aast, opt);
}

function determineReturnType(code, opt) {
	opt = opt || {};
	opt.entry = opt.entry || "shade";
	var ast = parse(code, opt);
	var aast = analyze(ast, opt);
	for (var i = 0; i < aast.body.length; ++i)
		if (aast.body[i].id.name === opt.entry)
			return aast.body[i].extra.returnInfo;
}

function parse(ast, opt) {
	opt = opt || {};
	if (typeof ast == "function")
		ast = ast.toString();

	if (typeof ast == "string")
		return parser.parse(ast, {raw: true, loc: opt.loc || false});

	return ast;
}

function analyze(ast, opt) {
	opt = opt || {};
	opt.entry = opt.entry || "shade";
	opt.validate = opt.validate !== undefined ? opt.validate : true;
	opt.throwOnError = opt.throwOnError !== undefined ? opt.throwOnError : true;
	return analyzer.analyze(parse(ast), {}, opt);
}

function getSanitizedAst(str, opt) {
	var ast = parse(str, opt);
	return sanitizer.sanitize(ast, opt);
}

function parseAndInferenceExpression(ast, opt) {
	ast = parse(ast, opt);
	return analyze(ast, opt);
}

function resolveClosures(ast, implementation, processData, opt) {
	opt = opt || {};
	processData = processData || {};
	return resolver.resolveClosuresPreTypeInference(ast, implementation,
													processData, opt);
}

function compileFragmentShader(aast, opt) {
	return new GLSLCompiler().compileFragmentShader(aast, opt);
}

function toJavaScript(aast, opt) {
	return codegen.generate(aast, opt);
}

function getSystem() {
	return TypeSystem.getPredefinedObject("System");
}

// var fs = require("fs");
// PluginRegistry.registerModule("shade", fs.readFileSync(__dirname + "/modules/shade.js"));

exports.parse = parse;
exports.extractParameters = extractParams;
exports.determineUsedParameters = determineUsedParameters;
exports.determineReturnType = determineReturnType;
exports.parseAndInferenceExpression = parseAndInferenceExpression;
exports.analyze = analyze;
exports.getSystem = getSystem;
exports.resolveClosures = resolveClosures;
exports.toJavaScript = toJavaScript;
exports.getSanitizedAst = getSanitizedAst;

exports.TYPES = interfaces.TYPES;
exports.OBJECT_KINDS = interfaces.OBJECT_KINDS;
exports.SOURCES = interfaces.SOURCES;
exports.SPACE_VECTOR_TYPES = SpaceVectorType;
exports.Vec2 = interfaces.Vec2;
exports.Vec3 = interfaces.Vec3;
exports.Vec4 = interfaces.Vec4;
exports.Texture = interfaces.Texture;
exports.Color = interfaces.Color;
exports.Mat3 = interfaces.Mat3;
exports.Mat4 = interfaces.Mat4;
exports.WorkingSet = WorkingSet;
exports.SnippetList = SnippetList;
exports.SnippetEntry = SnippetEntry;

exports.version = "0.0.0";

},{"./analyze":106,"./analyze/extract_parameters":105,"./analyze/sanitizer/sanitizer.js":111,"./analyze/validation":139,"./base/index.js":142,"./generate/fastlane/compiler":147,"./generate/glsl/compiler.js":165,"./generate/snippets/snippet-list.js":179,"./interfaces.js":188,"./plugin_registry":189,"./resolve/resolve.js":193,"./type-system/type-system.js":202,"escodegen":54,"esprima":60}],184:[function(require,module,exports){
"use strict";

Math.clamp = function(x, minVal, maxVal) {
    return Math.min(Math.max(x, minVal), maxVal);
};

Math.smoothstep = function(edge1, edge2, x) {
    var t = Math.clamp((x - edge1) / (edge2 - edge1), 0.0, 1.0);
    return t * t * (3.0 - 2.0 * t);
};

Math.step = function(edge, x) {
    return x < edge ? 0 : 1;
};

Math.fract = function(x) {
    return x - Math.floor(x);
};

Math.mix = function(x, y, a) {
    var simple = typeof x == "number";
    var asimple = typeof a == "number";
    if(simple && asimple)
        return x * (1 - a) + y * a;
    if (asimple)
        return x.mul(1 - a).add(y.mul(a));
    return x.mul(a.mul(-1).add(1)).add(y.mul(a));
};

Math.saturate = function (x) {
    return Math.clamp(x, 0.0, 1.0);
};




},{}],185:[function(require,module,exports){
"use strict";

var glMatrix = require("gl-matrix");

var utils = require("./utils");
var vector = require("./vector");
var Vec2 = vector.Vec2;
var Vec3 = vector.Vec3;
var Vec4 = vector.Vec4;

function Mat2() {
	constructMatrix(this, Mat2, 2, arguments);
}

function Mat3() {
	constructMatrix(this, Mat3, 3, arguments);
}

function Mat4() {
	constructMatrix(this, Mat4, 4, arguments);
}

function constructMatrix(that, type, columnSize, args) {
	if (!(that instanceof type))
		that = Object.create(type.prototype);

	if (args[0] instanceof type)
		throw new TypeError(
			"Copy construction of an immutable type is meaningless!");

	var flatSize = columnSize * columnSize;
	if (args.length === 1 && args[0].BYTES_PER_ELEMENT) {
		var array = args[0];
		if (array.length !== flatSize)
			throw new TypeError("Typed array for construction of Mat"
								+ columnSize
								+ " has to have the correct size!");
		that.data = array;
	} else {
		that.data = new Float32Array(flatSize);
		fillMatrix(that, columnSize, args);
	}

	return that;
}

function fillMatrix(dest, columnSize, args) {
	var diagonalEntry = 1;
	if (args.length === 1)
		diagonalEntry = args[0];

	if (args.length === 0 || args.length === 1) {
		for (var i = 0; i < columnSize; ++i)
			dest.data[i * columnSize + i] = diagonalEntry;
		return dest;
	}

	var size = columnSize * columnSize;
	var componentIdx = 0;
	for (var argIdx = 0; argIdx < args.length; ++argIdx) {
		var arg = args[argIdx];
		var argComponentCount = arg.data ? arg.data.length : 1;

		if (argComponentCount > columnSize)
			throw new TypeError(
				"Vector of size " + argComponentCount
				+ " too large to initialize a matrix of column size "
				+ columnSize + "!");

		if (argComponentCount + componentIdx % columnSize > columnSize)
			throw new TypeError(
				"Too many arguments for column construction of Mat" + columnSize
				+ "!");

		if (argComponentCount + componentIdx > size)
			throw new TypeError("Too many arguments for Mat" + columnSize
								+ " construction !");

		if (argComponentCount === 1)
			dest.data[componentIdx++] = arg;
		else
			for (var i = 0; i < argComponentCount; ++i)
				dest.data[componentIdx++] = arg.data[i];
	}

	if (componentIdx < size)
		throw new TypeError("Not enough arguments for Mat " + columnSize + "!");

	return dest;
}

var methods = {
	unaryScalarResult: ["determinant"],
	unary: ["invert", "transpose"]
};

utils.forwardPrototypeMethodsToGLMatrix(Mat2, glMatrix.mat2, methods);
utils.forwardPrototypeMethodsToGLMatrix(Mat3, glMatrix.mat3, methods);
utils.forwardPrototypeMethodsToGLMatrix(Mat4, glMatrix.mat4, methods);

// we handle mul special because we overload it for vector and matrices
// we could also handle scalar multiplication here if needed
Mat2.prototype.mul = createMulFunction(Mat2, 4, Vec2, glMatrix.mat2.mul,
									   glMatrix.vec2.transformMat2);
Mat3.prototype.mul = createMulFunction(Mat3, 9, Vec3, glMatrix.mat3.mul,
									   glMatrix.vec3.transformMat3);
Mat4.prototype.mul = createMulFunction(Mat4, 16, Vec4, glMatrix.mat4.mul,
									   glMatrix.vec4.transformMat4);

function createMulFunction(matType, componentSize, vecType, glMatrixMatMul,
						   glMatrixVecTrans) {
	return function(matrix) {
		if (matrix.data.length === componentSize) {
			var result = new matType();
			glMatrixMatMul(result.data, this.data, matrix.data);
			return result;
		}
		// its not a matrix so we try to build a vector from all arguments that
		// fits the row size (because we only handle square matrices its equal
		// to the column size)
		var rhs = utils.toType(vecType, arguments);
		var result = new vecType();
		glMatrixVecTrans(result.data, rhs.data, this.data);
		return result;
	}
}

generateRowColumnAccessors(Mat2, 2);
generateRowColumnAccessors(Mat3, 3);
generateRowColumnAccessors(Mat4, 4);

function generateRowColumnAccessors(type, columnSize) {
	for (var rowIdx = 1; rowIdx <= columnSize; ++rowIdx)
		for (var columnIdx = 1; columnIdx <= columnSize; ++columnIdx)
			Object.defineProperty(
				type.prototype, "m" + rowIdx + "" + columnIdx, {
					get: (function(rowIdx, columnIdx) {
						return function() {
							return this.data[rowIdx + columnIdx * columnSize];
						}
					})(rowIdx - 1, columnIdx - 1),
					set: (function(rowIdx, columnIdx) {
						return function(newValue) {
							return this.data[rowIdx + columnIdx * columnSize]
								   = newValue;
						}
					})(rowIdx - 1, columnIdx - 1)
				});
}

generateColumnAccessors(Mat2, 2, Vec2);
generateColumnAccessors(Mat3, 3, Vec3);
generateColumnAccessors(Mat4, 4, Vec4);

function generateColumnAccessors(type, columnSize, vecType) {
	for (var columnIdx = 1; columnIdx <= columnSize; ++columnIdx) {
		Object.defineProperty(type.prototype, "c" + columnIdx, {
			get: (function(columnIdx) {
				return function() {
					return vecType(new this.data.constructor(this.data.subarray(
						columnIdx * columnSize,
						columnIdx * columnSize + columnSize)));
				}
			})(columnIdx - 1),
			set: (function(columnIdx) {
				return function(newColumn) {
					if (!(newColumn instanceof vecType))
						throw TypeError("Columns of a Mat" + columnSize
										+ " can only be set with a "
										+ vecType.name);
					var length = newColumn.data.length;
					for (var idx = 0; idx < length; ++idx)
						this.data[columnIdx * columnSize + idx]
							= newColumn.data[idx];
				}
			})(columnIdx - 1)
		});
	}
}

exports.Mat2 = Mat2;
exports.Mat3 = Mat3;
exports.Mat4 = Mat4;

},{"./utils":186,"./vector":187,"gl-matrix":67}],186:[function(require,module,exports){
"use strict";

function forwardPrototypeMethodsToGLMatrix(type, glMatrixType, functionList) {
    functionList.unaryScalarResult = functionList.unaryScalarResult || [];
    functionList.unaryScalarResult.forEach(function (functionName) {
        type.prototype[functionName] = function () {
            return glMatrixType[functionName](this.data);
        };
    });

    functionList.binaryScalarResult = functionList.binaryScalarResult || [];
    functionList.binaryScalarResult.forEach(function (functionName) {
        type.prototype[functionName] = function () {
            return glMatrixType[functionName](this.data, toType.call(null, type, arguments).data);
        };
    });

    functionList.unary = functionList.unary || [];
    functionList.unary.forEach(function (functionName) {
        type.prototype[functionName] = function () {
            var result = new type();
            glMatrixType[functionName](result.data, this.data);
            return result;
        };
    });

    functionList.binary = functionList.binary || [];
    functionList.binary.forEach(function (functionName) {
        type.prototype[functionName] = function () {
            var rhs = toType.call(null, type, arguments);
            var result = new type();
            glMatrixType[functionName](result.data, this.data, rhs.data);
            return result;
        };
    });
}

function toType(type, args) {
    if (args[0] instanceof type)
        return args[0];

    return type.apply(null, args);
}

var vectorComponentNameCategories
    = [["x", "y", "z", "w"], ["r", "g", "b", "a"], ["s", "t", "p", "q"]];

function attachSwizzles(vecLength, evaluator) {
    addSingleProperties(vecLength, evaluator);
    vectorComponentNameCategories.forEach(function(componentNames) {
        var allowedComponentNames = componentNames.slice(0, vecLength);
        [2, 3, 4].forEach(function(maskLength) {
            generateSwizzleCombinations(allowedComponentNames, maskLength)
                .forEach(evaluator);
        });
    });
}

function addSingleProperties(vecLength, evaluator) {
    vectorComponentNameCategories.forEach(function(componentNames) {
        componentNames.slice(0, vecLength).forEach(function (swizzle, idx) {
            evaluator([swizzle], idx)
        });
    });
}

function generateSwizzleCombinations(availableComponents, combinationSize) {
    var sets = [];
    for (var i = 0; i < combinationSize; ++i)
        sets[i] = availableComponents;

    return sets.reduce(function(currentCombinations, currentSet) {
        return currentCombinations.map(function(combination) {
                return currentSet.map(function(component) {
                    return combination.concat([component]);
                });
            })
            .reduce(function(a, b) {
                return a.concat(b);
            });
    }, [[]]);
}

exports.forwardPrototypeMethodsToGLMatrix = forwardPrototypeMethodsToGLMatrix;
exports.toType = toType;
exports.attachSwizzles = attachSwizzles;
},{}],187:[function(require,module,exports){
"use strict";

var glMatrix = require("gl-matrix");
var utils = require("./utils");

function Vec2(x, y) {
	return constructVector(this, Vec2, 2, arguments);
}

function Vec3(x, y, z) {
	return constructVector(this, Vec3, 3, arguments);
}

function Vec4(x, y, z, w) {
	return constructVector(this, Vec4, 4, arguments);
}

function constructVector(that, type, size, args) {
	if (!(that instanceof type))
		that = Object.create(type.prototype);

	if (args.length === 1 && Array.isArray(args[0]))
		args = args[0];

	if (args.length === 1 && args[0].data === 1 && args[0].data.length >= size)
		throw new TypeError(
			"Copy construction of an immutable type or construction from a vector of greater size is not allowed!");

	if (args.length === 1 && args[0].BYTES_PER_ELEMENT) {
		var array = args[0];
		if (array.length !== size)
			throw new TypeError("Typed array for construction of Vec" + size
								+ " has to have the correct size!");
		that.data = array;
	} else {
		that.data = new Float32Array(size);
		fillVecX(that, size, args);
	}

	return Object.seal(that);
}

function fillVecX(dest, size, args) {
	if (args.length === 0)
		return dest;

	if (args.length === 1) {
		for (var idx = 0; idx < size; ++idx)
			dest.data[idx] = args[0];
		return dest;
	}

	var componentIdx = 0;
	for (var argIdx = 0; argIdx < args.length; ++argIdx) {
		var arg = args[argIdx];
		var argComponentCount = arg.data ? arg.data.length : 1;
		if (argComponentCount + componentIdx > size)
			throw new TypeError("Too many arguments for Vec" + size
								+ " construction!");

		if (argComponentCount === 1)
			dest.data[componentIdx++] = arg;
		else
			for (var i = 0; i < argComponentCount; ++i)
				dest.data[componentIdx++] = arg.data[i];
	}

	if (componentIdx < size)
		throw new TypeError("Not enough arguments for Vec" + size
							+ " construction!");

	return dest;
}

var methods = {
	unaryScalarResult: ["length"],
	binaryScalarResult: ["dot"],
	unary: ["normalize", "negate"],
	binary: ["add", "sub", "mul", "div"]
};

var vectorComponentNameCategories
	= [["x", "y", "z", "w"], ["r", "g", "b", "a"], ["s", "t", "p", "q"]];

var sizeTypeMapping = {
	2: Vec2,
	3: Vec3,
	4: Vec4
};

utils.forwardPrototypeMethodsToGLMatrix(Vec2, glMatrix.vec2, methods);
utils.attachSwizzles(2, addSwizzleGetter.bind(undefined, Vec2.prototype));

utils.forwardPrototypeMethodsToGLMatrix(Vec4, glMatrix.vec4, methods);
utils.attachSwizzles(3, addSwizzleGetter.bind(undefined, Vec3.prototype));

// add cross product for vec3 only
methods.binary.push("cross");
utils.forwardPrototypeMethodsToGLMatrix(Vec3, glMatrix.vec3, methods);
utils.attachSwizzles(4, addSwizzleGetter.bind(undefined, Vec4.prototype));


function addSwizzleGetter(type, swizzle, idx) {
	if (swizzle.length > 1) {
		var resultType = sizeTypeMapping[swizzle.length];
		Object.defineProperty(type, swizzle.join(""), {
			get: (function (swizzle, resultType) {
				return function () {
					var args = new this.data.constructor(swizzle.length);
					for (var i = 0; i < swizzle.length; ++i)
						args[i] = this[swizzle[i]];

					return resultType(args);
				}
			})(swizzle, resultType)
		});
	} else {
		Object.defineProperty(type, swizzle.join(""), {
			get: (function (idx) {
				return function () {
					return this.data[idx];
				}
			})(idx)
		});
	}
}

exports.Vec2 = Vec2;
exports.Vec3 = Vec3;
exports.Vec4 = Vec4;

},{"./utils":186,"gl-matrix":67}],188:[function(require,module,exports){
(function (ns) {
    var Base = require("./base/index.js");
    var CodeGen = require("escodegen");
    var VecMath = require("./base/vecmath.js").VecMath;


    /**
     * @enum {string}
     */
    var Types = ns.TYPES = {
        ANY: "any",
        INT: "int",
        NUMBER: "number",
        BOOLEAN: "boolean",
        OBJECT: "object",
        ARRAY: "array",
        NULL: "null",
        UNDEFINED: "undefined",
        FUNCTION: "function",
        STRING: "string",
        INVALID: "invalid"
    }

    var Kinds = ns.OBJECT_KINDS = {
        ANY: "any",
        VEC2: "Vec2", // virtual kinds
        VEC3: "Vec3", // virtual kinds
        VEC4: "Vec4", // virtual kinds
        MATRIX3: "Mat3",
        MATRIX4: "Mat4",
        TEXTURE: "Texture",
        COLOR_CLOSURE: "color_closure"
    }

    var Semantics = ns.SEMANTICS = {
        COLOR: 'color',
        NORMAL: 'normal',
        SCALAR_0_TO_1: 'scalar0To1',
        UNKNOWN: 'unknown'
    }

    /**
     * Possible Spaces
     * @enum
     */
    var SpaceType = ns.SpaceType = {
        OBJECT: 0,
        VIEW: 1,
        WORLD: 2,
        RESULT: 5
    };
    var VectorType = ns.VectorType = {
        NONE: 0,
        POINT: 1,
        NORMAL: 2
    };
    ns.SpaceVectorType = {
        OBJECT: SpaceType.OBJECT,
        VIEW_POINT : SpaceType.VIEW + (VectorType.POINT << 3),
        WORLD_POINT : SpaceType.WORLD + (VectorType.POINT << 3),
        VIEW_NORMAL : SpaceType.VIEW + (VectorType.NORMAL << 3),
        WORLD_NORMAL : SpaceType.WORLD + (VectorType.NORMAL << 3),
        RESULT_POINT : SpaceType.RESULT + (VectorType.POINT << 3),
        RESULT_NORMAL : SpaceType.RESULT + (VectorType.NORMAL << 3)
    };
    ns.getVectorFromSpaceVector = function(spaceType){
        return spaceType >> 3;
    }
    ns.getSpaceFromSpaceVector = function(spaceType){
        return spaceType % 8;
    }

    ns.SOURCES = {
        UNIFORM: "uniform",
        VERTEX: "vertex",
        CONSTANT: "constant"
    }

    ns.ColorClosures = {
        "emissive" : {
            input: [
                { type: Types.OBJECT, kind: "Vec3", semantic: Semantics.COLOR}
            ]
        },
        "diffuse" : {
            input: [
                { type: Types.OBJECT, kind: "Vec3", semantic: Semantics.COLOR},
                { type: Types.OBJECT, kind: "Vec3", semantic: Semantics.NORMAL},
                { type: Types.NUMBER, semantic: Semantics.SCALAR_0_TO_1, defaultValue: 0 }
            ]
        },
        "phong" : {
            input: [
                { type: Types.OBJECT, kind: "Vec3", semantic: Semantics.COLOR},
                { type: Types.OBJECT, kind: "Vec3", semantic: Semantics.NORMAL},
                { type: Types.NUMBER, semantic: Semantics.SCALAR_0_TO_1, defaultValue: 0}
            ]
        },
        cookTorrance: {
            input: [
                { type: Types.OBJECT, kind: "Vec3", semantic: Semantics.COLOR},
                { type: Types.OBJECT, kind: "Vec3", semantic: Semantics.NORMAL},
                { type: Types.NUMBER, semantic: Semantics.SCALAR_0_TO_1, defaultValue: 0.0},
                { type: Types.NUMBER, semantic: Semantics.SCALAR_0_TO_1, defaultValue: 0.0}
            ]
        },
        ward: {
            input: [
                { type: Types.OBJECT, kind: "Vec3", semantic: Semantics.COLOR},
                { type: Types.OBJECT, kind: "Vec3", semantic: Semantics.NORMAL},
                { type: Types.OBJECT, kind: "Vec3", semantic: Semantics.NORMAL},
                { type: Types.NUMBER, semantic: Semantics.SCALAR_0_TO_1, defaultValue: 0.0},
                { type: Types.NUMBER, semantic: Semantics.SCALAR_0_TO_1, defaultValue: 0.0}
            ]
        },
        scatter: {
            input: [
                { type: Types.OBJECT, kind: "Vec3", semantic: Semantics.COLOR},
                { type: Types.OBJECT, kind: "Vec3", semantic: Semantics.NORMAL},
                { type: Types.NUMBER, semantic: Semantics.SCALAR_0_TO_1, defaultValue: 0},
                { type: Types.NUMBER, semantic: Semantics.SCALAR_0_TO_1, defaultValue: 0}
            ]
        },
        "reflect" : {
            input: [
                { type: Types.OBJECT, kind: "Vec3", semantic: Semantics.NORMAL},
                { type: Types.NUMBER, semantic: Semantics.SCALAR_0_TO_1, defaultValue: 1 },
            ]
        },
        "refract" : {
            input: [
                { type: Types.OBJECT, kind: "Vec3", semantic: Semantics.NORMAL},
                { type: Types.NUMBER, semantic: Semantics.SCALAR_0_TO_1, defaultValue: 1 },
                { type: Types.NUMBER, semantic: Semantics.UNKNOWN, defaultValue: 1 },
            ]
        },
        "transparent" : {
            input: [
                { type: Types.NUMBER, semantic: Semantics.SCALAR_0_TO_1, defaultValue: 0 }
            ]
        }
    }

    ns.toJavaScript = function(node) {
        return CodeGen.generate(node);
    };

    ns.VecMath = VecMath;
    require("./interface/math")
    ns.Vec2 = require("./interface/vector").Vec2;
    ns.Vec3 = require("./interface/vector").Vec3;
    ns.Vec4 = require("./interface/vector").Vec4;
    ns.Mat2 = require("./interface/matrix").Mat2;
    ns.Mat3 = require("./interface/matrix").Mat3;
    ns.Mat4 = require("./interface/matrix").Mat4;

}(exports));

},{"./base/index.js":142,"./base/vecmath.js":144,"./interface/math":184,"./interface/matrix":185,"./interface/vector":187,"escodegen":54}],189:[function(require,module,exports){
"use strict";

function PluginRegistry() {
    this._registeredPlugins = {

    }
}

PluginRegistry.prototype._get = function (subsystem, name) {
    if (!this._has(subsystem, name))
        throw new Error(subsystem + ": " + name + " not found!")

    return this._registeredPlugins[subsystem].get(name);
};

PluginRegistry.prototype._has = function (subsystem, name) {
    return this._registeredPlugins[subsystem] && this._registeredPlugins[subsystem].has(name);
};

PluginRegistry.prototype._register = function (subsystem, name, plugin) {
    if (!this._registeredPlugins[subsystem])
        this._registeredPlugins[subsystem] = new Map();
    this._registeredPlugins[subsystem].set(name, plugin)
};

function establishSubsystem(subsystemName) {
    subsystemName = subsystemName.charAt(0).toUpperCase() + subsystemName.substring(1);
    PluginRegistry.prototype["has" + subsystemName] = function (name) {
        return this._has(subsystemName, name);
    };
    PluginRegistry.prototype["get" + subsystemName] = function (name) {
        return this._get(subsystemName, name);
    };
    PluginRegistry.prototype["register" + subsystemName] = function (name, plugin) {
        return this._register(subsystemName, name, plugin);
    };
}

establishSubsystem("module");

exports = module.exports = new PluginRegistry();
},{}],190:[function(require,module,exports){
(function (ns) {

    var Traversal = require('estraverse'),
        Syntax = Traversal.Syntax,
        parser = require('esprima'),
        Shade = require("../interfaces.js"),
        annotate = require("../utils").annotate;

    function handleCallExpression(node) {
        var callee = annotate(node.callee);
        // console.log("Call", node.callee.property, callee.getTypeString(), node.callee.object)
        if(callee.isOfKind(Shade.OBJECT_KINDS.COLOR_CLOSURE)) {
            annotate(node).copyFrom(callee);
        }
    }

    function handleMemberExpression(node) {
        var object = annotate(node.object);
        var result = annotate(node);
        if (node.object.name == "Shade" || object.isOfKind(Shade.OBJECT_KINDS.COLOR_CLOSURE)) {
            var closureName = node.property.name;
            if (!Shade.ColorClosures.hasOwnProperty(closureName)) {
                return;
            };
            result.setType(Shade.TYPES.OBJECT, Shade.OBJECT_KINDS.COLOR_CLOSURE);
        }
    }

    ns.markColorClosures = function(programAast){
        Traversal.traverse(programAast, {
            leave: function(node, parent){
                 switch (node.type) {
                    case Syntax.CallExpression:
                        return handleCallExpression(node);
                    case Syntax.MemberExpression:
                        return handleMemberExpression(node);
                }
            }
        });
    }

}(exports));

},{"../interfaces.js":188,"../utils":206,"esprima":60,"estraverse":61}],191:[function(require,module,exports){
/**
 * Simple replacer that collects all closure calls of a color closure expression and passes them to the
 * provided callback
 * @type {exports}
 */

var Traversal = require('estraverse');
var annotate = require("../utils").annotate;
var Shade = require("../interfaces.js");

var Syntax = Traversal.Syntax;

function isColorClosure(node) {
    if (node.type !== Syntax.CallExpression) {
        return false;
    }
    return annotate(node).isOfKind(Shade.OBJECT_KINDS.COLOR_CLOSURE);
}

function handleCallExpression(node, colorClosureList) {
    var callee = annotate(node.callee);
    // console.log("Call", node.callee.property, callee.getTypeString(), node.callee.object)
    if (callee.isOfKind(Shade.OBJECT_KINDS.COLOR_CLOSURE)) {
        colorClosureList.push({name: node.callee.property.name, args: node.arguments});
    }
}

function getClosureList(closureExpression) {
    // console.log(JSON.stringify(closureExpression, null, " "))
    var colorClosureList = [];
    Traversal.traverse(closureExpression, {
        leave: function (node) {
            if (node.type == Syntax.CallExpression) {
                return handleCallExpression(node, colorClosureList);
            }
        }
    });
    colorClosureList.sort(function (a, b) {
        return a.name < b.name ? -1 : a.name > b.name ? 1 : 0
    });
    return colorClosureList;
}

function handleColorClosure(closureExpression, replacer) {
    var list = getClosureList(closureExpression);
    return replacer(list);
}

var replace = function (ast, replacer) {
    return Traversal.replace(ast, {
        enter: function (node) {
            if (isColorClosure(node)) {
                this.skip();
                return handleColorClosure(node, replacer)
            }
        }
    });
};


module.exports = replace;

},{"../interfaces.js":188,"../utils":206,"estraverse":61}],192:[function(require,module,exports){
(function (ns) {

    var Traversal = require('estraverse'),
        Syntax = Traversal.Syntax,
        parser = require('esprima');

    var Shade = require("../interfaces.js"),
    SpaceVectorType = Shade.SpaceVectorType,
    Types = Shade.TYPES,
    Kinds = Shade.OBJECT_KINDS;

    ns.getDefaultValue = function(ccInputDefinition){
        if(ccInputDefinition.defaultValue == undefined)
            throw new Error("ColorClosure input has not default value!");

        if(ccInputDefinition.type == Types.NUMBER || ccInputDefinition.type == Types.INT){
            var result = {
                type: Syntax.Literal,
                value: ccInputDefinition.defaultValue
            }
            return result;
        }
        else{
            throw new Error("Currentlty don't support default values of type " + ccInputDefinition.type + " and kind " + ccInputDefinition.kind);
        }
    }

}(exports));

},{"../interfaces.js":188,"esprima":60,"estraverse":61}],193:[function(require,module,exports){
var assert = require("assert");
var ColorClosureMarker = require("./colorclosure-marker.js");

var c_implementations = {};

var registerLightingImplementation = function (name, obj) {
    c_implementations[name] = obj;
};

var resolveClosuresPreTypeInference = function (aast, implementationName, processingData, opt) {
    if (!implementationName) {
        return aast;
    }
    try {
        var resolverImpl = c_implementations[implementationName];
        assert(resolverImpl, "Implementation not found: " + implementationName);
        if (resolverImpl.resolvePreTypeInference) {
            ColorClosureMarker.markColorClosures(aast);
            return resolverImpl.resolvePreTypeInference(aast, processingData, opt);
        } else
            return aast;
    } catch (e) {
        console.error(e);
    }
    return aast;
};

var resolveClosuresPostTypeInference = function (aast, implementationName, processingData, opt) {
    if (!implementationName) {
        return aast;
    }
    try {
        var resolverImpl = c_implementations[implementationName];
        if (resolverImpl.resolvePostTypeInference)
            return resolverImpl.resolvePostTypeInference(aast, processingData, opt); else
            return aast;
    } catch (e) {
        console.error(e);
    }
    return aast;
};

registerLightingImplementation("xml3d-glsl-forward", require("./xml3d-glsl-forward"));
registerLightingImplementation("xml3d-glsl-deferred", require("./xml3d-glsl-deferred"));

module.exports = {
  registerLightingImplementation: registerLightingImplementation,
  resolveClosuresPreTypeInference: resolveClosuresPreTypeInference,
  resolveClosuresPostTypeInference: resolveClosuresPostTypeInference
};

},{"./colorclosure-marker.js":190,"./xml3d-glsl-deferred":195,"./xml3d-glsl-forward":197,"assert":25}],194:[function(require,module,exports){
(function (ns) {

    var Base = require("../../base/index.js"),
        Traversal = require('estraverse'),
        Syntax = Traversal.Syntax,
        annotate = require("./../../utils").annotate,
        DeferredInfo = require("./xml3d-deferred.js");

    var Shade = require("../../interfaces.js"),
        SpaceVectorType = Shade.SpaceVectorType,
        Types = Shade.TYPES,
        Kinds = Shade.OBJECT_KINDS;

    var SpaceTransformTools = require("../../generate/space/space-transform-tools.js"),
        ColorClosureTools = require("../colorclosure-tools.js");

    var ADD_POSITION_TO_ARGS = true;

    var ArgStorageType = ns.ArgStorageType = {
        FLOAT : 'float',
        FLOAT_BYTE: 'floatByte',
        FLOAT_UBYTE: 'floatUByte',
        FLOAT2: 'float2',
        FLOAT3: 'float3',
        FLOAT3_NORMAL: 'float3Normal',
        FLOAT4: 'float4'
    }

    var AMBIENT_DEFINITION = {type: Types.NUMBER, semantic: Shade.SEMANTICS.SCALAR_0_TO_1, defaultValue: 0 };


    ns.ColorClosureSignature = function(){
        this.id = 0;
        this.textureCount = 0;
        this.args = [];
        this.colorClosures = [];
    };
    Base.extend(ns.ColorClosureSignature.prototype, {
        construct: function(returnAast, scope){
            var closureInfo = collectClosureInfo(returnAast);
            var argAast = gatherClosureArgs(this, closureInfo, scope);
            var textures = allocateArgumentsToTextures(this);
            this.id = getSignatureId(this);
            argAast[0].value = this.id; // Set ID for shader id assignment
            return generateAast(textures, argAast);
        }
    });

    // Basic ColorClosureSignature Createion

    function addColorClosure(ccSig, colorClosureName, argIndices, envIndices){
        ccSig.colorClosures.push({
            name: colorClosureName,
            argIndices: argIndices,
            envIndices: envIndices
        });
    }

    function addArgument(ccSig, type, kind, storeType){
        var id = ccSig.args.length;
        ccSig.args.push({
            id: id,
            type: type,
            kind: kind,
            storeType: storeType,
            texIdx: undefined,
            componentIdx: undefined,
            bitIdx: undefined
        });
        return id;
    }

    // Argument Collection

    function collectClosureInfo(returnAast){
        var result = [];
        Traversal.traverse(returnAast, {
                leave: function(node, parent){
                    switch (node.type) {
                        case Syntax.CallExpression:
                            if(node.callee.type == Syntax.MemberExpression
                               && annotate(node.callee.object).isOfKind(Kinds.COLOR_CLOSURE))
                            {
                                result.push({
                                    name: node.callee.property.name,
                                    args: node.arguments
                                });
                            }
                    }
                }
            });
        result.sort(function(a,b){return a.name < b.name ? -1 : a.name > b.name ? 1 : 0});
        return result;
    }

    function gatherClosureArgs(ccSig, closureInfo, scope){
        var argCache = {}, argAast = [];

        // Add argument for signature id;
        getCachedArgument(ccSig, {type: Types.INT}, {type: "Literal", value: "ID_UNSPECIFIED"}, argCache, argAast);
        if(ADD_POSITION_TO_ARGS)
            addPositionArgument(ccSig, argCache, argAast);
        var ambientValue = { type: Syntax.LogicalExpression, operator : "||",
                        left: getEnvAccess("ambientIntensity", AMBIENT_DEFINITION),
                        right: ColorClosureTools.getDefaultValue(AMBIENT_DEFINITION) };

        getCachedArgument(ccSig, AMBIENT_DEFINITION, ambientValue, argCache, argAast);

        for(var i = 0; i < closureInfo.length; ++i){
            var cInfo = closureInfo[i];
            var closureDefinition = Shade.ColorClosures[cInfo.name];
            if(!closureDefinition)
                throw new Error("Unknown Color closure '" + cInfo.name + "'");
            var argIndices = [], value;
            for(var j = 0; j < closureDefinition.input.length; ++j){
                var inputDefinition = closureDefinition.input[j];
                if(j < cInfo.args.length)
                    value = cInfo.args[j];
                else
                    value = ColorClosureTools.getDefaultValue(inputDefinition);
                var space = DeferredInfo[cInfo.name] && DeferredInfo[cInfo.name].inputSpaces[j];
                argIndices.push(getCachedArgument(ccSig, inputDefinition, value, argCache, argAast, space));
            }
            var envIndices = {};
            for(var property in closureDefinition.env){
                var envDefinition = closureDefinition.env[property];
                // TODO: Determine if env property is undefined and use defaultValue in this case;
                value = { type: Syntax.LogicalExpression, operator : "||",
                        left: getEnvAccess(property, envDefinition),
                        right: ColorClosureTools.getDefaultValue(envDefinition) };
                envIndices[property] = getCachedArgument(ccSig, envDefinition, value, argCache, argAast);
            }
            addColorClosure(ccSig, cInfo.name, argIndices, envIndices);
       }
       return argAast;
    }

    function addPositionArgument(ccSig, argCache, argAast){
        var positionLookup = { type: Syntax.MemberExpression,
            object: { type: Syntax.Identifier, name: "_env"},
            property: { type: Syntax.Identifier, name: "position"}
        }
        // ANNO(positionLookup).setType(Types.OBJECT, "Vec3");
        // ANNO(positionLookup.object).setType(Types.OBJECT, Kinds.ANY);
        // ANNO(positionLookup.object).setGlobal(true);
        getCachedArgument(ccSig, {type: Types.OBJECT, kind: "Vec3"}, positionLookup, argCache, argAast,
            SpaceVectorType.VIEW_POINT);
    }

    function getCachedArgument(ccSig, inputDefinition, inputAast, argCache, argAast, space){
        space = space || SpaceVectorType.OBJECT;
        inputAast = space ? SpaceTransformTools.getSpaceTransformCall(inputAast, space) : inputAast;
        var keyAast = Base.deepExtend({}, inputAast);
        cleanAast(keyAast);
        var storageType = getStorageType(inputDefinition);
        var key = storageType + ";" + JSON.stringify(keyAast);
        if(argCache[key] === undefined){
            var argId = addArgument(ccSig, inputDefinition.type, inputDefinition.kind, storageType);
            argCache[key] = argId;
            argAast.push(inputAast);
        }
        return argCache[key];
    }
    /* Remove all range properties from the aast */
    function cleanAast(aast){
        for(var i in aast){
            if(i == "range" || i == "loc"){
                delete aast[i];
            }
            else if(typeof aast[i] == "object"){
                cleanAast(aast[i]);
            }
        }
    }

    function getStorageType(closureInputType){
        if(closureInputType.type == Types.NUMBER || closureInputType.type == Types.INT){
            return ArgStorageType.FLOAT;
        }
        else if(closureInputType.type == Types.OBJECT){
            switch(closureInputType.kind){
                case "Vec2": return ArgStorageType.FLOAT2;
                case "Vec3": return ArgStorageType.FLOAT3;
                case "Vec4": return ArgStorageType.FLOAT4;
                default:
                    throw new Error("Deferred input of this kind not supported: " + closureInputType.kind);
            };
        }
        else{
            throw new Error("Deferred input of this type not supported: " + closureInputType.type);
        }
    }

    function getEnvAccess(property, definition){
        var result = {
            type: Syntax.MemberExpression,
            object: {type: Syntax.Identifier, name: "_env" },
            property: {type: Syntax.Identifier, name: property }
        }
        // ANNO(result).setType(definition.type, definition.kind);
        // var objAnno = ANNO(result.object);
        // objAnno.setType(Types.OBJECT, Kinds.ANY);
        // objAnno.setGlobal(true);
        return result;
    }


    // Argument Allocation


    function allocateArgumentsToTextures(ccSig){
        var argCopy = ccSig.args.slice( ADD_POSITION_TO_ARGS ? 3 : 2);
        argCopy.sort(function(a, b){
            return getStorageSize(a.storeType) - getStorageSize(b.storeType);
        });
        argCopy.push(ccSig.args[ADD_POSITION_TO_ARGS ? 2 : 1]); // Ambient comes third.
        if(ADD_POSITION_TO_ARGS)
            argCopy.push(ccSig.args[1]); // POSITION comes second.
        argCopy.push(ccSig.args[0]); // ID argument always comes first (and thus: last in this array)
        var textures = [];
        var i = argCopy.length;
        while(i--){
            var arg = argCopy[i];
            assignTextureSlot(arg, textures);
        }
        ccSig.textureCount = textures.length;
        return textures;
    }
    function assignTextureSlot(arg, textures){
        var size = getStorageSize(arg.storeType);
        for(var i = 0; i < textures.length; i++){
            var tex = textures[i];
            if(size < 32){
                throw new Error("We currently don't support storing of values smaller than 32 bit");
            }
            else if(tex.usedComponents + size / 32 <= 4){
                arg.texIdx = i;
                arg.componentIdx = tex.usedComponents;
                arg.bitIdx = 0;
                tex.usedComponents += size / 32;
                tex.usedBits = 0;
                tex.storedArgs.push(arg);
                return;
            }
        }
        arg.texIdx = textures.length;
        arg.componentIdx = 0;
        arg.bitIdx = 0;
        if(size < 32){
            throw new Error("We currently don't support storing of values smaller than 32 bit");
        }
        else{
            textures.push({
                usedComponents: size / 32,
                usedBits: 0,
                storedArgs: [arg]
            });
        }
    }

    function getStorageSize(storeType){
        switch(storeType){
            case ArgStorageType.FLOAT: return 32;
            case ArgStorageType.FLOAT_BYTE: return 8;
            case ArgStorageType.FLOAT_UBYTE: return 8;
            case ArgStorageType.FLOAT2: return 64;
            case ArgStorageType.FLOAT3: return 96;
            case ArgStorageType.FLOAT3_NORMAL: return 24;
            case ArgStorageType.FLOAT4: return 128;
        }
    }

    // Get ColorClosureSignature ID

    var c_SignatureNextId = 0;
    var c_SignatureIDCache = {};

    ns.ColorClosureSignature.clearIdCache = function(){
        c_SignatureNextId = 0;
        c_SignatureIDCache = {};
    }

    function getSignatureId(ccSig){
        var key = "";
        for(var i = 0; i < ccSig.args.length; ++i){
            var arg = ccSig.args[i];
            key += getArgumentKey(arg) + ";"
        }
        for(i = 0; i < ccSig.colorClosures.length; ++i){
            var closure = ccSig.colorClosures[i];
            key += closure.name + "," + closure.argIndices.join(",");
            for(var prop in closure.envIndices){
                key += "," + prop + ">" + closure.envIndices[i];
            }
        }
        if(c_SignatureIDCache[key] === undefined){
            c_SignatureIDCache[key] = c_SignatureNextId;
            c_SignatureNextId++;
        }
        return c_SignatureIDCache[key];
    }

    function getArgumentKey(arg){
        return arg.type + "," + arg.kind + "," + arg.storeType + "," + arg.texIdx + ","
            + arg.componentIdx + "," + arg.bitIdx;
    }

    // Aast generation

    function generateAast(textures, argAast){
        var arrayExpression = { type: Syntax.ArrayExpression, elements: []};
        for(var i = 0; i < textures.length; ++i){
            var vectorExpression = generateVectorAast(textures[i], argAast);
            arrayExpression.elements.push(vectorExpression);
        }
        // ANNO(arrayExpression).setType(Types.ARRAY);

        var returnStatement = {type: Syntax.ReturnStatement, argument: arrayExpression};
        return returnStatement;
    }

    function generateVectorAast(texture, argAast){
        var vecArgs = [];
        for(var i = 0; i < texture.storedArgs.length; ++i){
            var arg = texture.storedArgs[i];
            var size = getStorageSize(arg.storeType);
            if(size < 32){
                throw new Error("We currently don't support storing of values smaller than 32 bit");
            }
            else{
                vecArgs.push(argAast[arg.id]);
            }
        }
        for(i = texture.usedComponents; i < 4; ++i){
            var zeroLiteral = { type: Syntax.Literal, value: "0" };
            // ANNO(zeroLiteral).setType(Types.INT);
            vecArgs.push(zeroLiteral);
        }
        var result = { type: Syntax.NewExpression, callee: { type: Syntax.Identifier, name: "Vec4"}, arguments: vecArgs};
        // ANNO(result).setType(Types.OBJECT, "Vec4");
        return result;
    }


}(exports));

},{"../../base/index.js":142,"../../generate/space/space-transform-tools.js":180,"../../interfaces.js":188,"../colorclosure-tools.js":192,"./../../utils":206,"./xml3d-deferred.js":196,"estraverse":61}],195:[function(require,module,exports){
(function (ns) {

    var Closures = require("./xml3d-deferred.js"),
        Traversal = require('estraverse'),
        Syntax = Traversal.Syntax,
        parser = require('esprima'),
        Shade = require("../../interfaces.js"),

        sanitizer = require("./../../analyze/sanitizer/sanitizer.js"),
        ColorClosureSignature = require("./color-closure-signature.js").ColorClosureSignature;


    ns.resolvePreTypeInference = function (aast, processData, opt) {
        var state = {
            colorClosureSignatures: [],
            inMain: false
        };
        var globalScrope = aast.scope;
        aast = Traversal.replace(aast, {
            enter: function(node, parent){
                switch(node.type){
                    case Syntax.FunctionDeclaration:
                        // TODO: Properly determine if we are in main function
                        if(node.id.name == "shade")
                            state.inMain = true;
                        else
                            this.skip();
                        break;
                }
            },
            leave: function(node, parent){
                switch(node.type){
                    case Syntax.FunctionDeclaration:
                        // TODO: Properly determine if we are in main function
                        if(node.id.name == "shade")
                            state.inMain = false;
                        break;
                    case Syntax.ReturnStatement:
                        if(state.inMain){
                            var signature = new ColorClosureSignature();
                            var replacement = signature.construct(node, globalScrope);
                            state.colorClosureSignatures.push(signature);
                            return replacement;
                        }
                }
            }
        })

        processData['colorClosureSignatures'] = state.colorClosureSignatures;

        return aast;
    }

}(exports));

},{"../../interfaces.js":188,"./../../analyze/sanitizer/sanitizer.js":111,"./color-closure-signature.js":194,"./xml3d-deferred.js":196,"esprima":60,"estraverse":61}],196:[function(require,module,exports){
(function (ns) {

        var Shade = require("../../interfaces.js"),
            SpaceVectorType = Shade.SpaceVectorType;

        ns.emissive = {
            inputSpaces: [
                SpaceVectorType.OBJECT
            ]
        }

        ns.diffuse = {
            inputSpaces: [
                SpaceVectorType.OBJECT,
                SpaceVectorType.VIEW_NORMAL,
                SpaceVectorType.OBJECT
            ]
        }

        ns.phong = {
            inputSpaces: [
                SpaceVectorType.OBJECT,
                SpaceVectorType.VIEW_NORMAL,
                SpaceVectorType.OBJECT
            ]
        }

        ns.cookTorrance = {
            inputSpaces: [
                SpaceVectorType.OBJECT,
                SpaceVectorType.VIEW_NORMAL,
                SpaceVectorType.OBJECT,
                SpaceVectorType.OBJECT
            ]
        }

        ns.ward = {
            inputSpaces: [
                SpaceVectorType.OBJECT,
                SpaceVectorType.VIEW_NORMAL,
                SpaceVectorType.VIEW_NORMAL,
                SpaceVectorType.OBJECT,
                SpaceVectorType.OBJECT
            ]
        }

        ns.scatter = {
            inputSpaces: [
                SpaceVectorType.OBJECT,
                SpaceVectorType.VIEW_NORMAL,
                SpaceVectorType.OBJECT
            ]
        }

        ns.reflect = {
            inputSpaces: [
                SpaceVectorType.VIEW_NORMAL,
                SpaceVectorType.OBJECT
            ]
        }

        ns.refract = {
            inputSpaces: [
                SpaceVectorType.VIEW_NORMAL,
                SpaceVectorType.OBJECT,
                SpaceVectorType.OBJECT
            ]
        }

}(exports));

},{"../../interfaces.js":188}],197:[function(require,module,exports){
(function (ns) {

    var assert = require("assert");
    var ClosuresImpl = require("./xml3d-forward.js"),
        LightLoop = require("./light-loop.js").LightLoop,
        Traversal = require('estraverse'),
        Syntax = Traversal.Syntax,
        parser = require('esprima'),
        Shade = require("../../interfaces.js"),
        sanitizer = require("./../../analyze/sanitizer/sanitizer.js");
    var replacer = require("../colorclosure-replacer.js");

    var SpaceTransformTools = require("../../generate/space/space-transform-tools.js"),
        ColorClosureTools = require("../colorclosure-tools.js");



    function containsClosure(arr, name) {
        return arr.some(function (func) {
            return func.id.name == name;
        });
    }

    function getInjectAddition(destName, functionName, inputPre, ccName, colorClosureIndex ){
        var args = [];
        for(var i = 0; i < inputPre.length; ++i){
            args.push({ type: Syntax.Identifier, name: inputPre[i]});
        }
        var inputsCnt = Shade.ColorClosures[ccName].input.length;
        for(var i = 0; i < inputsCnt; ++i){
            args.push({ type: Syntax.Identifier, name: getColorClosureInputArg(colorClosureIndex, i)});
        }
        return {
            type: Syntax.ExpressionStatement,
            expression: { type: Syntax.AssignmentExpression,
                operator: "=",
                left: { type: Syntax.Identifier, name: destName},
                right: { type: Syntax.CallExpression,
                    callee: { type: Syntax.MemberExpression,
                        object: {type: Syntax.Identifier, name: destName},
                        property: {type: Syntax.Identifier, name: "add"}
                    },
                    arguments: [{ type: Syntax.CallExpression,
                        callee: {type: Syntax.Identifier, name: functionName},
                        arguments: args
                    }]
              }}
        };
    }

    function getColorClosureInject(ccName, functionMember, state){
        if(!ClosuresImpl[ccName])
            console.error("No implementation available for ColorClosure '" + ccName + "'" );
        if(!ClosuresImpl[ccName][functionMember])
            return null;
        var functionName = ccName + "_" + functionMember;
        if (!containsClosure(state.newFunctions, functionName)){
            var closureImplementation = ClosuresImpl[ccName][functionMember];
            try {
                var closureAST = parser.parse(closureImplementation.toString(), { raw: true });
                closureAST = sanitizer.sanitize(closureAST);
                closureAST.body[0].id.name = functionName;
                state.newFunctions.push(closureAST.body[0]);
            } catch (e) {
                console.error("Error in analysis of closure '", ccName + ">" + functionMember, "'", e);
                return;
            }
        }
        return functionName;
    }


    function injectBrdfEntry(ccNames, state){
        var result = {
            type: Syntax.BlockStatement,
            body: []
        };
        for(var i = 0; i < ccNames.length; ++i){
            var fName, ccName = ccNames[i];
            if(fName = getColorClosureInject(ccName, "getDiffuse", state)){
                result.body.push(getInjectAddition("kd", fName, ["L", "V"], ccName, i));
            }
            if(fName = getColorClosureInject(ccName, "getSpecular", state)){
                result.body.push(getInjectAddition("ks", fName, ["L", "V"], ccName, i));
            }
        }
        return result;
    }

    function injectAmbientEntry(ccNames, state){
        var result = {
            type: Syntax.BlockStatement,
            body: []
        };
        for(var i = 0; i < ccNames.length; ++i){
            var fName, ccName = ccNames[i];
            if(fName = getColorClosureInject(ccName, "getAmbient", state)){
                result.body.push(getInjectAddition("ambientColor", fName, ["ambientIntensity"], ccName, i));
            }
        }
        return result;
    }

    function injectEmissiveEntry(ccNames, state) {
        var result = {
            type: Syntax.BlockStatement,
            body: []
        };
        for(var i = 0; i < ccNames.length; ++i){
            var fName, ccName = ccNames[i];
            if(fName = getColorClosureInject(ccName, "getEmissive", state)){
                result.body.push(getInjectAddition("emissiveColor", fName, [], ccName, i));
            }
        }
        return result;
    }

    function injectRefractReflectEntry(ccNames, state){
        var result = {
            type: Syntax.BlockStatement,
            body: []
        };
        for(var i = 0; i < ccNames.length; ++i){
            var fName, ccName = ccNames[i];
            if(fName = getColorClosureInject(ccName, "getRefract", state)){
                result.body.push(getInjectAddition("refractColor", fName, ["position"], ccName, i));
            }
            if(fName = getColorClosureInject(ccName, "getReflect", state)){
                result.body.push(getInjectAddition("reflectColor", fName, ["position"], ccName, i));
            }
        }
        return result;
    }

    function injectTransparency(ccNames, state) {
        var result = {
            type: Syntax.BlockStatement,
            body: []
        };
        state.isTransparent = true;
        for(var i = 0; i < ccNames.length; ++i){
            var fName, ccName = ccNames[i];
            if(fName = getColorClosureInject(ccName, "getTransparency", state)) {
                result.body.push(getInjectAddition("transparency", fName, ["position"], ccName, i));
            }
        }
        // if no transparency closure force opaque
        if (result.body.length === 0) {
            result.body.push({
                type: Syntax.ExpressionStatement,
                expression: {
                    type: Syntax.AssignmentExpression,
                    operator: "=",
                    left: {type: Syntax.Identifier, name: "transparency"},
                    right: {type: Syntax.Identifier, name: "opaque"}
                }
            });
            state.isTransparent = false;
        }

        return result;
    }

    function injectColorClosureCalls(lightLoopFunction, ccNames, state){
        var result = Traversal.replace(lightLoopFunction.body, {
            enter: function(node, parent){
                if(node.type == Syntax.ExpressionStatement && node.expression.type == Syntax.Literal){
                    switch(node.expression.value){
                        case "BRDF_ENTRY": return injectBrdfEntry(ccNames, state);
                        case "AMBIENT_ENTRY": return injectAmbientEntry(ccNames, state);
                        case "EMISSIVE_ENTRY": return injectEmissiveEntry(ccNames, state);
                        case "REFRACT_REFLECT_ENTRY": return injectRefractReflectEntry(ccNames, state);
                        case "TRANSPARENCY": return injectTransparency(ccNames, state);
                    };

                }
            }
        });
        return result;
    }

    function getColorClosureInputArg(ccIndex, inputIndex){
        return "_cc" + ccIndex + "Input" + inputIndex;
    }

    function createLightLoopFunction(lightLoopFunctionName, ccNames, state){
        try {
            var lightLoopAst = parser.parse(LightLoop.toString(), { raw: true });
        } catch (e) {
            console.error("Error in analysis of the lightLoop", e);
            return;
        }
        var functionAast = lightLoopAst.body[0];
        functionAast.id.name = lightLoopFunctionName;

        for(var i = 0; i < ccNames.length; ++i){
            var ccName = ccNames[i];
            var ccInput = Shade.ColorClosures[ccName].input;
            for(var j = 0; j < ccInput.length; ++j){
                functionAast.params.push({
                    type: Syntax.Identifier,
                    name: getColorClosureInputArg(i,j)
                });
            }
        }
        injectColorClosureCalls(functionAast, ccNames, state);

        lightLoopAst = sanitizer.sanitize(lightLoopAst);
        return lightLoopAst.body[0];
    }

    function getLightLoopFunction(colorClosureList, state){
        var ccNames = [];
        for(var i = 0; i < colorClosureList.length; ++i)
            ccNames.push(colorClosureList[i].name);
        var lightLoopFunctionName = "lightLoop_" + ccNames.join("_");
        if (!containsClosure(state.newFunctions, lightLoopFunctionName)){
            state.newFunctions.push(createLightLoopFunction(lightLoopFunctionName, ccNames, state));
        }
        return lightLoopFunctionName;
    }



    function generateLightLoopCall(lightLoopFunction, colorClosureList, state){
        var args = [];

        var posArg = state.positionArg;
        if(!state.noSpaceTransform)
            posArg = SpaceTransformTools.getSpaceTransformCall(posArg, Shade.SpaceVectorType.VIEW_POINT);
        args.push(posArg)
        args.push(state.ambientArg);
        for(var i = 0; i < colorClosureList.length; ++i){
            var ccEntry = colorClosureList[i];
            var ccInput = Shade.ColorClosures[ccEntry.name].input;
            for(var j = 0; j < ccInput.length; ++j){
                var arg = ccEntry.args[j];
                if(!arg)
                    arg = ColorClosureTools.getDefaultValue(ccInput[j]);
                if(ccInput[j].semantic == Shade.SEMANTICS.NORMAL && !state.noSpaceTransform)
                    arg = SpaceTransformTools.getSpaceTransformCall(arg, Shade.SpaceVectorType.VIEW_NORMAL);
                args.push(arg);
            }
        }
        return {
            type: Syntax.CallExpression,
            callee: {type: Syntax.Identifier, name: lightLoopFunction},
            arguments: args
        };
    }

    function handleReturnStatement(returnAast, state){
        var list = getClosureList(returnAast, state);
        if(list.length == 0)
            return;

        returnAast.argument = lighLoopCall;
    }


    function getEnvParameter(property){
        return { type: Syntax.MemberExpression,
                object: { type: Syntax.Identifier, name: "_env" },
                property: { type: Syntax.Identifier, name: property}};
    }

    ns.resolvePreTypeInference = function (ast, processData, opt) {
        var state = {
            positionArg: opt && opt.lightLoopPositionArg || null,
            ambientArg: opt && opt.lightLoopAmbientArg || null,
            noSpaceTransform: opt && opt.lightLoopNoSpaceTransform || false,
            program: ast,
            newFunctions: []
        }
        if(!state.positionArg)
            state.positionArg = getEnvParameter("position");
        if(!state.ambientArg)
            state.ambientArg = { type: Syntax.LogicalExpression, operator: "||",
                                 left: getEnvParameter("ambientIntensity"),
                                 right: {type: Syntax.Literal, value: 0} };

        ast = replacer(ast, function(closures) {
            assert(closures.length);
            var lightLoopFunction = getLightLoopFunction(closures, state);
            var lighLoopCall = generateLightLoopCall(lightLoopFunction, closures, state);
            //console.log("here", arguments);
            return lighLoopCall;
        });

        state.newFunctions.forEach(function(newFunction) {
            state.program.body.unshift(newFunction);
        })

        processData["isTransparent"] = !!state.isTransparent;

        return ast;
    }

}(exports));

},{"../../generate/space/space-transform-tools.js":180,"../../interfaces.js":188,"../colorclosure-replacer.js":191,"../colorclosure-tools.js":192,"./../../analyze/sanitizer/sanitizer.js":111,"./light-loop.js":198,"./xml3d-forward.js":199,"assert":25,"esprima":60,"estraverse":61}],198:[function(require,module,exports){
/**
 * Created with JetBrains WebStorm.
 * User: lachsen
 * Date: 12/17/13
 * Time: 1:21 PM
 * To change this template use File | Settings | File Templates.
 */
(function (ns) {

ns.LightLoop = function LightLoop(position, ambientIntensity){
    var V = position.flip().normalize(), dist, atten;
    var kdComplete = new Vec3(0,0,0), ksComplete = new Vec3(0,0,0);
    if (this.MAX_POINTLIGHTS)
    for (var i = 0; i < this.MAX_POINTLIGHTS; i++) {
        if (!this.pointLightOn[i])
            continue;

        var L = this.viewMatrix.mulVec(this.pointLightPosition[i], 1.0).xyz();
        L = L.sub(position);
        dist = L.length();
        L = L.normalize();

        var kd = new Vec3(0,0,0), ks = new Vec3(0,0,0);
        "BRDF_ENTRY";

        atten = 1.0 / (this.pointLightAttenuation[i].x() + this.pointLightAttenuation[i].y() * dist + this.pointLightAttenuation[i].z() * dist * dist);
        kd = kd.mul(this.pointLightIntensity[i]).mul(atten);
        ks = ks.mul(this.pointLightIntensity[i]).mul(atten);
        kdComplete = kdComplete.add(kd);
        ksComplete = ksComplete.add(ks);
    }
    if (this.MAX_DIRECTIONALLIGHTS)
    for (i = 0; i < this.MAX_DIRECTIONALLIGHTS; i++) {
        if (!this.directionalLightOn[i])
            continue;

        L = this.viewMatrix.mulVec(this.directionalLightDirection[i], 0).xyz();
        L = L.flip().normalize();

        var kd = new Vec3(0,0,0), ks = new Vec3(0,0,0);
        "BRDF_ENTRY";

        kd = kd.mul(this.directionalLightIntensity[i]);
        ks = ks.mul(this.directionalLightIntensity[i]);
        kdComplete = kdComplete.add(kd);
        ksComplete = ksComplete.add(ks);
    }
    if (this.MAX_SPOTLIGHTS)
    for (i = 0; i < this.MAX_SPOTLIGHTS; i++) {
        if (this.spotLightOn[i]) {
            L = this.viewMatrix.mulVec(this.spotLightPosition[i], 1.0).xyz();
            L = L.sub(position);
            dist = L.length();
            L = L.normalize();

            var lDirection = this.viewMatrix.mulVec(this.spotLightDirection[i].flip(), 0).xyz().normalize();
            var angle = L.dot(lDirection);
            if(angle > this.spotLightCosCutoffAngle[i]) {
                var kd = new Vec3(0,0,0), ks = new Vec3(0,0,0);
                "BRDF_ENTRY";

                var c = 1.0;
                if (this.spotLightShadowMap && this.spotLightCastShadow[i]) {
                    var wpos = this.viewInverseMatrix.mulVec(position, 1.0).xyz();

                    var lsPos = this.spotLightMatrix[i].mulVec(new Vec4(wpos, 1));
                    var perspectiveDivPos = lsPos.xyz().div(lsPos.w()).mul(0.5).add(0.5);
                    var lsDepth = perspectiveDivPos.z() - this.spotLightShadowBias[i];

                    var lightuv = perspectiveDivPos.xy();
                    var bitShift = new Vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );

                    var depth = this.spotLightShadowMap[i].sample2D(lightuv).dot(bitShift);
                    if(lsDepth >= depth) {
                        c = 0.0;
                    }
                    /*var texSize = Math.max(this.width, this.height) * 2;
                    var texelSize = 1 / texSize;
                    var f = Math.fract(lightuv.mul(texSize).add(0.5));
                    var centroidUV = Math.floor(lightuv.mul(texSize).add(0.5));
                    centroidUV = centroidUV.div(texSize);

                    var lb = this.spotLightShadowMap[i].sample2D(centroidUV).dot(bitShift);
                    if (lb >= lsDepth)
                        lb = 1.0;
                    else
                        lb = 0.0;

                    var lt = this.spotLightShadowMap[i].sample2D(centroidUV.add(new Vec2(0.0, 1.0).mul(texelSize))).dot(bitShift);
                    if (lt >= lsDepth)
                        lt = 1.0;
                    else
                        lt = 0.0;

                    var rb = this.spotLightShadowMap[i].sample2D(centroidUV.add(new Vec2(1.0, 0.0).mul(texelSize))).dot(bitShift);
                    if (rb >= lsDepth)
                        rb = 1.0;
                    else
                        rb = 0.0;

                    var rt = this.spotLightShadowMap[i].sample2D(centroidUV.add(new Vec2(1.0, 1.0).mul(texelSize))).dot(bitShift);
                    if (rt >= lsDepth)
                        rt = 1.0;
                    else
                        rt = 0.0;

                    var a = Math.mix(lb, lt, f.y());
                    var b = Math.mix(rb, rt, f.y());
                    c = Math.mix(a, b, f.x());*/
                }

                var softness = 1.0;
                if(angle < this.spotLightCosSoftCutoffAngle[i])
                    softness = (angle - this.spotLightCosCutoffAngle[i]) /
                        (this.spotLightCosSoftCutoffAngle[i] -  this.spotLightCosCutoffAngle[i]);

                atten = 1.0 / (this.spotLightAttenuation[i].x() + this.spotLightAttenuation[i].y() * dist + this.spotLightAttenuation[i].z() * dist * dist);
                kd = kd.mul(this.spotLightIntensity[i]).mul(atten * softness * c);
                ks = ks.mul(this.spotLightIntensity[i]).mul(atten * softness * c);
                kdComplete = kdComplete.add(kd);
                ksComplete = ksComplete.add(ks);
            }
        }
    }
    var ambientColor = new Vec3(0,0,0);
    "AMBIENT_ENTRY";
    kdComplete = kdComplete.add(ambientColor);
    var emissiveColor = new Vec3(0, 0, 0);
    "EMISSIVE_ENTRY"
    /*if (this.ssaoMap) {
        kdComplete = kdComplete.mul(1 - this.ssaoMap.sample2D(this.normalizedCoords).r());
    } */
    var refractColor = new Vec3(0, 0, 0);
    var reflectColor = new Vec3(0, 0, 0);
    "REFRACT_REFLECT_ENTRY"
    var opaque = new Vec3(1, 1, 1);
    var transparency = new Vec3(0, 0, 0);
    "TRANSPARENCY"
    return new Vec4(Math.pow(new Vec3(emissiveColor.add(kdComplete.add(ksComplete)).add(refractColor).add(reflectColor)), new Vec3(1/2.2)), transparency.x());
}

}(exports));

},{}],199:[function(require,module,exports){
(function (ns) {

        ns.emissive = {
            getEmissive: function getEmissive(color){
                return color;
            }
        };

        ns.diffuse = {
            getDiffuse: function getDiffuse(L, V, color, N, roughness){
                // If a roughness is defined we use Oren Nayar brdf.
                var a, b, NdotV, thetaOut, phiOut, thetaIn;
                var cosPhiDiff, alpha, beta;
                var NdotL = Math.saturate(N.dot(L));

                // Lambertian reflection is constant over the hemisphere.
                var brdf = 1.0;

                if (roughness > 0) {
                    a = 1.0 - (roughness * roughness) / (2 * (roughness * roughness + 0.33));
                    b = 0.45 * (roughness * roughness) / (roughness * roughness + 0.09);
                    NdotV = N.dot(V);
                    thetaOut = Math.acos(NdotV);
                    phiOut = V.sub(N.mul(NdotV)).normalize();
                    thetaIn = Math.acos(NdotL);
                    cosPhiDiff = phiOut.dot(L.sub(N.mul(NdotL)).normalize());
                    alpha = Math.max(thetaOut, thetaIn);
                    beta = Math.min(thetaOut, thetaIn);
                    brdf = (a + b * Math.saturate(cosPhiDiff) * Math.sin(alpha) * Math.tan(beta));
                }
                brdf *= NdotL;
                return color.mul(brdf);
            },

            getAmbient: function getAmbient(ambientIntensity, color, N, roughness){
                return color.mul(ambientIntensity);
            }
        };

        ns.phong = {
            getSpecular: function getSpecular(L, V, color, N, shininess){
                var R = L.reflect(N).normalize();
                var eyeVector = V.flip();
                return color.mul(Math.pow(Math.max(R.dot(eyeVector),0.0), shininess*128.0));
            }
        };

        ns.cookTorrance = {
            getSpecular: function getSpecular(L, V, color, N, ior, roughness){
                var R0 = Math.pow((1 - ior) / (1 + ior), 2);
                var H = V.add(L).normalize(),
                    NdotH = N.dot(H),
                    NdotL = Math.saturate(N.dot(L)),
                    HdotN = H.dot(N),
                    HdotL = H.dot(L),
                    HdotV = H.dot(V),
                    NdotV = N.dot(V);

                // Beckmann distribution
                var alpha = Math.acos(NdotH),
                    numerator = Math.exp(-Math.pow(Math.tan(alpha) / roughness, 2)),
                    denominator = Math.pow(roughness, 2) * Math.pow(NdotH, 4),
                    d =  Math.max(0, numerator / denominator);

                // Geometric attenuation
                var G1 = 2 * HdotN * NdotV / HdotV,
                    G2 = 2 * HdotN * NdotL / HdotV,
                    g =  Math.min(1, Math.max(0, Math.min(G1, G2))),
                    f = Math.max(0, R0 + (1 - R0) * Math.pow(1 - NdotH, 5));

                var brdf = d * g * f / (Math.PI * NdotV);
                return color.mul(brdf);
            }
        };

        ns.ward = {
            getSpecular: function getSpecular(L, V, color, N, T, ax, ay){
                var H = L.add(V).normalize();
                var B = N.cross(T).normalize();
                var NdotV = Math.saturate(N.dot(V));
                var NdotL = Math.saturate(N.dot(L)) + 0.001;
                var NdotH = N.dot(H) + 0.001;
                var HdotT = H.dot(T);
                var HdotB = H.dot(B);

                var first = 1 / (4 * Math.PI * ax * ay * Math.sqrt(NdotL * NdotV));
                var beta = -(Math.pow(HdotT / ax, 2) + Math.pow(HdotB / ay, 2)) / (NdotH * NdotH);
                var second = Math.exp(beta);
                var brdf = Math.max(0, first * second) * NdotL;

                return color.mul(brdf);
            }
        };

        ns.scatter = {
            getSpecular: function getSpecular(L, V, color, N, wrap, scatterWidth){
                var NdotL = Math.saturate(N.dot(L));

                var NdotLWrap = (NdotL + wrap) / (1 + wrap);
                var scatter = Math.smoothstep(0.0, scatterWidth, NdotLWrap) * Math.smoothstep(scatterWidth * 2.0, scatterWidth, NdotLWrap);

                return color.mul(scatter);
            }
        };

        ns.reflect = {
            getReflect: function getReflect(position, N, factor) {
                N = this.viewInverseMatrix.mulVec(N, 0).xyz();
                var I = this.viewInverseMatrix.mulVec(position, 1.0).xyz().sub(this.cameraPosition).normalize();
                var reflection3D = I.reflect(N).normalize();
                var reflection2D = new Vec2((Math.atan2(-reflection3D.z(), reflection3D.x()) + Math.PI) / (2 * Math.PI), (Math.asin(reflection3D.y()) + Math.PI / 2.0) / Math.PI);
                return Math.pow(this.environment.sample2D(reflection2D).rgb(), new Vec3(2.2)).mul(factor);
            }
        };

        ns.refract = {
            getRefract: function getRefract(position, N, eta, factor) {
                N = this.viewInverseMatrix.mulVec(N, 0).xyz();
                var I = this.viewInverseMatrix.mulVec(position, 1.0).xyz().sub(this.cameraPosition).normalize();
                var refraction3D = I.refract(N, eta).normalize();
                var refraction2D = new Vec2((Math.atan2(-refraction3D.z(), refraction3D.x()) + Math.PI) / (2 * Math.PI), (Math.asin(refraction3D.y()) + Math.PI / 2.0) / Math.PI);
                return Math.pow(this.environment.sample2D(refraction2D).rgb(), new Vec3(2.2)).mul(factor);
            }
        };

        ns.transparent = {
            getTransparency: function getTransparency(position, alpha) {
                return new Vec3(alpha);
            }
        };

}(exports));

},{}],200:[function(require,module,exports){
/**
 * @enum {string}
 */
module.exports.TYPES = {
    ANY: "any",
    INT: "int",
    NUMBER: "number",
    BOOLEAN: "boolean",
    OBJECT: "object",
    ARRAY: "array",
    NULL: "null",
    UNDEFINED: "undefined",
    FUNCTION: "function",
    STRING: "string",
    INVALID: "invalid",
    REFERENCE: "reference"
};

},{}],201:[function(require,module,exports){
// Dependencies
var codegen = require('escodegen');

var ErrorHandler = {};

/**
 * @param node
 * @param {string} type
 * @param {...*} message
 * @returns {{message: string, loc: *}}
 */
ErrorHandler.generateErrorInformation = function (node, type, message) {
    var args = Array.prototype.slice.call(arguments).splice(2),
        loc = node.loc,
        codeInfo = "";

    codeInfo += codegen.generate(node);
    if (loc && loc.start.line) {
        codeInfo += " (Line " + loc.start.line + ")";
    }
    message = args.length ? args.join(" ") + ": " : "";
    return {message: type + ": " + message + codeInfo, loc: loc};
};

ErrorHandler.throwError = function(node, msg) {
    var loc = node && node.loc;
    if (loc && loc.start.line) {
        msg = "Line " + loc.start.line + ": " + msg;
    }
    msg += ": " + codegen.generate(node);

    var error = new Error(msg);
    error.loc = loc;
    throw error;
};

ErrorHandler.ERROR_TYPES = {
    TYPE_ERROR: "TypeError",
    REFERENCE_ERROR: "ReferenceError",
    NAN_ERROR: "NotANumberError",
    SHADEJS_ERROR: "ShadeJSError"
};

module.exports = ErrorHandler;


},{"escodegen":54}],202:[function(require,module,exports){
var assert = require("assert");

var TypeSystem = (function () {
    var registry = new Map();
    var result = {
        registerPredefinedObject: function (definition) {
			assert(definition.name, "Can't register object without name");
            registry.set(definition.name, definition);
        },

        getPredefinedObject: function (name) {
            var obj = registry.get(name);
            assert(obj, "Can't find object '" + name + "' in TypeSystem.");
            return obj;
        }
    };
    result.registerPredefinedObject(require("../analyze/typeinference/registry/math.js"));
	result.registerPredefinedObject(require("../analyze/typeinference/registry/vec2.js"));
	result.registerPredefinedObject(require("../analyze/typeinference/registry/vec3.js"));
	result.registerPredefinedObject(require("../analyze/typeinference/registry/vec4.js"));
    result.registerPredefinedObject(require("../analyze/typeinference/registry/mat3.js"));
    result.registerPredefinedObject(require("../analyze/typeinference/registry/mat4.js"));
    result.registerPredefinedObject(require("../analyze/typeinference/registry/system.js"));
    result.registerPredefinedObject(require("../analyze/typeinference/registry/space.js"));
    result.registerPredefinedObject(require("../analyze/typeinference/registry/object.js"));
    result.registerPredefinedObject(require("../analyze/typeinference/registry/shade.js"));
    result.registerPredefinedObject(require("../analyze/typeinference/registry/array.js"));
    result.registerPredefinedObject(require("../analyze/typeinference/registry/texture.js"));
    return result;
}());

module.exports = TypeSystem;

},{"../analyze/typeinference/registry/array.js":117,"../analyze/typeinference/registry/mat3.js":119,"../analyze/typeinference/registry/mat4.js":120,"../analyze/typeinference/registry/math.js":121,"../analyze/typeinference/registry/object.js":122,"../analyze/typeinference/registry/shade.js":123,"../analyze/typeinference/registry/space.js":124,"../analyze/typeinference/registry/system.js":125,"../analyze/typeinference/registry/texture.js":126,"../analyze/typeinference/registry/vec2.js":128,"../analyze/typeinference/registry/vec3.js":129,"../analyze/typeinference/registry/vec4.js":130,"assert":25}],203:[function(require,module,exports){
// External dependencies
var Syntax = require('estraverse').Syntax;
var Set = require('analyses').Set;
var extend = require("lodash.assign");
var clone = require("lodash.clone");
var assert = require('assert');
var TypeSystem = require('./type-system.js');

// Internal dependencies
var Shade = require("../interfaces.js"); // TODO(ksons): Eliminate this dependency
var TYPES = require("./constants.js").TYPES;

// TODO(ksons): New mechanism for predefined types
var KINDS = Shade.OBJECT_KINDS;

/**
 * @param {*} info Carrier object for the type info, only node.extra gets polluted
 * @constructor
 */
var TypeInfo = function (info) {
    this.info = info;
    var self = this;
    
    assert(info.type);

    Object.defineProperties(this, {
        type: {get: function() { return info.type }, set: function(e) { info.type = e; }},
        error: {get: function() { return info.error }, set: function(e) { info.error = e; }},
        ctor: {get: function() {
            if(!self.isFunction() || !self.getKind()) {
                throw new Error("Has no constructor:" + self);
            }
			var predefinedType = TypeSystem.getPredefinedObject(this.getKind());
			return predefinedType;
            }
        }
    });
};

TypeInfo.createForContext = function (node, ctx) {
    var result = new TypeInfo(node.extra);
    if (result.getType() !== TYPES.ANY) {
        return result;
    }

    if (node.type == Syntax.Identifier) {
        var name = node.name;
        var variable = ctx.getBindingByName(name);
        if (variable) {
            result.copy(variable);
        }
    }
    return result;
};

/**
 * @param {TypeInfo} typeInfo
 * @param {Object?} value
 */
TypeInfo.copyStaticValue = function (typeInfo, value) {
    value = value || typeInfo.getConstantValue();
    // We don't have to copy primitive types
    //if (!typeInfo.isObject())
        return value;
    //switch (typeInfo.getKind()) {
    //    case "Vec2":
    //        return new Shade.Vec2(value);
    //    case "Vec3":
    //        return new Shade.Vec3(value);
    //    case "Vec4":
    //        return new Shade.Vec4(value);
    //    case "Mat3":
    //        return new Shade.Mat3(value);
    //    case "Mat4":
    //        return new Shade.Mat4(value);
    //    default:
    //        throw new Error("Can't copy static value of kind: " + typeInfo.getKind());
    //}
};

TypeInfo.prototype = {
    getType: function () {
        return this.type;
    },

    setKind: function (kind) {
        this.info.kind = kind;
    },

    getKind: function () {
        if (this.isArray())
            return "Array";
        if (!(this.isObject() || this.isFunction()))
            return null;
        return this.info.kind || null;
    },

    getUserData: function () {
        var extra = this.info;
        if (!extra.userData) extra.userData = {};
        return extra.userData;
    },

    getArrayElementType: function () {
        if (!this.isArray())
            throw new Error("Called getArrayElementType on " + this.getType());
        return this.info.elements;
    },

    setArraySize: function (size) {
        if (!this.isArray())
            throw new Error("Called setArraySize on " + this.getType());
        assert(size >= 0);
        this.info.staticSize = size;
    },

    getArraySize: function () {
        if (!this.isArray())
            throw new Error("Called getArraySize on " + this.getType());
        return this.info.staticSize;
    },

    isOfKind: function (kind) {
        if (!this.isObject()) {
            return false;
        }
        return this.getKind() == kind;
    },

    /**
     * @param {string} type
     * @param {string?} kind
     */
    setType: function (type, kind) {
        var extra = this.info;
        extra.type = type;
        if (kind)
            this.setKind(kind);
        if (this.isValid())
            this.clearError();
    },
    setFunctionName: function (name) {
        this.info.functionName = name;
    },
    getFunctionName: function () {
        return this.info.functionName;
    },
    setInvalid: function (message) {
        this.setType(TYPES.INVALID);
        if (message)
            this.setError(message);
    },

    isOfType: function (type) {
        return this.getType() == type;
    },

    equals: function (other) {
        return this.getType() == other.getType() && this.getKind() == other.getKind();
    },

    isInt: function () {
        return this.isOfType(TYPES.INT);
    },
    isNumber: function () {
        return this.isOfType(TYPES.NUMBER);
    },
    isValid: function () {
        return !this.isOfType(TYPES.INVALID);
    },
    isNullOrUndefined: function () {
        return this.isNull() || this.isUndefined();
    },
    isNull: function () {
        return this.isOfType(TYPES.NULL);
    },
    isUndefined: function () {
        return this.isOfType(TYPES.UNDEFINED);
    },
    isBool: function () {
        return this.isOfType(TYPES.BOOLEAN);
    },
    isString: function () {
        return this.isOfType(TYPES.STRING);
    },
    isArray: function () {
        return this.isOfType(TYPES.ARRAY);
    },
    isFunction: function () {
        return this.isOfType(TYPES.FUNCTION);
    },
    isObject: function () {
        return this.isOfType(TYPES.OBJECT) || this.isOfType(TYPES.ARRAY);
    },
    isVector: function () {
        return this.isObject() && this.isOfKind("Vec2") || this.isOfKind("Vec3") || this.isOfKind("Vec4");
    },
    isTexture: function () {
        return this.isObject() && this.isOfKind("Texture")
    },
    isMatrix: function () {
        return this.isObject() && this.isOfKind("Mat2") || this.isOfKind("Mat3") || this.isOfKind("Mat4");
    },
    isGlobal: function () {
        return !!this.info.global;
    },
    setGlobal: function (global) {
        var extra = this.info;
        extra.global = global;
    },
    isOutput: function () {
        return !!this.info.output;
    },
    setOutput: function (output) {
        var extra = this.info;
        extra.output = output;
    },
    canNumber: function () {
        return this.isNumber() || this.isInt() || this.isBool();
    },
    canInt: function () {
        return this.isInt() || this.isBool();
    },
    canObject: function () {
        return this.isObject() || this.isArray() || this.isFunction();
    },
    setCommonType: function (a, b) {
        if (a.equals(b)) {
            this.copyFrom(a);
            return true;
        }
        if (a.canNumber() && b.canNumber()) {
            this.setType(TYPES.NUMBER);
            return true;
        }
        return false;
    },
    hasConstantValue: function () {
        var extra = this.info;
        if (this.isNullOrUndefined())
            return true;
        return extra.hasOwnProperty("constantValue");
    },
	getConstantValue: function () {
        if (!this.hasConstantValue()) {
            throw new Error("Node has no static value: " + this.node);
        }
        if (this.isNull())
            return null;
        if (this.isUndefined())
            return undefined;
        return this.info.constantValue;
    },
    setConstantValue: function (v) {
        var extra = this.info;
        if (this.isNullOrUndefined())
            throw new Error("Null and undefined have predefined values.");
        extra.constantValue = v;
    },
    canUniformExpression: function () {
        return this.hasConstantValue() || this.isUniformExpression();
    },

    isUniformExpression: function () {
        var extra = this.info;
        return extra.hasOwnProperty("uniformDependencies")
    },
    setUniformDependencies: function () {
        var extra = this.info;
        var dependencies = new Set();
        var args = Array.prototype.slice.call(arguments);
        args.forEach(function (arg) {
            if (Array.isArray(arg))
                dependencies = Set.union(dependencies, arg);
            else
                dependencies.add(arg);
        });
        extra.uniformDependencies = dependencies.values();
    },
    getUniformDependencies: function () {
        var extra = this.info;
        return extra.uniformDependencies || [];
    },
    getUniformCosts: function () {
        var extra = this.info;
        return extra.uniformCosts | 0;
    },
    setUniformCosts: function (costs) {
        var extra = this.info;
        extra.uniformCosts = costs;
    },
    clearUniformDependencies: function () {
        var extra = this.info;
        delete extra.uniformDependencies;
    },

    setDynamicValue: function () {
        delete this.info.constantValue;
    },
    setCall: function (call) {
        var extra = this.info;
        extra.evaluate = call;
    },
    getCall: function () {
        return this.info.evaluate;
    },
    clearCall: function () {
        var extra = this.info;
        delete extra.evaluate;
    },
    copyFrom: function (other) {
		assert(other instanceof TypeInfo);
        extend(this.info, other.info);
    },
    str: function () {
        var extra = this.info;
        return JSON.stringify(extra, null, 1);
    },
    canNormal: function () {
        return this.isObject() && (this.isOfKind(KINDS.NORMAL) || this.isOfKind(KINDS.VEC3));
    },
    canColor: function () {
        return this.isObject() && (this.isOfKind(KINDS.VEC4) || this.isOfKind(KINDS.VEC3));
    },
    hasError: function () {
        return this.getError() != null;
    },
    getError: function () {
        var extra = this.info;
        return extra.error;
    },
    setError: function (err) {
        var extra = this.info;
        extra.error = err;
    },
    clearError: function () {
        var extra = this.info;
        extra.error = null;
    },
    setFromExtra: function (extra) {
        extend(this.info, extra);
        // Set static object extra: This might be an object
        if (extra.constantValue != undefined) {
            this.setConstantValue(TypeInfo.copyStaticValue(this, extra.constantValue));
        }
    },

	hasProperty: function (name) {
        if (this.isObject() || this.isFunction()) {
             var obj;
             if(this.getKind()) {
                 obj = TypeSystem.getPredefinedObject(this.getKind());
             } else {
                obj = this.info;
             }
            return (obj.properties && obj.properties.hasOwnProperty(name)) || (obj.prototype && obj.prototype.hasOwnProperty(name));
        }
        return false;
    },


    isPredefinedObject: function() {
        return this.isObject() && this.getKind();
    },

    getPropertyInfo: function (name) {
        assert(this.hasProperty(name));
        if (this.isPredefinedObject()) { // Predefined object
            var predefinedType = TypeSystem.getPredefinedObject(this.getKind());
            var property = predefinedType.properties ? predefinedType.properties[name] : (predefinedType.prototype ? predefinedType.prototype[name] : null);
            if (property) {
                if (typeof property == "function") {
                    return new TypeInfo({type: "function", evaluate: property});
                }
                return new TypeInfo(property);
            }
        } else {
            return new TypeInfo(this.info.properties[name]);
        }
        return null;

    },
    setProperties: function(p) {
        assert(this.isObject());
        this.info.properties = p;
    },

    setProperty: function(name, p) {
        assert(this.isObject());
        this.info.properties[name] = p;
    },

    canEvaluate: function () {
        return this.isFunction() && typeof this.info.evaluate == "function";
    },

    evaluate: function (node, args, scope, objectReference) {
        assert(this.canEvaluate());
        return this.info.evaluate(node, args, scope, objectReference);
    },

    canComputeStaticValue: function () {
        return typeof this.info.computeStaticValue == "function";
    },

    computeStaticValue: function (typeInfo, args, scope, objectReference) {
        assert(this.canComputeStaticValue());
        return this.info.computeStaticValue(typeInfo, args, scope, objectReference);
    },

    getNodeInfo: function () {
        if (this.isObject())
            return this.info.info;
    },
    setNodeInfo: function (info) {
        if (!this.isObject())
            throw new Error("Only objects may have a node info");
        this.info.info = info;
    },
    getTypeString: function () {
        if (this.isObject()) {
            return this.isOfKind(KINDS.ANY) ? "Object" : ("Object #<" + this.getKind() + ">");
        }
        return this.getType();
    },
    /**
     * Get the internal type as JavaScript type
     * @returns {string}
     */
    getJavaScriptTypeString: function () {
        //noinspection FallthroughInSwitchStatementJS
        switch (this.getType()) {
            case TYPES.INT:
            case TYPES.FLOAT:
            case TYPES.NUMBER:
                return "number";
            case TYPES.OBJECT:
            case TYPES.ARRAY:
                return "object";
            case TYPES.STRING:
                return "string";
            case TYPES.UNDEFINED:
                return "undefined";
            case TYPES.FUNCTION:
                return "function";
            default:
                // TODO: For debug we use this now, should throw an exception
                return "?" + this.getType();
        }
    },
    setSource: function (source) {
        var extra = this.info;
        extra.source = source;
    },
    getSource: function () {
        return this.info.source;
    },

	isDerived: function () {
        return this.info.derived == true;
    },
    getStaticTruthValue: function () {
        // !!undefined == false;
        if (this.isNullOrUndefined())
            return false;
        // !!{} == true
        if (this.canObject())
            return true;
        // In all other cases, it depends on the value,
        // thus we can only evaluate this for static objects
        if (this.hasConstantValue()) {
            return !!this.getConstantValue();
        }
        return undefined;
    },
    setSemantic: function (sem) {
        this.info.semantic = sem;
    },
    getSemantic: function () {
        return this.info.semantic;
    },
	getReturnInfo: function () {
        return this.info.returnInfo;
    },
    setReturnInfo: function (info) {
        this.info.returnInfo = info;
    }

};


exports = module.exports = TypeInfo;

},{"../interfaces.js":188,"./constants.js":200,"./type-system.js":202,"analyses":46,"assert":25,"estraverse":61,"lodash.assign":81,"lodash.clone":82}],204:[function(require,module,exports){
"use strict";

var TypeInfo = require("../type-system/typeinfo.js");
var TYPES = require("../type-system/constants.js").TYPES;

exports = module.exports = function (node) {
    node.extra = node.extra || {type: TYPES.ANY};
    return new TypeInfo(node.extra);
};


},{"../type-system/constants.js":200,"../type-system/typeinfo.js":203}],205:[function(require,module,exports){
"use strict";

function Context(options) {
    options = options || {};

    this._scopeStack = [];
    this._reservedNames = options.reservedNames || [];
    this._usedNames = new Set();
}

Object.defineProperty(Context.prototype, "currentScope", {
    get: function () {
        return this._scopeStack[this._scopeStack.length - 1];
    }
});

Context.prototype.pushScope = function (scope) {
    this._scopeStack.push(scope);
};

Context.prototype.popScope = function () {
    return this._scopeStack.pop();
};

exports = module.exports = Context;

},{}],206:[function(require,module,exports){
"use strict";

exports.annotate = require("./annotate");
exports.Scope = require("./scope");
exports.throwError = require("./throw_error");
exports.toJavaScript = require("./to_javascript");
exports.Context = require("./context");
},{"./annotate":204,"./context":205,"./scope":207,"./throw_error":208,"./to_javascript":209}],207:[function(require,module,exports){
"use strict";

var assert = require("assert");
var Syntax = require("estraverse").Syntax;

// Internal dependencies
var ErrorHandler = require("./../type-system/errors.js");
var TypeInfo = require("./../type-system/typeinfo.js");
var TYPES = require("./../type-system/constants.js").TYPES;
var annotate = require("./annotate");


function Scope(node, parent, options) {
    options = options || {};
    options.name = options.name || node.id.name || "|anonymous|";

    if (parent)
        assert(parent instanceof Scope);

    this.parent = parent || null;
    this.scope = node.scope = node.scope || {};
    this.scope.capturedVariables = [];
    this.scope.name = options.name;
    this.scope.bindings = node.scope.bindings || {};
}

Object.defineProperties(Scope.prototype, {
    bindings: {
        get: function () {
            return this.scope.bindings;
        }
    },
    name: {
        get: function () {
            return this.scope.name;
        }
    },
    rootScope: {
        get: function () {
            if (this.parent)
                return parent.rootScope;
        }
    },
    returnInfo: {
        get: function () {
            return this.scope.returnInfo || {type: TYPES.UNDEFINED};
        },
        set: function (annotation) {
            this.scope.returnInfo = annotation.info;
        }
    }
});

Scope.prototype.declare = function(name, toremove, position) {
    this.bindings[name] =  {
        initialized: false,
        initPosition: position,
        extra: {
            type: TYPES.UNDEFINED
        }
    };
};

Scope.prototype.declarePredefined = function (name, descriptor) {
    assert(descriptor && descriptor.name);
    this.declare(name);
    this.updateTypeInfo(name, new TypeInfo({type: typeof descriptor, kind: descriptor.name }));
};

Scope.prototype.declareParameters = function (params) {
    var self = this;
    params.forEach(function (parameter) {
        self.declare(parameter.name);
        self.updateTypeInfo(parameter.name, new TypeInfo(parameter.extra));
    });
};

Scope.prototype.declares = function(name) {
    return this.bindings.hasOwnProperty(name);
};

Scope.prototype.get = function(name) {
    if(this.declares(name))
        return new TypeInfo(this.bindings[name].extra);

    if (this.parent) {
        var info = this.parent.get(name);
        if (info && !info.isFunction() && this.scope.capturedVariables.indexOf(name) === -1)
            this.scope.capturedVariables.push(name);
        return info;
    }

    return null;
};

Scope.prototype.type = function (node) {
    if (node.type === Syntax.Identifier && node.name !== "undefined") {
        assert(node.name);
        var definition = this.get(node.name);
        if(!definition) {
            ErrorHandler.throwError(node, ErrorHandler.ERROR_TYPES.REFERENCE_ERROR + ": " + node.name + " is not defined")
        }
        assert(definition instanceof TypeInfo);
        return definition;
    }

    if (node.type == Syntax.ThisExpression) {
        var definition = this.get("this");
        assert(definition instanceof TypeInfo);
        return definition;
    }

    return annotate(node);
};

Scope.prototype.updateTypeInfo = function (name, newTypeInfo, node) {
    if (!this.declares(name)) {
        if (node) {
            newTypeInfo.setInvalid(ErrorHandler.generateErrorInformation(node, ErrorHandler.ERROR_TYPES.REFERENCE_ERROR, name, "is not defined"));
            return;
        }
        throw new Error("Reference error: " + name + " is not defined.")
    }
    var v = this.bindings[name];
    var type = new TypeInfo(v.extra);

    if (v.initialized && type.getType() !== newTypeInfo.getType()) {
        if (node) {
            newTypeInfo.setInvalid(ErrorHandler.generateErrorInformation(node, ErrorHandler.ERROR_TYPES.SHADEJS_ERROR, name, "may not change it's type"));
            return;
        }
        throw new Error("Variable may not change it's type: " + name);
    }
    if (!v.initialized && v.initPosition) {
        // Annotate the declaration, if one is given
        annotate(v.initPosition).copyFrom(newTypeInfo);
        annotate(v.initPosition).setDynamicValue();
    }

    type.copyFrom(newTypeInfo);
    type.setDynamicValue();
    v.initialized = !type.isUndefined();
};

Scope.prototype.getScopeForName = function (name) {
    if (this.declares(name))
        return this;
    if (this.parent)
        return this.parent.getScopeForName(name);
    return null;
};

Scope.prototype.getIdentifier = function (name) {
    var scope = this.getScopeForName(name);
    if (!scope)
        return null;
    return scope.toString() + "." + name;
};

Scope.prototype.toString = function () {
    var ctx = this;
    var names = [];
    while (ctx) {
        names.unshift(ctx.name);
        ctx = ctx.parent;
    }
    return names.join(".");
};

exports = module.exports = Scope;

},{"./../type-system/constants.js":200,"./../type-system/errors.js":201,"./../type-system/typeinfo.js":203,"./annotate":204,"assert":25,"estraverse":61}],208:[function(require,module,exports){
"use strict";

var toJavaScript = require("./to_javascript");

exports = module.exports = function(node, msg) {
    var loc = node && node.loc;
    if (loc && loc.start.line)
        msg = "Line " + loc.start.line + ": " + msg;

    msg += ": " + toJavaScript(node);

    var error = new Error(msg);
    error.loc = loc;
    throw error;
};

},{"./to_javascript":209}],209:[function(require,module,exports){
"use strict";

var CodeGenerator = require("escodegen");

exports = module.exports = function (node) {
    return CodeGenerator.generate(node);
};
},{"escodegen":54}]},{},[43])(43)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
